"doRNG", "ggalluvial", "ggforce", "Hmisc", "irlba", "huge",  "igraph",
"irr", "lme4", "lmerTest", "nnet", "MLmetrics",
"Matrix", "magrittr", "MASS", "missForest", "magick", "nlme",
"phangorn", "pheatmap", "pkgconfig", "dplyr", "parallel", "pscl",
"plotly", "pdftools", "rfUtilities", "rlang", "randomForest",
"readxl", "RColorBrewer", "ROCR", "reshape", "reshape2", "yarrr",
"stringi", "tidyverse", "vegan", "VGAM", "picante", "zoo",
"RcppZiggurat", "Rfast", "survival", "withr", "knitr", "kableExtra", "DT","shiny")
# Packages to install from Bioconductor
bioconductor_packages <- c("phyloseq", "microbiome", "Rhtslib", "dada2", "dplyr",
"ggpubr", "ggfortify", "genefilter", "ggpmisc", "S4Vectors",
"ShortRead", "illuminaio", "rstatix", "useful", "DECIPHER",
"ComplexHeatmap", "DESeq2", "ALDEx2","scater")
# Function to install and load CRAN packages
install_load_cran <- function(package) {
if (!require(package, character.only = TRUE, quietly = TRUE)) {
install.packages(package)
}
library(package, character.only = TRUE, quietly = TRUE)
}
# Function to install and load Bioconductor packages
install_load_bioc <- function(package) {
if (!require(package, character.only = TRUE, quietly = TRUE)) {
if (!require("BiocManager", quietly = TRUE)) {
install.packages("BiocManager")
}
BiocManager::install(package, force = TRUE, ask = FALSE, type = "source")
}
library(package, character.only = TRUE, quietly = TRUE)
}
# Installing and loading CRAN packages
for (package in cran_packages) {
install_load_cran(package)
}
# Installing and loading Bioconductor packages
for (package in bioconductor_packages) {
install_load_bioc(package)
}
# Print success message
if (require("crayon", quietly = TRUE)) {
cat(crayon::blue("#--------------------------------------------------------------# \n"))
cat(crayon::blue("#------       General analysis Of microbiome (Go)        ------# \n"))
cat(crayon::blue("#------    Quick statistics and visualization tools      ------# \n"))
cat(crayon::blue("#------                (with R markdown)                 ------# \n"))
cat(crayon::blue("#--------------------------------------------------------------# \n"))
cat(crayon::yellow("All the required packages were installed and loaded.\n"))
cat(crayon::blue("#--------------------------------------------------------------# \n"))
} else {
cat("#--------------------------------------------------------------# \n")
cat("All the required packages were installed and loaded.\n")
cat("#--------------------------------------------------------------# \n")
}
}
# ----- Libraries and functions ------#
# source("~/Dropbox/04_Scripts/R_source/microbiome3/Go_tools/Go_tools.5.0.1.R")
# devtools::install_github("bbagy/Gotools")
library("Gotools")
Gotool_dependency()
tools::package_dependencies("shiny", which = c("Depends", "Imports"), recursive = TRUE)
devtools::install_github("bbagy/Gotools")
#install.packages("devtools")
library(devtools)
devtools::install_github("bbagy/Gotools") # or install.packages("Gomarkdown_0.0.0.9000.tar.gz", repos = NULL, type="source")
#install.packages("devtools")
library(devtools)
devtools::install_github("bbagy/Gotools") # or install.packages("Gomarkdown_0.0.0.9000.tar.gz", repos = NULL, type="source")
library("Gotools")
#install.packages("devtools")
library(devtools)
devtools::install_github("bbagy/Gotools") # or install.packages("Gomarkdown_0.0.0.9000.tar.gz", repos = NULL, type="source")
library("Gotools")
Gotool_dependency()
devtools::install_github("bbagy/Gotools",force = TRUE)
install.packages("devtools")
#install.packages("devtools")
library(devtools)
devtools::install_github("bbagy/Gotools") # or install.packages("Gomarkdown_0.0.0.9000.tar.gz", repos = NULL, type="source")
#install.packages("devtools")
library(devtools)
install.packages(c("usethis", "pkgdown"))
install.packages("devtools")
install.packages(c("openssl", "systemfonts", "credentials", "httr", "httr2", "gert", "gh", "usethis", "pkgdown"))
install.packages("devtools")
install.packages("devtools")
# install.packages("devtools")
library(devtools)
devtools::install_github("bbagy/Gotools") # or install.packages("Gomarkdown_0.0.0.9000.tar.gz", repos = NULL, type="source")
library("Gotools")
library("Gotools")
Gotool_dependency()
#===== Read Go_tools
# devtools::install_github("bbagy/Gotools")
library("Gotools")
rm(list=ls())
# ----- Libraries and functions ------#
# devtools::install_github("bbagy/Gotools", force=T)
library("Gotools")
#=============================#
#----    Set analysis    -----#
#=============================#
source("/Users/heekukpark/Dropbox/04_scripts/R_source/R_storage/1_R_History/2024/FB_Inuline/20240410_FB_Rmd_starter.R")
#===== Read Go_tools
# devtools::install_github("bbagy/Gotools", force=T)
library("Gotools")
Gotool_dependency()
project_name <- "Prebiotic (Inuline) 16S microbiome – Dr. Daniel Freedberg"
samples <- "344 (94 Participants)"
Sequencing.date <- "12/28/2023"
platform <- "Illumina MiSeq 2x300"
contact_email <- "hp2523@cumc.columbia.edu"
expInfo <- Go_expInfo(kit_number = 6,prep_number = 1, spikein_number = 2)
devtools::install_github("bbagy/Gotools", force=T)
#===== Read Go_tools
# devtools::install_github("bbagy/Gotools", force=T)
library("Gotools")
Gotool_dependency()
project_name <- "Prebiotic (Inuline) 16S microbiome – Dr. Daniel Freedberg"
samples <- "344 (94 Participants)"
Sequencing.date <- "12/28/2023"
platform <- "Illumina MiSeq 2x300"
contact_email <- "hp2523@cumc.columbia.edu"
expInfo <- Go_expInfo(kit_number = 6,prep_number = 1, spikein_number = 2)
devtools::install_github("bbagy/Gotools", force=T)
#===== Read Go_tools
# devtools::install_github("bbagy/Gotools", force=T)
library("Gotools")
Gotool_dependency()
project_name <- "Prebiotic (Inuline) 16S microbiome – Dr. Daniel Freedberg"
samples <- "344 (94 Participants)"
Sequencing.date <- "12/28/2023"
platform <- "Illumina MiSeq 2x300"
contact_email <- "hp2523@cumc.columbia.edu"
expInfo <- Go_expInfo(kit_number = 6,prep_number = 1, spikein_number = 2)
expInfo <- Go_expInfo(kit_number = 6, prep_number = 1, spikein_number = 2, authorName1="Heekuk Park",authorName2="Dwayne Seeram");expInfo
#===== Read Go_tools
# devtools::install_github("bbagy/Gotools", force=T)
library("Gotools")
Gotool_dependency()
#=====  Define project
project_name <- "Prebiotic (Inuline) 16S microbiome – Dr. Daniel Freedberg"
samples <- "344 (94 Participants)"
Sequencing.date <- "12/28/2023"
platform <- "Illumina MiSeq 2x300"
contact_email<-"hp2523@cumc.columbia.edu"
expInfo <- Go_expInfo(kit_number = 6, prep_number = 1, spikein_number = 2, authorName1="Heekuk Park",authorName2="Dwayne Seeram");expInfo
expInfo$contact_email
# Read the external HTML file content
html_content <- readLines("/Users/heekukpark/Dropbox/04_scripts/R_source/Gotool_html/email_form.html", warn = FALSE)
# Replace placeholders with actual R variables
contact_email <- expInfo$contact_email
html_content <- gsub("\\{\\{project_name\\}\\}", project_name, html_content)
html_content <- gsub("\\{\\{contact_email\\}\\}", contact_email, html_content)
# Print the modified HTML content into the R Markdown document
cat(html_content, sep = "\n")
contact_email<- expInfo$contact_email
# Read the external HTML file content
html_content <- readLines("/Users/heekukpark/Dropbox/04_scripts/R_source/Gotool_html/email_form.html", warn = FALSE)
# Replace placeholders with actual R variables
contact_email <- expInfo$contact_email
html_content <- gsub("\\{\\{project_name\\}\\}", project_name, html_content)
html_content <- gsub("\\{\\{contact_email\\}\\}", contact_email, html_content)
# Print the modified HTML content into the R Markdown document
cat(html_content, sep = "\n")
contact_email<- expInfo$contact_email
contact_email
contact_email<-c("hp2523@cumc.columbia.edu", "ds4057@cumc.columbia.edu")
# Read the external HTML file content
html_content <- readLines("/Users/heekukpark/Dropbox/04_scripts/R_source/Gotool_html/email_form.html", warn = FALSE)
# Replace placeholders with actual R variables
contact_email <- contact_email
html_content <- gsub("\\{\\{project_name\\}\\}", project_name, html_content)
html_content <- gsub("\\{\\{contact_email\\}\\}", contact_email, html_content)
# Print the modified HTML content into the R Markdown document
cat(html_content, sep = "\n")
contact_email<-c("ds4057@cumc.columbia.edu")
# Read the external HTML file content
html_content <- readLines("/Users/heekukpark/Dropbox/04_scripts/R_source/Gotool_html/email_form.html", warn = FALSE)
# Replace placeholders with actual R variables
contact_email <- contact_email
html_content <- gsub("\\{\\{project_name\\}\\}", project_name, html_content)
html_content <- gsub("\\{\\{contact_email\\}\\}", contact_email, html_content)
# Print the modified HTML content into the R Markdown document
cat(html_content, sep = "\n")
# Join the email addresses with a comma if there are two
contact_email_joined <- paste(contact_email, collapse = ",")
contact_email_joined
expInfo <- Go_expInfo(kit_number = 6, prep_number = 1, spikein_number = 2, authorName1="Heekuk Park",authorName2="Dwayne Seeram");expInfo
contact_email<- expInfo$contact_email
# Join the email addresses with a comma if there are two
contact_email_joined <- paste(contact_email, collapse = ",")
contact_email_joined
# Your existing code to replace placeholders
html_content <- readLines("/Users/heekukpark/Dropbox/04_scripts/R_source/Gotool_html/email_form.html", warn = FALSE)
html_content <- gsub("\\{\\{project_name\\}\\}", project_name, html_content)
html_content <- gsub("\\{\\{contact_email\\}\\}", contact_email_joined, html_content)
# Print the modified HTML content
cat(html_content, sep = "\n")
expInfo <- Go_expInfo(kit_number = 6, prep_number = 1, spikein_number = 2, authorName1="Heekuk Park",authorName2=NULL);expInfo
contact_email<- expInfo$contact_email
# Join the email addresses with a comma if there are two
contact_email_joined <- paste(contact_email, collapse = ",")
# Your existing code to replace placeholders
html_content <- readLines("/Users/heekukpark/Dropbox/04_scripts/R_source/Gotool_html/email_form.html", warn = FALSE)
html_content <- gsub("\\{\\{project_name\\}\\}", project_name, html_content)
html_content <- gsub("\\{\\{contact_email\\}\\}", contact_email_joined, html_content)
# Print the modified HTML content
cat(html_content, sep = "\n")
library(rmarkdown)
# Path to your R Markdown template
rmd_template_path <- "/Users/heekukpark/Dropbox/04_scripts/R_source/R_storage/1_R_History/2024/FB_Inuline/20240410_Summary_report_tem_v1.Rmd"
# Render the Rmd file to an HTML output
render(input = rmd_template_path, output_format = "html_document")
library(rmarkdown)
# Path to your R Markdown template
rmd_template_path <- "/Users/heekukpark/Dropbox/04_scripts/R_source/R_storage/1_R_History/2024/FB_Inuline/20240410_Summary_report_tem_v1.Rmd"
# Render the Rmd file to an HTML output
render(input = rmd_template_path, output_format = "html_document")
# Path to your R Markdown template
rmd_template_path <- "/Users/heekukpark/Dropbox/04_scripts/R_source/R_storage/1_R_History/2024/FB_Inuline/20240410_Summary_report_tem_v1.Rmd"
# Render the Rmd file to an HTML output
render(input = rmd_template_path, output_format = "html_document")
#######################################################
#---------     Core general Rmd starter      ---------#
#######################################################
# rm(list=ls())
# list.files()
#===== Read Go_tools
# devtools::install_github("bbagy/Gotools", force=T)
library("Gotools")
Gotool_dependency()
devtools::install_github("bbagy/Gotools", force=T)
library("Gotools")
#######################################################
#---------     Core general Rmd starter      ---------#
#######################################################
# rm(list=ls())
# list.files()
#===== Read Go_tools
# devtools::install_github("bbagy/Gotools", force=T)
library("Gotools")
devtools::install_github("bbagy/Gotools", force=T)
library("Gotools")
devtools::install_github("bbagy/Gotools", force=T)
library("Gotools")
Gotool_dependency()
# alpha diversity 측정시, 필터 한 값과 안한 값의 차이가 크게 나타난다.
# 필터 하지 않은 것으로 alpha diversity 측정 하는것이 맞는거 같다.
dev.off()
rm(list=ls())
# ----- Libraries and functions ------#
#===== Read Go_tools
# devtools::install_github("bbagy/Gotools",force = TRUE)
library("Gotools")
Gotool_dependency()
q()
# 환경 설정
#install.packages("keras")
#install.packages("reticulate")
library(keras)
# 환경 설정
install.packages("keras")
install.packages("reticulate")
# 환경 설정
#install.packages("keras")
#install.packages("reticulate")
library(keras)
library(reticulate)
use_condaenv("r-tf-arm", required = TRUE)
use_python("/opt/homebrew/anaconda3/envs/r-tf-arm/bin/python", required = TRUE)
use_condaenv("r-tf-arm", conda = "/Users/heekukpark/miniconda3/bin/conda", required = TRUE)
py_config()
version$platform
# 환경 설정
#install.packages("keras")
#install.packages("reticulate")
library(keras)
library(reticulate)
use_condaenv("r-tf-arm", conda = "/Users/heekukpark/miniconda3/bin/conda", required = TRUE)
py_config()
# 환경 설정
#install.packages("keras")
#install.packages("reticulate")
library(keras)
library(reticulate)
use_condaenv("r-tf-arm", conda = "/Users/heekukpark/miniconda3/bin/conda", required = TRUE)
py_config()
devtools::install_github("bbagy/Gotools", force=T)
install_load_bioc <- function(package) {
if (!require(package, character.only = TRUE, quietly = TRUE)) {
if (!requireNamespace("BiocManager", quietly = TRUE)) {
install.packages("BiocManager")
}
BiocManager::install(package, force = TRUE, ask = FALSE)
}
library(package, character.only = TRUE, quietly = TRUE)
}
# Installing and loading required Bioconductor packages
bioconductor_packages <- c("phyloseq", "microbiome", "Rhtslib", "dada2", "dplyr",
"ggpubr", "ggfortify", "genefilter", "ggpmisc", "S4Vectors",
"ShortRead", "illuminaio", "rstatix", "useful", "DECIPHER",
"ComplexHeatmap", "DESeq2", "ALDEx2", "scater", "ANCOMBC")
for (package in bioconductor_packages) {
install_load_bioc(package)
}
# 환경 설정
#install.packages("keras")
#install.packages("reticulate")
library(keras)
# 환경 설정
#install.packages("keras")
#install.packages("reticulate")
library(keras)
library(reticulate)
use_condaenv("r-tf-arm", conda = "/Users/heekukpark/miniconda3/bin/conda", required = TRUE)
py_config()
library(reticulate)
use_virtualenv("~/.virtualenvs/r-keras-env-py310", required = TRUE)
library(keras)
# 간단한 Keras 모델 정의
model <- keras_model_sequential() %>%
layer_dense(units = 10, input_shape = 5)
# 간단한 Keras 모델 정의
model <- keras_model_sequential() %>%
layer_dense(units = 10, input_shape = 5)
library(keras)
# 간단한 Keras 모델 정의
model <- keras_model_sequential() %>%
layer_dense(units = 10, input_shape = 5)
library(keras)
# 간단한 Keras 모델 정의
model <- keras_model_sequential() %>%
layer_dense(units = 10, input_shape = 5)
library(keras)
# 간단한 Keras 모델 정의
model <- keras_model_sequential() %>%
layer_dense(units = 10, input_shape = 5)
# 환경 설정
#install.packages("keras")
#install.packages("reticulate")
library(keras)
library(reticulate)
use_condaenv("r-tf-arm", conda = "/Users/heekukpark/miniconda3/bin/conda", required = TRUE)
py_config()
version$platform
# 간단한 Keras 모델 정의
model <- keras_model_sequential() %>%
layer_dense(units = 10, input_shape = 5)
# 모델 구조 요약
summary(model)
install.packages("devtools")
install.packages(c("usethis", "pkgdown", "roxygen2", "rversions", "urlchecker"))
install.packages("leaflet")
install.packages("sf")
install.packages("sf")
install.packages("units", type = "source")
install.packages("terra", type = "source")
install.packages("leaflet", type = "source")
install.packages("units", type = "source")
install.packages("terra", type = "source")
install.packages(
"units",
configure.args = c(
"--with-udunits2-lib=/usr/local/opt/udunits/lib",
"--with-udunits2-include=/usr/local/opt/udunits/include"
),
type = "source"
)
Sys.setenv(UDUNITS2_INCLUDE = "/usr/local/opt/udunits/include")
Sys.setenv(UDUNITS2_LIBS = "/usr/local/opt/udunits/lib")
install.packages("units", type = "source")
install.packages("units", type = "source", verbose = TRUE)
Sys.setenv(UDUNITS2_INCLUDE = "/usr/local/opt/udunits/include")
Sys.setenv(UDUNITS2_LIBS = "/usr/local/opt/udunits/lib")
install.packages("units", type = "source")
install.packages("units", type = "source", verbose = TRUE)
Sys.setenv(
PKG_CONFIG_PATH = "/usr/local/opt/udunits/lib/pkgconfig",
UDUNITS2_INCLUDE = "/usr/local/opt/udunits/include",
UDUNITS2_LIBS = "/usr/local/opt/udunits/lib"
)
install.packages("units", type = "source")
install.packages(
"units",
configure.vars = "CPPFLAGS='-I/usr/local/opt/udunits/include' LDFLAGS='-L/usr/local/opt/udunits/lib'",
type = "source"
)
Sys.setenv(
PKG_CONFIG_PATH = "/usr/local/opt/udunits/lib/pkgconfig",
UDUNITS2_INCLUDE = "/usr/local/opt/udunits/include",
UDUNITS2_LIBS = "/usr/local/opt/udunits/lib"
)
install.packages(
"units",
configure.vars = "CPPFLAGS='-I/usr/local/opt/udunits/include' LDFLAGS='-L/usr/local/opt/udunits/lib'",
type = "source"
)
Sys.setenv(
PKG_CONFIG_PATH = "/opt/homebrew/opt/udunits/lib/pkgconfig",
UDUNITS2_INCLUDE = "/opt/homebrew/opt/udunits/include",
UDUNITS2_LIBS = "/opt/homebrew/opt/udunits/lib"
)
install.packages(
"units",
configure.vars = "CPPFLAGS='-I/opt/homebrew/opt/udunits/include' LDFLAGS='-L/opt/homebrew/opt/udunits/lib'",
type = "source"
)
library(leaflet)
install.packages("units", type = "source")
install.packages("sf")
install.packages("leaflet")
library(units)
install.packages("leaflet")
install.packages("sf")
install.packages("sf", type = "source")
# 환경 설정
#install.packages("keras")
#install.packages("reticulate")
library(keras)
library(reticulate)
Sys.setenv(
PKG_CONFIG_PATH = "/opt/homebrew/opt/gdal/lib/pkgconfig",
LDFLAGS = "-L/opt/homebrew/opt/gdal/lib -L/opt/homebrew/opt/libomp/lib",
CPPFLAGS = "-I/opt/homebrew/opt/gdal/include -I/opt/homebrew/opt/libomp/include"
)
install.packages(
"sf",
configure.vars = "CXX11FLAGS='-fopenmp'",
type = "source"
)
Sys.setenv(
CC = "/opt/homebrew/opt/llvm/bin/clang",
CXX = "/opt/homebrew/opt/llvm/bin/clang++",
PKG_CONFIG_PATH = "/opt/homebrew/opt/gdal/lib/pkgconfig",
LDFLAGS = "-L/opt/homebrew/opt/gdal/lib -L/opt/homebrew/opt/llvm/lib",
CPPFLAGS = "-I/opt/homebrew/opt/gdal/include -I/opt/homebrew/opt/llvm/include"
)
install.packages(
"sf",
configure.vars = "CXX11FLAGS='-fopenmp'",
type = "source"
)
Sys.setenv(
CC = "/opt/homebrew/opt/llvm/bin/clang",
CXX = "/opt/homebrew/opt/llvm/bin/clang++",
PKG_CONFIG_PATH = "/opt/homebrew/opt/gdal/lib/pkgconfig",
LDFLAGS = "-L/opt/homebrew/opt/gdal/lib -L/opt/homebrew/opt/llvm/lib",
CPPFLAGS = "-I/opt/homebrew/opt/gdal/include -I/opt/homebrew/opt/llvm/include"
)
install.packages(
"sf",
configure.vars = "CXX11FLAGS='-fopenmp'",
type = "source"
)
Sys.setenv(
CC = "/opt/homebrew/opt/llvm/bin/clang",
CXX = "/opt/homebrew/opt/llvm/bin/clang++",
PKG_CONFIG_PATH = "/opt/homebrew/opt/gdal/lib/pkgconfig",
LDFLAGS = "-L/opt/homebrew/opt/gdal/lib",
CPPFLAGS = "-I/opt/homebrew/opt/gdal/include"
)
install.packages("sf", type = "source")
Sys.setenv(
CC = "/opt/homebrew/opt/llvm/bin/clang",
CXX = "/opt/homebrew/opt/llvm/bin/clang++",
LDFLAGS = "-L/opt/homebrew/opt/gdal/lib -L/opt/homebrew/opt/libomp/lib",
CPPFLAGS = "-I/opt/homebrew/opt/gdal/include -I/opt/homebrew/opt/libomp/include"
)
install.packages("sf", type = "source")
Sys.setenv(
CC = "/opt/homebrew/opt/llvm/bin/clang",
CXX = "/opt/homebrew/opt/llvm/bin/clang++",
PKG_CONFIG_PATH = "/opt/homebrew/opt/gdal/lib/pkgconfig",
LDFLAGS = "-L/opt/homebrew/opt/gdal/lib",
CPPFLAGS = "-I/opt/homebrew/opt/gdal/include",
CXX11FLAGS = ""
)
install.packages("sf", type = "source")
Sys.setenv(
CC = "/opt/homebrew/opt/llvm/bin/clang",
CXX = "/opt/homebrew/opt/llvm/bin/clang++",
PKG_CONFIG_PATH = "/opt/homebrew/opt/gdal/lib/pkgconfig",
LDFLAGS = "-L/opt/homebrew/opt/gdal/lib",
CPPFLAGS = "-I/opt/homebrew/opt/gdal/include",
CXX11FLAGS = ""
)
install.packages("sf", type = "source")
Sys.setenv(
CC = "/usr/bin/clang",
CXX = "/usr/bin/clang++",
PKG_CONFIG_PATH = "/opt/homebrew/opt/gdal/lib/pkgconfig",
LDFLAGS = "-L/opt/homebrew/opt/gdal/lib",
CPPFLAGS = "-I/opt/homebrew/opt/gdal/include",
CXX11FLAGS = ""
)
install.packages("sf", type = "source")
rm(list=ls())
# ----- Libraries and functions ------#
# devtools::install_github("bbagy/Gotools", force=T)
library("magick")
library("Gotools")
devtools::install_github("bbagy/Gotools", force=T)
setwd("~/Dropbox/04_Scripts/R_source/Gotools")
devtools::build()
devtools::document()
setwd("~/Dropbox/04_Scripts/R_source/Gotools")
devtools::build()
devtools::document()
# build package
setwd("~/Dropbox/04_Scripts/R_source/Gotools")
devtools::build() # generate Gotools_0.0.0.9000.tar.gz
devtools::document()
devtools::document()

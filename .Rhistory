summarise(val = sum(Count), .groups = 'drop') # Explicitly drop grouping
# Calculate the total values for each type and the percentage
combined_aggregated <- combined_aggregated %>%
group_by(type) %>%
mutate(Total = sum(val), # Calculate total for each type
Percentage = (val / Total) * 100) %>% # Calculate percentage
ungroup() # Remove the grouping
combined_aggregated$Label <- paste0(combined_aggregated$Category, " (", round(combined_aggregated$Percentage, 1), "%)")
p <- ggplot(combined_aggregated, aes(x = type, y = val, fill = Category)) +
geom_bar(stat = "identity", position = "fill") +   theme_minimal() +
geom_text(aes(label = Label), position = position_fill(vjust = 0.5), size = 3, color = "black")
if(!is.null(mycols)){
p <- p + scale_color_manual(values = mycols)
}else{
p <- p
}
# Add title and subtitles if they are not NULL
p <- p + labs(title = sprintf("Distribution of %s", pie1,
ifelse(is.null(pie2), "", paste("-",pie2, sep = "")),
ifelse(is.null(pie3), "", paste("-", pie3, sep = ""))))
p1 <- p + coord_polar(theta = "y")
print(p1)
# Save the plot as a PDF
pdf(sprintf("%s/pie.%s.%s%s.pdf", out_path,
project,
ifelse(is.null(name), "", paste(name, ".", sep = "")),
format(Sys.Date(), "%y%m%d")), height = height, width = width)
print(p)
print(p1)
dev.off()
}
Go_piePlot(adiv, project, pie1 = "hpvres", pie2 = "CIND",name = NULL,mycols = NULL,height = 5, width = 4)
Go_piePlot(adiv, project, pie1 = "hpvres", pie2 = "CIND",name = NULL,mycols = NULL,height = 5, width = 4)
Go_piePlot(adiv, project, pie1 = "hpvres", pie2 = "CIND",name = NULL,mycols = NULL,height = 5, width = 5)
Go_piePlot(adiv, project, pie1 = "hpvres", pie2 = "CIND",pie3="HPV_CIND", name = NULL,mycols = NULL,height = 5, width = 5)
unique(adiv$HPV_CIND)
orders <- c("neg", "pos",  "CIN1","CIN2+","HPV+CIN2+", "HPV-CIN1",  "HPV+CIN1")
Go_piePlot(adiv, project, pie1 = "hpvres", pie2 = "CIND",pie3="HPV_CIND", orders= ,name = NULL,mycols = NULL,height = 5, width = 5)
pie.col <- c("#EB5291FF", "#FBBB68FF", "#F5BACFFF", "#9DDAF5FF", "#6351A0FF", "#ECF1F4FF", "#FEF79EFF", "#1794CEFF", "#972C8DFF", "#972C8DFF", "#009E73", "#0000FF")
Go_piePlot(adiv, project, pie1 = "hpvres", pie2 = "CIND",pie3="HPV_CIND", orders= ,name = NULL,mycols = pie.col,height = 5, width = 5)
# Adjust the combined dataframe to control slice order
combined$type <- factor(combined$type, levels = pies[!sapply(pies, is.null)])
combined$type
# Adjust the combined dataframe to control slice order
combined$type <- factor(combined$type, levels = pies[!sapply(pies, is.null)])
# Continue with your existing code to aggregate and calculate percentages
combined_aggregated <- combined %>%
group_by(type, Category) %>%
summarise(val = sum(Count), .groups = 'drop')
combined_aggregated <- combined_aggregated %>%
group_by(type) %>%
mutate(Total = sum(val),
Percentage = (val / Total) * 100) %>%
ungroup()
combined_aggregated$Label <- paste0(combined_aggregated$Category, " (", round(combined_aggregated$Percentage, 1), "%)")
# Plotting
p <- ggplot(combined_aggregated, aes(x = type, y = val, fill = Category)) +
geom_bar(stat = "identity", position = "fill") +
theme_minimal() +
geom_text(aes(label = Label), position = position_fill(vjust = 0.5), size = 3, color = "black")
if(!is.null(mycols)) {
p <- p + scale_fill_manual(values = mycols)
}
p <- p + labs(title = "Distribution Across Categories") + coord_polar(theta = "y")
p
# Plotting
p <- ggplot(combined_aggregated, aes(x = type, y = val, fill = Category)) +
geom_bar(stat = "identity", position = "fill") +
theme_minimal() +
geom_text(aes(label = Label), position = position_fill(vjust = 0.5), size = 3, color = "black")
combined_aggregated
pies[!sapply(pies, is.null)]
pies
# Combine all data frames in the list
combined <- do.call(rbind, dfs)
# Check orders
if (!is.null(orders)){
combined$Category <- factor(combined$Category, levels = orders)
}else{
combined$Category <- factor(combined$Category)
}
combined$type <- factor(combined$type, levels = pies[!sapply(pies, is.null)])
combined_aggregated <- combined %>%
group_by(type, Category) %>% # Grouping by both type and Category might be needed based on your hierarchy.
summarise(val = sum(Count), .groups = 'drop') # Explicitly drop grouping
# Calculate the total values for each type and the percentage
combined_aggregated <- combined_aggregated %>%
group_by(type) %>%
mutate(Total = sum(val), # Calculate total for each type
Percentage = (val / Total) * 100) %>% # Calculate percentage
ungroup() # Remove the grouping
combined_aggregated$Label <- paste0(combined_aggregated$Category, " (", round(combined_aggregated$Percentage, 1), "%)")
p <- ggplot(combined_aggregated, aes(x = type, y = val, fill = Category)) +
geom_bar(stat = "identity", position = "fill") +   theme_minimal() +
geom_text(aes(label = Label), position = position_fill(vjust = 0.5), size = 3, color = "black")
if(!is.null(mycols)){
p <- p + scale_color_manual(values = mycols)
}else{
p <- p
}
# Add title and subtitles if they are not NULL
p <- p + labs(title = sprintf("Distribution of %s", pie1,
ifelse(is.null(pie2), "", paste("-",pie2, sep = "")),
ifelse(is.null(pie3), "", paste("-", pie3, sep = ""))))
p1 <- p + coord_polar(theta = "y")
print(p1)
# Save the plot as a PDF
pdf(sprintf("%s/pie.%s.%s%s.pdf", out_path,
project,
ifelse(is.null(name), "", paste(name, ".", sep = "")),
format(Sys.Date(), "%y%m%d")), height = height, width = width)
print(p)
print(p1)
dev.off()
Go_piePlot <- function(df,
project,
pie1,
pie2 = NULL,
pie3 = NULL,
orders,
mycols = NULL,
name = NULL,
height,
width) {
# Close any open graphic devices to start fresh
if(!is.null(dev.list())) dev.off()
# Setup output directory
out_dir_base <- sprintf("%s_%s", project, format(Sys.Date(), "%y%m%d"))
if(!file.exists(out_dir_base)) dir.create(out_dir_base)
out_dir_pdf <- file.path(out_dir_base, "pdf")
if(!file.exists(out_dir_pdf)) dir.create(out_dir_pdf)
if (class(name) == "function"){
name <- NULL
}
tt <- try(mycols,T)
if(class(tt) == "try-error"){
print("mycols is not defined.")
mycols <- NULL
}
tt <- try(orders,T)
if(class(tt) == "try-error"){
print("orders is not defined.")
orders <- NULL
}
# Initialize an empty list for storing data frames
dfs <- list()
# Define a vector of pie parameters
pies <- c(pie1, pie2, pie3)
# Loop through the pie parameters to create and store data frames
for(pie in pies) {
if(!is.null(pie)) {
df_temp <- as.data.frame(table(df[[pie]]))
names(df_temp) <- c("Category", "Count") # Standardize column names
df_temp$type <- pie
dfs[[length(dfs) + 1]] <- df_temp # Append to the list
}
}
# Combine all data frames in the list
combined <- do.call(rbind, dfs)
# Check orders
if (!is.null(orders)){
combined$Category <- factor(combined$Category, levels = orders)
}else{
combined$Category <- factor(combined$Category)
}
combined$type <- factor(combined$type, levels = pies[!sapply(pies, is.null)])
combined_aggregated <- combined %>%
group_by(type, Category) %>% # Grouping by both type and Category might be needed based on your hierarchy.
summarise(val = sum(Count), .groups = 'drop') # Explicitly drop grouping
# Calculate the total values for each type and the percentage
combined_aggregated <- combined_aggregated %>%
group_by(type) %>%
mutate(Total = sum(val), # Calculate total for each type
Percentage = (val / Total) * 100) %>% # Calculate percentage
ungroup() # Remove the grouping
combined_aggregated$Label <- paste0(combined_aggregated$Category, " (", round(combined_aggregated$Percentage, 1), "%)")
p <- ggplot(combined_aggregated, aes(x = type, y = val, fill = Category)) +
geom_bar(stat = "identity", position = "fill") +   theme_minimal() +
geom_text(aes(label = Label), position = position_fill(vjust = 0.5), size = 3, color = "black")
if(!is.null(mycols)){
p <- p + scale_color_manual(values = mycols)
}else{
p <- p
}
# Add title and subtitles if they are not NULL
p <- p + labs(title = sprintf("Distribution of %s", pie1,
ifelse(is.null(pie2), "", paste("-",pie2, sep = "")),
ifelse(is.null(pie3), "", paste("-", pie3, sep = ""))))
p1 <- p + coord_polar(theta = "y")
print(p1)
# Save the plot as a PDF
pdf(sprintf("%s/pie.%s.%s%s.pdf", out_path,
project,
ifelse(is.null(name), "", paste(name, ".", sep = "")),
format(Sys.Date(), "%y%m%d")), height = height, width = width)
print(p)
print(p1)
dev.off()
}
Go_piePlot(adiv, project, pie1 = "hpvres", pie2 = "CIND",pie3="HPV_CIND", orders= ,name = NULL,mycols = pie.col,height = 5, width = 5)
pie.col
orders <- c("neg", "pos",  "CIN1","CIN2+","HPV+CIN2+", "HPV-CIN1",  "HPV+CIN1")
pie.col <- c("#EB5291FF", "#FBBB68FF", "#F5BACFFF", "#9DDAF5FF", "#6351A0FF", "#ECF1F4FF", "#FEF79EFF", "#1794CEFF", "#972C8DFF", "#972C8DFF", "#009E73", "#0000FF")
Go_piePlot(adiv, project, pie1 = "hpvres", pie2 = "CIND",pie3="HPV_CIND", orders= ,name = NULL,mycols = pie.col,height = 5, width = 5)
Go_piePlot(adiv, project, pie1 = "hpvres", pie2 = "CIND",pie3="HPV_CIND", orders= orders,name = NULL,mycols = pie.col,height = 5, width = 5)
mycols
mycols
!is.null(mycols)
mycols
orders <- c("neg", "pos",  "CIN1","CIN2+","HPV+CIN2+", "HPV-CIN1",  "HPV+CIN1")
pie.col <- c("#EB5291FF", "#FBBB68FF", "#F5BACFFF", "#9DDAF5FF", "#6351A0FF", "#ECF1F4FF", "#FEF79EFF", "#1794CEFF", "#972C8DFF", "#972C8DFF", "#009E73", "#0000FF")
Go_piePlot(adiv, project, pie1 = "hpvres", pie2 = "CIND",pie3="HPV_CIND", orders= orders,name = NULL, mycols = pie.col, height = 5, width = 5)
orders <- c("neg", "pos",  "CIN1","CIN2+","HPV-CIN1",  "HPV+CIN1","HPV+CIN2+")
pie.col <- c("#EB5291FF", "#FBBB68FF", "#F5BACFFF", "#9DDAF5FF", "#6351A0FF", "#ECF1F4FF", "#FEF79EFF", "#1794CEFF", "#972C8DFF", "#972C8DFF", "#009E73", "#0000FF")
Go_piePlot(adiv, project, pie1 = "hpvres", pie2 = "CIND",pie3="HPV_CIND", orders= orders,name = NULL, mycols = pie.col, height = 5, width = 5)
Go_piePlot(adiv, project, pie1 = "hpvres", pie2 = "CIND",pie3="HPV_CIND", orders= orders,name = NULL, mycols = , height = 5, width = 5)
Go_piePlot(adiv, project, pie1 = "hpvres", pie2 = "CIND",pie3="HPV_CIND", orders= orders,name = NULL, mycols = NULL, height = 5, width = 5)
df=adiv
project
pie1 = "hpvres"
pie2 = "CIND"
pie3="HPV_CIND"
orders= orders
name = NULL
mycols = pie.col
height = 5
width = 5
mycols
# Close any open graphic devices to start fresh
if(!is.null(dev.list())) dev.off()
# Setup output directory
out_dir_base <- sprintf("%s_%s", project, format(Sys.Date(), "%y%m%d"))
if(!file.exists(out_dir_base)) dir.create(out_dir_base)
out_dir_pdf <- file.path(out_dir_base, "pdf")
if(!file.exists(out_dir_pdf)) dir.create(out_dir_pdf)
if (class(name) == "function"){
name <- NULL
}
tt <- try(mycols,T)
if(class(tt) == "try-error"){
print("mycols is not defined.")
mycols <- NULL
}
tt <- try(orders,T)
if(class(tt) == "try-error"){
print("orders is not defined.")
orders <- NULL
}
# Initialize an empty list for storing data frames
dfs <- list()
# Define a vector of pie parameters
pies <- c(pie1, pie2, pie3)
# Loop through the pie parameters to create and store data frames
for(pie in pies) {
if(!is.null(pie)) {
df_temp <- as.data.frame(table(df[[pie]]))
names(df_temp) <- c("Category", "Count") # Standardize column names
df_temp$type <- pie
dfs[[length(dfs) + 1]] <- df_temp # Append to the list
}
}
# Combine all data frames in the list
combined <- do.call(rbind, dfs)
# Check orders
if (!is.null(orders)){
combined$Category <- factor(combined$Category, levels = orders)
}else{
combined$Category <- factor(combined$Category)
}
combined$type <- factor(combined$type, levels = pies[!sapply(pies, is.null)])
combined_aggregated <- combined %>%
group_by(type, Category) %>% # Grouping by both type and Category might be needed based on your hierarchy.
summarise(val = sum(Count), .groups = 'drop') # Explicitly drop grouping
# Calculate the total values for each type and the percentage
combined_aggregated <- combined_aggregated %>%
group_by(type) %>%
mutate(Total = sum(val), # Calculate total for each type
Percentage = (val / Total) * 100) %>% # Calculate percentage
ungroup() # Remove the grouping
combined_aggregated$Label <- paste0(combined_aggregated$Category, " (", round(combined_aggregated$Percentage, 1), "%)")
p <- ggplot(combined_aggregated, aes(x = type, y = val, fill = Category)) +
geom_bar(stat = "identity", position = "fill") +   theme_minimal() +
geom_text(aes(label = Label), position = position_fill(vjust = 0.5), size = 3, color = "black")
if(!is.null(mycols)){
p <- p + scale_color_manual(values = mycols)
}else{
p <- p
}
# Add title and subtitles if they are not NULL
p <- p + labs(title = sprintf("Distribution of %s", pie1,
ifelse(is.null(pie2), "", paste("-",pie2, sep = "")),
ifelse(is.null(pie3), "", paste("-", pie3, sep = ""))))
p1 <- p + coord_polar(theta = "y")
print(p1)
!is.null(mycols)
p <- p + scale_color_manual(values = mycols)
p
if(!is.null(mycols)){
p <- p + scale_fill_manual(values = mycols)
}else{
p <- p
}
# Add title and subtitles if they are not NULL
p <- p + labs(title = sprintf("Distribution of %s", pie1,
ifelse(is.null(pie2), "", paste("-",pie2, sep = "")),
ifelse(is.null(pie3), "", paste("-", pie3, sep = ""))))
p1 <- p + coord_polar(theta = "y")
print(p1)
# Save the plot as a PDF
pdf(sprintf("%s/pie.%s.%s%s.pdf", out_path,
project,
ifelse(is.null(name), "", paste(name, ".", sep = "")),
format(Sys.Date(), "%y%m%d")), height = height, width = width)
print(p)
print(p1)
dev.off()
Go_piePlot <- function(df,
project,
pie1,
pie2 = NULL,
pie3 = NULL,
orders,
mycols = NULL,
name = NULL,
height,
width) {
# Close any open graphic devices to start fresh
if(!is.null(dev.list())) dev.off()
# Setup output directory
out_dir_base <- sprintf("%s_%s", project, format(Sys.Date(), "%y%m%d"))
if(!file.exists(out_dir_base)) dir.create(out_dir_base)
out_dir_pdf <- file.path(out_dir_base, "pdf")
if(!file.exists(out_dir_pdf)) dir.create(out_dir_pdf)
if (class(name) == "function"){
name <- NULL
}
tt <- try(mycols,T)
if(class(tt) == "try-error"){
print("mycols is not defined.")
mycols <- NULL
}
tt <- try(orders,T)
if(class(tt) == "try-error"){
print("orders is not defined.")
orders <- NULL
}
# Initialize an empty list for storing data frames
dfs <- list()
# Define a vector of pie parameters
pies <- c(pie1, pie2, pie3)
# Loop through the pie parameters to create and store data frames
for(pie in pies) {
if(!is.null(pie)) {
df_temp <- as.data.frame(table(df[[pie]]))
names(df_temp) <- c("Category", "Count") # Standardize column names
df_temp$type <- pie
dfs[[length(dfs) + 1]] <- df_temp # Append to the list
}
}
# Combine all data frames in the list
combined <- do.call(rbind, dfs)
# Check orders
if (!is.null(orders)){
combined$Category <- factor(combined$Category, levels = orders)
}else{
combined$Category <- factor(combined$Category)
}
combined$type <- factor(combined$type, levels = pies[!sapply(pies, is.null)])
combined_aggregated <- combined %>%
group_by(type, Category) %>% # Grouping by both type and Category might be needed based on your hierarchy.
summarise(val = sum(Count), .groups = 'drop') # Explicitly drop grouping
# Calculate the total values for each type and the percentage
combined_aggregated <- combined_aggregated %>%
group_by(type) %>%
mutate(Total = sum(val), # Calculate total for each type
Percentage = (val / Total) * 100) %>% # Calculate percentage
ungroup() # Remove the grouping
combined_aggregated$Label <- paste0(combined_aggregated$Category, " (", round(combined_aggregated$Percentage, 1), "%)")
p <- ggplot(combined_aggregated, aes(x = type, y = val, fill = Category)) +
geom_bar(stat = "identity", position = "fill") +   theme_minimal() +
geom_text(aes(label = Label), position = position_fill(vjust = 0.5), size = 3, color = "black")
if(!is.null(mycols)){
p <- p + scale_fill_manual(values = mycols)
}else{
p <- p
}
# Add title and subtitles if they are not NULL
p <- p + labs(title = sprintf("Distribution of %s", pie1,
ifelse(is.null(pie2), "", paste("-",pie2, sep = "")),
ifelse(is.null(pie3), "", paste("-", pie3, sep = ""))))
p1 <- p + coord_polar(theta = "y")
print(p1)
# Save the plot as a PDF
pdf(sprintf("%s/pie.%s.%s%s.pdf", out_path,
project,
ifelse(is.null(name), "", paste(name, ".", sep = "")),
format(Sys.Date(), "%y%m%d")), height = height, width = width)
print(p)
print(p1)
dev.off()
}
orders <- c("neg", "pos",  "CIN1","CIN2+","HPV-CIN1",  "HPV+CIN1","HPV+CIN2+")
pie.col <- c("#EB5291FF", "#FBBB68FF", "#F5BACFFF", "#9DDAF5FF", "#6351A0FF", "#ECF1F4FF", "#FEF79EFF", "#1794CEFF", "#972C8DFF", "#972C8DFF", "#009E73", "#0000FF")
Go_piePlot(adiv, project, pie1 = "hpvres", pie2 = "CIND",pie3="HPV_CIND", orders= orders,name = NULL, mycols = NULL, height = 5, width = 5)
Go_piePlot <- function(df,
project,
pie1,
pie2 = NULL,
pie3 = NULL,
orders,
mycols = NULL,
name = NULL,
height,
width) {
# Close any open graphic devices to start fresh
if(!is.null(dev.list())) dev.off()
# Setup output directory
out_dir_base <- sprintf("%s_%s", project, format(Sys.Date(), "%y%m%d"))
if(!file.exists(out_dir_base)) dir.create(out_dir_base)
out_dir_pdf <- file.path(out_dir_base, "pdf")
if(!file.exists(out_dir_pdf)) dir.create(out_dir_pdf)
if (class(name) == "function"){
name <- NULL
}
tt <- try(mycols,T)
if(class(tt) == "try-error"){
print("mycols is not defined.")
mycols <- NULL
}
tt <- try(orders,T)
if(class(tt) == "try-error"){
print("orders is not defined.")
orders <- NULL
}
# Initialize an empty list for storing data frames
dfs <- list()
# Define a vector of pie parameters
pies <- c(pie1, pie2, pie3)
# Loop through the pie parameters to create and store data frames
for(pie in pies) {
if(!is.null(pie)) {
df_temp <- as.data.frame(table(df[[pie]]))
names(df_temp) <- c("Category", "Count") # Standardize column names
df_temp$type <- pie
dfs[[length(dfs) + 1]] <- df_temp # Append to the list
}
}
# Combine all data frames in the list
combined <- do.call(rbind, dfs)
# Check orders
if (!is.null(orders)){
combined$Category <- factor(combined$Category, levels = orders)
}else{
combined$Category <- factor(combined$Category)
}
combined$type <- factor(combined$type, levels = pies[!sapply(pies, is.null)])
combined_aggregated <- combined %>%
group_by(type, Category) %>% # Grouping by both type and Category might be needed based on your hierarchy.
summarise(val = sum(Count), .groups = 'drop') # Explicitly drop grouping
# Calculate the total values for each type and the percentage
combined_aggregated <- combined_aggregated %>%
group_by(type) %>%
mutate(Total = sum(val), # Calculate total for each type
Percentage = (val / Total) * 100) %>% # Calculate percentage
ungroup() # Remove the grouping
combined_aggregated$Label <- paste0(combined_aggregated$Category, " (", round(combined_aggregated$Percentage, 1), "%)")
p <- ggplot(combined_aggregated, aes(x = type, y = val, fill = Category)) +
geom_bar(stat = "identity", position = "fill") +   theme_minimal() +
geom_text(aes(label = Label), position = position_fill(vjust = 0.5), size = 3, color = "black")
if(!is.null(mycols)){
p <- p + scale_fill_manual(values = mycols)
}else{
p <- p
}
# Add title and subtitles if they are not NULL
p <- p + labs(title = sprintf("Distribution of %s", pie1,
ifelse(is.null(pie2), "", paste("-",pie2, sep = "")),
ifelse(is.null(pie3), "", paste("-", pie3, sep = ""))))
p1 <- p + coord_polar(theta = "y")
print(p1)
# Save the plot as a PDF
pdf(sprintf("%s/pie.%s.%s%s.pdf", out_path,
project,
ifelse(is.null(name), "", paste(name, ".", sep = "")),
format(Sys.Date(), "%y%m%d")), height = height, width = width)
print(p)
print(p1)
dev.off()
}
Go_piePlot(adiv, project, pie1 = "hpvres", pie2 = "CIND",pie3="HPV_CIND", orders= orders,name = NULL, mycols = NULL, height = 5, width = 5)
pie.col <- c("#EB5291FF", "#FBBB68FF", "#F5BACFFF", "#9DDAF5FF", "#6351A0FF", "#ECF1F4FF", "#FEF79EFF", "#1794CEFF", "#972C8DFF", "#972C8DFF", "#009E73", "#0000FF")
Go_piePlot(adiv, project, pie1 = "hpvres", pie2 = "CIND",pie3="HPV_CIND", orders= orders,name = NULL, mycols = pie.col, height = 5, width = 5)
Go_piePlot(adiv, project, pie1 = "CST1", pie2 = "subCST",pie3=NULL, orders= orders,name = "CSTs", mycols = pie.col, height = 5, width = 5)
orders <- c("I", "I-A", "I-B","II", "III","III-A", "III-B", "IV", "IV-A",  "IV-B","IV-C0","IV-C",  "V")
Go_piePlot(adiv, project, pie1 = "CST1", pie2 = "subCST",pie3=NULL, orders= orders,name = "CSTs", mycols = pie.col, height = 5, width = 5)
Go_piePlot(adiv, project, pie1 = "CST1", pie2 = "subCST",pie3=NULL, orders= orders,name = "CSTs", mycols = pie.col, height = 5, width = 5)
orders <- c("neg", "pos",  "CIN1","CIN2+","HPV-CIN1",  "HPV+CIN1","HPV+CIN2+")
pie.col <- c("#EB5291FF", "#FBBB68FF", "#F5BACFFF", "#9DDAF5FF", "#6351A0FF", "#ECF1F4FF", "#FEF79EFF", "#1794CEFF", "#972C8DFF", "#972C8DFF", "#009E73", "#0000FF")
Go_piePlot(adiv, project, pie1 = "hpvres", pie2 = "CIND",pie3="HPV_CIND", orders= orders,name = NULL, mycols = pie.col, height = 5, width = 5)
for (hiv in c("neg","pos")){
adiv.sel <- subset(adiv, hivstatus == hiv)
Go_piePlot(adiv, project, pie1 = "hpvres", pie2 = "CIND",pie3="HPV_CIND", orders= orders,name = sprintf("HIV%s",hiv), mycols = pie.col, height = 5, width = 5)
}
for (hiv in c("neg","pos")){
adiv.sel <- subset(adiv, hivstatus == hiv)
Go_piePlot(adiv.sel, project, pie1 = "hpvres", pie2 = "CIND",pie3="HPV_CIND", orders= orders,name = sprintf("HIV%s",hiv), mycols = pie.col, height = 5, width = 5)
}
devtools::build()
# build package
setwd("~/Dropbox/04_Scripts/R_source/Gotools")
devtools::build()
devtools::document()

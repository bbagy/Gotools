col.pcr1$ENV
col.pcr1 <- Go_indexmatch(project = "FB", to=col.pcr, from= stool.book, matchByTo = "Sample",matchByFrom = "Sample",
columns = columns,name = "col.pcr")
# Create new columns in col.pcr for the first and second parts
col.pcr1$Sample1 <- sapply(split_samples, function(x) x[1])  # Access the first part
col.pcr1$ENV <- sapply(split_samples, function(x) ifelse(length(x) > 1, x[2], NA))  # Access the second part, add NA if not present
col.pcr1$ENV
col.pcr1$Sample1
#==============================================================================#
#==== merge Colony PCR data
#==============================================================================#
curretwd <- "~/cumc.columbia.edu/Uhlemann Lab - Microbiome Core/1_Projects/MAPS_FB_Inu/2_Analysis/Colony_PCR/"
setwd(sprintf("%s",curretwd))
stool.book <- read.csv("Fredberg Inulin Study Master Log_Final.csv",row.names=NULL,check.names=FALSE);head(stool.book)
col.pcr <- read.csv("Freedberg Inulin Isolates Sequenced.csv",row.names=NULL,check.names=F);head(col.pcr)
sampledata <- read.csv("240223.FB_overall.mapping.csv",row.names=1,check.names=F);head(sampledata)
rownames(sampledata)
#===== clean sample names
col.pcr$Sample1 <- col.pcr$Sample
col.pcr$Sample1 <- gsub("IN ","",col.pcr$Sample1)
col.pcr$KB <- gsub(", ","_",col.pcr$KB)
#===== Index match
matched_indices <- match(col.pcr$Sample, stool.book$Sample)
columns <- c("CCFA", "VRE", "MRSA", "KPC", "ESBL")
for(column in columns) {
col.pcr[, column] <- stool.book[,column][matched_indices]
}
col.pcr1 <- Go_indexmatch(project = "FB", to=col.pcr, from= stool.book, matchByTo = "Sample",matchByFrom = "Sample",
columns = columns,name = "col.pcr")
Stool.book <- Go_indexmatch(project = "FB", to=stool.book, from= col.pcr, matchByTo = "Sample",matchByFrom = "Sample",
columns = "Species", name = "Stool.book")
# Assuming split_samples is a list of vectors where each vector is the result of splitting one of the strings in col.pcr$Sample1
split_samples <- strsplit(col.pcr1$Sample1, " ")
# Create new columns in col.pcr for the first and second parts
col.pcr1$Sample1 <- sapply(split_samples, function(x) x[1])  # Access the first part
col.pcr1$ENV <- sapply(split_samples, function(x) ifelse(length(x) > 1, x[2], NA))  # Access the second part, add NA if not present
col.pcr1$ENV
# == add .D
col.pcr1$Sample1 <- gsub("[.]", ".D", col.pcr1$Sample1)
head(col.pcr1$Sample2)
col.pcr1$Sample2 <- sapply(col.pcr1$Sample1, function(x) {
# Split the string based on "D" to handle the previously made change
parts <- unlist(strsplit(x, split=".D", fixed=TRUE))
# Extract the numeric and alphabetic parts from the first segment
num_part <- as.numeric(sub("[A-Za-z]+.*$", "", parts[1]))  # Extract numeric part
alpha_part <- gsub("^[0-9]+", "", parts[1])  # Extract alphabetic part
# Add 1000 to the numeric part to ensure a '100' prefix
new_num_part <- num_part + 1000
# Reconstruct the string with the updated numeric part and ".D" inserted correctly
result <- paste0(new_num_part, alpha_part, ".D", parts[2])
return(result)
})
col.pcr1$Sample2 <- gsub("[.]","-",col.pcr1$Sample2)
col.pcr1.sel <- subset(col.pcr1, ENV != "E")
Go_indexmatch(project, to=col.pcr1, from=sampledata, matchByTo = "Sample2", matchByFrom = "rownames",
columns = "StudyID",name="col.pcr1")
Go_indexmatch(project, to=col.pcr1.sel, from=sampledata, matchByTo = "Sample2", matchByFrom = "rownames",
columns = "StudyID",name="col.pcr1")
Go_indexmatch(project, to=sampledata, from=col.pcr1.sel, matchByTo = "rownames", matchByFrom = "Sample2",
columns = "Species",name="sampledata")
#==============================================================================#
#==== merge Colony PCR data
#==============================================================================#
curretwd <- "~/cumc.columbia.edu/Uhlemann Lab - Microbiome Core/1_Projects/MAPS_FB_Inu/2_Analysis/Colony_PCR/"
setwd(sprintf("%s",curretwd))
stool.book <- read.csv("Fredberg Inulin Study Master Log_Final.csv",row.names=NULL,check.names=FALSE);head(stool.book)
col.pcr <- read.csv("Freedberg Inulin Isolates Sequenced.csv",row.names=NULL,check.names=F);head(col.pcr)
sampledata <- read.csv("240223.FB_overall.mapping.csv",row.names=1,check.names=F);head(sampledata)
rownames(sampledata)
#=== Sample sheet with stool
curretwd <- "~/cumc.columbia.edu/Uhlemann Lab - Microbiome Core/1_Projects/MAPS_FB_Inu/2_Analysis/Colony_PCR/"
setwd(sprintf("%s",curretwd))
stool.book <- read.csv("Fredberg Inulin Study Master Log_Final.csv",row.names=NULL,check.names=FALSE);head(stool.book)
stool.book$Sample <- gsub("IN ","",col.pcr$Sample1)
stool.book$Sample <- gsub("IN ","", stool.book$Sample)
stool.book$Sample <- gsub("[.]", ".D", stool.book$Sample)
stool.book$Sample <- gsub("IN ","", stool.book$Sample)
stool.book$Sample <- gsub("[.]", ".D", stool.book$Sample)
stool.book$Sample <- sapply(stool.book$Sample, function(x) {
# Split the string based on "D" to handle the previously made change
parts <- unlist(strsplit(x, split=".D", fixed=TRUE))
# Extract the numeric and alphabetic parts from the first segment
num_part <- as.numeric(sub("[A-Za-z]+.*$", "", parts[1]))  # Extract numeric part
alpha_part <- gsub("^[0-9]+", "", parts[1])  # Extract alphabetic part
# Add 1000 to the numeric part to ensure a '100' prefix
new_num_part <- num_part + 1000
# Reconstruct the string with the updated numeric part and ".D" inserted correctly
result <- paste0(new_num_part, alpha_part, ".D", parts[2])
return(result)
})
head(stool.book$Sample)
#=== Sample sheet with stool
curretwd <- "~/cumc.columbia.edu/Uhlemann Lab - Microbiome Core/1_Projects/MAPS_FB_Inu/2_Analysis/Colony_PCR/"
setwd(sprintf("%s",curretwd))
stool.book <- read.csv("Fredberg Inulin Study Master Log_Final.csv",row.names=NULL,check.names=FALSE);head(stool.book)
col.pcr <- read.csv("Freedberg Inulin Isolates Sequenced.csv",row.names=NULL,check.names=F);head(col.pcr)
sampledata <- read.csv("240223.FB_overall.mapping.csv",row.names=1,check.names=F);head(sampledata)
stool.book$Sample <- gsub("IN ","", stool.book$Sample)
stool.book$Sample <- gsub("[.]", ".D", stool.book$Sample)
stool.book$Sample <- sapply(stool.book$Sample, function(x) {
# Split the string based on "D" to handle the previously made change
parts <- unlist(strsplit(x, split=".D", fixed=TRUE))
# Extract the numeric and alphabetic parts from the first segment
num_part <- as.numeric(sub("[A-Za-z]+.*$", "", parts[1]))  # Extract numeric part
alpha_part <- gsub("^[0-9]+", "", parts[1])  # Extract alphabetic part
# Add 1000 to the numeric part to ensure a '100' prefix
new_num_part <- num_part + 1000
# Reconstruct the string with the updated numeric part and ".D" inserted correctly
result <- paste0(new_num_part, alpha_part, ".D", parts[2])
return(result)
})
head(stool.book$Sample)
stool.book <- read.csv("Fredberg Inulin Study Master Log_Final.csv",row.names=NULL,check.names=FALSE);head(stool.book)
stool.book$Sample
split_samples <- strsplit(stool.book$Sample , " ")
split_samples
stool.book$Sample <- gsub("IN ","", stool.book$Sample)
split_samples <- strsplit(stool.book$Sample , " ")
split_samples
# Create new columns in col.pcr for the first and second parts
stool.book$Sample1 <- sapply(split_samples, function(x) x[1])  # Access the first part
stool.book$ENV <- sapply(split_samples, function(x) ifelse(length(x) > 1, x[2], NA))  # Access the second part, add NA if not present
head(stool.book)
stool.book$Sample <- sapply(stool.book$Sample, function(x) {
# Split the string based on "D" to handle the previously made change
parts <- unlist(strsplit(x, split=".D", fixed=TRUE))
# Extract the numeric and alphabetic parts from the first segment
num_part <- as.numeric(sub("[A-Za-z]+.*$", "", parts[1]))  # Extract numeric part
alpha_part <- gsub("^[0-9]+", "", parts[1])  # Extract alphabetic part
# Add 1000 to the numeric part to ensure a '100' prefix
new_num_part <- num_part + 1000
# Reconstruct the string with the updated numeric part and ".D" inserted correctly
result <- paste0(new_num_part, alpha_part, ".D", parts[2])
return(result)
})
head(stool.book$Sample)
#=== Sample sheet with stool
curretwd <- "~/cumc.columbia.edu/Uhlemann Lab - Microbiome Core/1_Projects/MAPS_FB_Inu/2_Analysis/Colony_PCR/"
setwd(sprintf("%s",curretwd))
stool.book <- read.csv("Fredberg Inulin Study Master Log_Final.csv",row.names=NULL,check.names=FALSE);head(stool.book)
col.pcr <- read.csv("Freedberg Inulin Isolates Sequenced.csv",row.names=NULL,check.names=F);head(col.pcr)
sampledata <- read.csv("240223.FB_overall.mapping.csv",row.names=1,check.names=F);head(sampledata)
stool.book$Sample <- gsub("IN ","", stool.book$Sample)
split_samples <- strsplit(stool.book$Sample , " ")
# Create new columns in col.pcr for the first and second parts
stool.book$Sample1 <- sapply(split_samples, function(x) x[1])  # Access the first part
stool.book$ENV <- sapply(split_samples, function(x) ifelse(length(x) > 1, x[2], NA))  # Access the second part, add NA if not present
head(stool.book)
stool.book$Sample <- gsub("[.]", "_D", stool.book$Sample)
stool.book$Sample <- sapply(stool.book$Sample, function(x) {
# Split the string based on "D" to handle the previously made change
parts <- unlist(strsplit(x, split=".D", fixed=TRUE))
# Extract the numeric and alphabetic parts from the first segment
num_part <- as.numeric(sub("[A-Za-z]+.*$", "", parts[1]))  # Extract numeric part
alpha_part <- gsub("^[0-9]+", "", parts[1])  # Extract alphabetic part
# Add 1000 to the numeric part to ensure a '100' prefix
new_num_part <- num_part + 1000
# Reconstruct the string with the updated numeric part and ".D" inserted correctly
result <- paste0(new_num_part, alpha_part, ".D", parts[2])
return(result)
})
head(stool.book$Sample)
stool.book$Sample <- sapply(stool.book$Sample, function(x) {
# Split the string based on "D" to handle the previously made change
parts <- unlist(strsplit(x, split=".D", fixed=TRUE))
# Extract the numeric and alphabetic parts from the first segment
num_part <- as.numeric(sub("[A-Za-z]+.*$", "", parts[1]))  # Extract numeric part
alpha_part <- gsub("^[0-9]+", "", parts[1])  # Extract alphabetic part
# Add 1000 to the numeric part to ensure a '100' prefix
new_num_part <- num_part + 1000
# Reconstruct the string with the updated numeric part and ".D" inserted correctly
result <- paste0(new_num_part, alpha_part, parts[2])
return(result)
})
head(stool.book$Sample)
#=== Sample sheet with stool
curretwd <- "~/cumc.columbia.edu/Uhlemann Lab - Microbiome Core/1_Projects/MAPS_FB_Inu/2_Analysis/Colony_PCR/"
setwd(sprintf("%s",curretwd))
stool.book <- read.csv("Fredberg Inulin Study Master Log_Final.csv",row.names=NULL,check.names=FALSE);head(stool.book)
col.pcr <- read.csv("Freedberg Inulin Isolates Sequenced.csv",row.names=NULL,check.names=F);head(col.pcr)
sampledata <- read.csv("240223.FB_overall.mapping.csv",row.names=1,check.names=F);head(sampledata)
stool.book$Sample <- gsub("IN ","", stool.book$Sample)
split_samples <- strsplit(stool.book$Sample , " ")
# Create new columns in col.pcr for the first and second parts
stool.book$Sample1 <- sapply(split_samples, function(x) x[1])  # Access the first part
stool.book$ENV <- sapply(split_samples, function(x) ifelse(length(x) > 1, x[2], NA))  # Access the second part, add NA if not present
head(stool.book)
stool.book$Sample <- gsub("[.]", "_D", stool.book$Sample)
stool.book$Sample <- sapply(stool.book$Sample, function(x) {
# Split the string based on "D" to handle the previously made change
parts <- unlist(strsplit(x, split=".D", fixed=TRUE))
# Extract the numeric and alphabetic parts from the first segment
num_part <- as.numeric(sub("[A-Za-z]+.*$", "", parts[1]))  # Extract numeric part
alpha_part <- gsub("^[0-9]+", "", parts[1])  # Extract alphabetic part
# Add 1000 to the numeric part to ensure a '100' prefix
new_num_part <- num_part + 1000
# Reconstruct the string with the updated numeric part and ".D" inserted correctly
result <- paste0(new_num_part, alpha_part, parts[2])
return(result)
})
head(stool.book$Sample)
#=== Sample sheet with stool
curretwd <- "~/cumc.columbia.edu/Uhlemann Lab - Microbiome Core/1_Projects/MAPS_FB_Inu/2_Analysis/Colony_PCR/"
setwd(sprintf("%s",curretwd))
stool.book <- read.csv("Fredberg Inulin Study Master Log_Final.csv",row.names=NULL,check.names=FALSE);head(stool.book)
col.pcr <- read.csv("Freedberg Inulin Isolates Sequenced.csv",row.names=NULL,check.names=F);head(col.pcr)
sampledata <- read.csv("240223.FB_overall.mapping.csv",row.names=1,check.names=F);head(sampledata)
stool.book$Sample <- gsub("IN ","", stool.book$Sample)
split_samples <- strsplit(stool.book$Sample , " ")
# Create new columns in col.pcr for the first and second parts
stool.book$Sample1 <- sapply(split_samples, function(x) x[1])  # Access the first part
stool.book$ENV <- sapply(split_samples, function(x) ifelse(length(x) > 1, x[2], NA))  # Access the second part, add NA if not present
head(stool.book)
stool.book$Sample <- gsub("[.]", "_D", stool.book$Sample)
stool.book$Sample <- sapply(stool.book$Sample, function(x) {
# Split the string based on "D" to handle the previously made change
parts <- unlist(strsplit(x, split=".D", fixed=TRUE))
# Extract the numeric and alphabetic parts from the first segment
num_part <- as.numeric(sub("[A-Za-z]+.*$", "", parts[1]))  # Extract numeric part
alpha_part <- gsub("^[0-9]+", "", parts[1])  # Extract alphabetic part
# Add 1000 to the numeric part to ensure a '100' prefix
new_num_part <- num_part + 1000
# Reconstruct the string with the updated numeric part and ".D" inserted correctly
result <- paste0(new_num_part, alpha_part)
return(result)
})
head(stool.book$Sample)
stool.book
rownames(sampledata)
stool.book$Sample <- gsub("[.]", "-D", stool.book$Sample)
#=== Sample sheet with stool
curretwd <- "~/cumc.columbia.edu/Uhlemann Lab - Microbiome Core/1_Projects/MAPS_FB_Inu/2_Analysis/Colony_PCR/"
setwd(sprintf("%s",curretwd))
stool.book <- read.csv("Fredberg Inulin Study Master Log_Final.csv",row.names=NULL,check.names=FALSE);head(stool.book)
sampledata <- read.csv("240223.FB_overall.mapping.csv",row.names=1,check.names=F);head(sampledata)
stool.book$Sample <- gsub("IN ","", stool.book$Sample)
split_samples <- strsplit(stool.book$Sample , " ")
# Create new columns in col.pcr for the first and second parts
stool.book$Sample1 <- sapply(split_samples, function(x) x[1])  # Access the first part
stool.book$ENV <- sapply(split_samples, function(x) ifelse(length(x) > 1, x[2], NA))  # Access the second part, add NA if not present
head(stool.book)
stool.book$Sample <- gsub("[.]", "-D", stool.book$Sample)
stool.book$Sample <- sapply(stool.book$Sample, function(x) {
# Split the string based on "D" to handle the previously made change
parts <- unlist(strsplit(x, split=".D", fixed=TRUE))
# Extract the numeric and alphabetic parts from the first segment
num_part <- as.numeric(sub("[A-Za-z]+.*$", "", parts[1]))  # Extract numeric part
alpha_part <- gsub("^[0-9]+", "", parts[1])  # Extract alphabetic part
# Add 1000 to the numeric part to ensure a '100' prefix
new_num_part <- num_part + 1000
# Reconstruct the string with the updated numeric part and ".D" inserted correctly
result <- paste0(new_num_part, alpha_part)
return(result)
})
head(stool.book$Sample)
rownames(sampledata)
Go_indexmatch(project, to=stool.book, from=sampledata, matchByTo = "Sample", matchByFrom = "rownames",
columns = "StudyID",name="stool.book")
stool.book
Go_indexmatch(project, to=sampledata, from=stool.book, matchByTo = "rownames", matchByFrom = "Sample",
columns = c("CCFA", "VRE", "MRSA", "KPC", "ESBL"),name="sampledata")
Go_indexmatch(project, to=stool.book, from=sampledata, matchByTo = "Sample", matchByFrom = "rownames",
columns = "StudyID",name="stool.book")
Go_indexmatch(project, to=sampledata, from=stool.book, matchByTo = "rownames", matchByFrom = "Sample",
columns = c("CCFA", "VRE", "MRSA", "KPC", "ESBL"),name="sampledata")
stool.book.sel <- subset(stool.book, ENV !="E")
Go_indexmatch(project, to=stool.book.sel, from=sampledata, matchByTo = "Sample", matchByFrom = "rownames",
columns = "StudyID",name="stool.book")
Go_indexmatch(project, to=sampledata, from=stool.book.sel, matchByTo = "rownames", matchByFrom = "Sample",
columns = c("CCFA", "VRE", "MRSA", "KPC", "ESBL"),name="sampledata")
#=== Sample sheet with stool
curretwd <- "~/cumc.columbia.edu/Uhlemann Lab - Microbiome Core/1_Projects/MAPS_FB_Inu/2_Analysis/Colony_PCR/"
setwd(sprintf("%s",curretwd))
stool.book <- read.csv("Fredberg Inulin Study Master Log_Final.csv",row.names=NULL,check.names=FALSE);head(stool.book)
sampledata <- read.csv("240223.FB_overall.mapping.csv",row.names=1,check.names=F);head(sampledata)
stool.book$Sample <- gsub("IN ","", stool.book$Sample)
split_samples <- strsplit(stool.book$Sample , " ")
# Create new columns in col.pcr for the first and second parts
stool.book$Sample1 <- sapply(split_samples, function(x) x[1])  # Access the first part
stool.book$ENV <- sapply(split_samples, function(x) ifelse(length(x) > 1, x[2], NA))  # Access the second part, add NA if not present
head(stool.book)
stool.book$Sample <- gsub("[.]", "-D", stool.book$Sample)
stool.book$Sample <- sapply(stool.book$Sample, function(x) {
# Split the string based on "D" to handle the previously made change
parts <- unlist(strsplit(x, split=".D", fixed=TRUE))
# Extract the numeric and alphabetic parts from the first segment
num_part <- as.numeric(sub("[A-Za-z]+.*$", "", parts[1]))  # Extract numeric part
alpha_part <- gsub("^[0-9]+", "", parts[1])  # Extract alphabetic part
# Add 1000 to the numeric part to ensure a '100' prefix
new_num_part <- num_part + 1000
# Reconstruct the string with the updated numeric part and ".D" inserted correctly
result <- paste0(new_num_part, alpha_part)
return(result)
})
head(stool.book$Sample)
rownames(sampledata)
stool.book.sel <- subset(stool.book, ENV !="E")
Go_indexmatch(project, to=stool.book.sel, from=sampledata, matchByTo = "Sample", matchByFrom = "rownames",
columns = "StudyID",name="stool.book")
stool.book
stool.book$Sample1 <- gsub("[.]", "-D", stool.book$Sample1)
stool.book$Sample1 <- sapply(stool.book$Sample1, function(x) {
# Split the string based on "D" to handle the previously made change
parts <- unlist(strsplit(x, split=".D", fixed=TRUE))
# Extract the numeric and alphabetic parts from the first segment
num_part <- as.numeric(sub("[A-Za-z]+.*$", "", parts[1]))  # Extract numeric part
alpha_part <- gsub("^[0-9]+", "", parts[1])  # Extract alphabetic part
# Add 1000 to the numeric part to ensure a '100' prefix
new_num_part <- num_part + 1000
# Reconstruct the string with the updated numeric part and ".D" inserted correctly
result <- paste0(new_num_part, alpha_part)
return(result)
})
head(stool.book$Sample1)
rownames(sampledata)
stool.book.sel <- subset(stool.book, ENV !="E")
stool.book.sel <- subset(stool.book, ENV !="E")
Go_indexmatch(project, to=stool.book.sel, from=sampledata, matchByTo = "Sample1", matchByFrom = "rownames",
columns = "StudyID",name="stool.book")
Go_indexmatch(project, to=sampledata, from=stool.book.sel, matchByTo = "rownames", matchByFrom = "Sample1",
columns = c("CCFA", "VRE", "MRSA", "KPC", "ESBL"),name="sampledata")
stool.book <- read.csv("Fredberg Inulin Study Master Log_Final.csv",row.names=NULL,check.names=FALSE);head(stool.book)
stool.book <- read.csv("Fredberg Inulin Study Master Log_Final.csv",row.names=NULL,check.names=FALSE);head(stool.book)
sampledata <- read.csv("240223.FB_overall.mapping.csv",row.names=1,check.names=F);head(sampledata)
head(stool.book)
stool.book$Sample1 <- gsub("[.]", "-D", stool.book$Sample1)
#=== Sample sheet with stool
curretwd <- "~/cumc.columbia.edu/Uhlemann Lab - Microbiome Core/1_Projects/MAPS_FB_Inu/2_Analysis/Colony_PCR/"
setwd(sprintf("%s",curretwd))
stool.book <- read.csv("Fredberg Inulin Study Master Log_Final.csv",row.names=NULL,check.names=FALSE);head(stool.book)
sampledata <- read.csv("240223.FB_overall.mapping.csv",row.names=1,check.names=F);head(sampledata)
head(stool.book)
stool.book$Sample1 <- gsub("[.]", "-D", stool.book$Sample1)
stool.book$Sample1 <- sapply(stool.book$Sample1, function(x) {
# Split the string based on "D" to handle the previously made change
parts <- unlist(strsplit(x, split=".D", fixed=TRUE))
# Extract the numeric and alphabetic parts from the first segment
num_part <- as.numeric(sub("[A-Za-z]+.*$", "", parts[1]))  # Extract numeric part
alpha_part <- gsub("^[0-9]+", "", parts[1])  # Extract alphabetic part
# Add 1000 to the numeric part to ensure a '100' prefix
new_num_part <- num_part + 1000
# Reconstruct the string with the updated numeric part and ".D" inserted correctly
result <- paste0(new_num_part, alpha_part)
return(result)
})
head(stool.book$Sample1)
rownames(sampledata)
stool.book.sel <- subset(stool.book, ENV !="E")
Go_indexmatch(project, to=stool.book.sel, from=sampledata, matchByTo = "Sample1", matchByFrom = "rownames",
columns = "StudyID",name="stool.book")
Go_indexmatch(project, to=sampledata, from=stool.book.sel, matchByTo = "rownames", matchByFrom = "Sample1",
columns = c("CCFA", "VRE", "MRSA", "KPC", "ESBL"),name="sampledata")
#=== Sample sheet with stool
curretwd <- "~/cumc.columbia.edu/Uhlemann Lab - Microbiome Core/1_Projects/MAPS_FB_Inu/2_Analysis/Colony_PCR/"
setwd(sprintf("%s",curretwd))
stool.book <- read.csv("FB Inulin Updated Log.csv",row.names=NULL,check.names=FALSE);head(stool.book)
sampledata <- read.csv("240223.FB_overall.mapping.csv",row.names=1,check.names=F);head(sampledata)
head(stool.book)
stool.book$Sample1 <- gsub("[.]", "-D", stool.book$Sample1)
stool.book$Sample1 <- sapply(stool.book$Sample1, function(x) {
# Split the string based on "D" to handle the previously made change
parts <- unlist(strsplit(x, split=".D", fixed=TRUE))
# Extract the numeric and alphabetic parts from the first segment
num_part <- as.numeric(sub("[A-Za-z]+.*$", "", parts[1]))  # Extract numeric part
alpha_part <- gsub("^[0-9]+", "", parts[1])  # Extract alphabetic part
# Add 1000 to the numeric part to ensure a '100' prefix
new_num_part <- num_part + 1000
# Reconstruct the string with the updated numeric part and ".D" inserted correctly
result <- paste0(new_num_part, alpha_part)
return(result)
})
head(stool.book$Sample1)
rownames(sampledata)
stool.book.sel <- subset(stool.book, ENV !="E")
Go_indexmatch(project, to=stool.book.sel, from=sampledata, matchByTo = "Sample1", matchByFrom = "rownames",
columns = "StudyID",name="stool.book")
Go_indexmatch(project, to=sampledata, from=stool.book.sel, matchByTo = "rownames", matchByFrom = "Sample1",
columns = c("CCFA", "VRE", "MRSA", "KPC", "ESBL"),name="sampledata")
kb <- read.csv("KB_data.csv",row.names=1,check.names=F);head(kb)
#===== for KB data
kb$Sample1 <- gsub("[.]", "-D", kb$Sample1)
kb$Sample1 <- sapply(kb$Sample1, function(x) {
# Split the string based on "D" to handle the previously made change
parts <- unlist(strsplit(x, split=".D", fixed=TRUE))
# Extract the numeric and alphabetic parts from the first segment
num_part <- as.numeric(sub("[A-Za-z]+.*$", "", parts[1]))  # Extract numeric part
alpha_part <- gsub("^[0-9]+", "", parts[1])  # Extract alphabetic part
# Add 1000 to the numeric part to ensure a '100' prefix
new_num_part <- num_part + 1000
# Reconstruct the string with the updated numeric part and ".D" inserted correctly
result <- paste0(new_num_part, alpha_part)
return(result)
})
head(kb$Sample1)
sample.stool.book <- Go_indexmatch(project, to=sampledata, from=stool.book.sel, matchByTo = "rownames", matchByFrom = "Sample1",
columns = c("CCFA", "VRE", "MRSA", "KPC", "ESBL"),name="sampledata")
Go_indexmatch(project, to=sample.stool.book, from=kb, matchByTo = "rownames", matchByFrom = "Sample1",
columns = c("Status"),name="kb")
kb$Status <- gsub(",","_",kb$Status)
Go_indexmatch(project, to=sample.stool.book, from=kb, matchByTo = "rownames", matchByFrom = "Sample1",
columns = c("Status"),name="kb")
kb$Status <- gsub(", ","_",kb$Status)
Go_indexmatch(project, to=sample.stool.book, from=kb, matchByTo = "rownames", matchByFrom = "Sample1",
columns = c("Status"),name="kb")
#===== for KB data
kb <- read.csv("KB_data.csv",row.names=1,check.names=F);head(kb)
kb$Sample1 <- gsub("[.]", "-D", kb$Sample1)
kb$Sample1 <- sapply(kb$Sample1, function(x) {
# Split the string based on "D" to handle the previously made change
parts <- unlist(strsplit(x, split=".D", fixed=TRUE))
# Extract the numeric and alphabetic parts from the first segment
num_part <- as.numeric(sub("[A-Za-z]+.*$", "", parts[1]))  # Extract numeric part
alpha_part <- gsub("^[0-9]+", "", parts[1])  # Extract alphabetic part
# Add 1000 to the numeric part to ensure a '100' prefix
new_num_part <- num_part + 1000
# Reconstruct the string with the updated numeric part and ".D" inserted correctly
result <- paste0(new_num_part, alpha_part)
return(result)
})
head(kb$Sample1)
kb$Status <- gsub(", ","_",kb$Status)
Go_indexmatch(project, to=sample.stool.book, from=kb, matchByTo = "rownames", matchByFrom = "Sample1",
columns = c("Status"),name="kb")
# ----- Input ------#
project<-"WHICAP_merged"
setwd("~/cumc.columbia.edu/Uhlemann Lab - Microbiome Core/1_Projects/MAPS_Pan_WHI/2_Analysis/")
list.files()
# dada2 ps input
ps.20221129 <- readRDS("20221129_16S_WHICAP_dada2/2_rds/ps.20221129_16S_WHICAP.221202.rds");ps.20221129
ps.20230421 <- readRDS("20230421_16S_WHICAP_dada2/2_rds/ps.20230421_16S_WHICAP.230424.rds");ps.20230421
ps.20230512 <- readRDS("20230512_16S_WHICAP_dada2/2_rds/ps.20230512_16S_WHICAP_Plaque.230515.rds");ps.20230512
ps.20230816 <- readRDS("20230816_16S_WHICAP_dada2/2_rds/ps.20230816_16S_WHICAP.230819.rds");ps.20230816
ps.20230327_SV <- readRDS("20230327_16S_WHICAP_Sal_dada2/2_rds/ps.20230327_16S_WHICAP_Sal.230330.rds");ps.20230327_SV
ps.20231106 <- readRDS("20231103_16S_WHICAP_dada2/2_rds/ps.20231103_16S_WHICAP.231109.rds");ps.20231106
ps.20231122 <- readRDS("20231122_16S_WHICAP_dada2/2_rds/ps.20231122_16S_WHICAP.231227.rds");ps.20231122
ps.20231222.1 <- readRDS("20231222_16S_Plate_W1_dada2/2_rds/ps.20231222_16S_Plate_W1.231225.rds");ps.20231222.1
ps.20231222.2 <- readRDS("20231222_16S_Plate_W2_dada2/2_rds/ps.20231222_16S_Plate_W2.231225.rds");ps.20231222.2
ps.20240202 <- readRDS("20240202_16S_P4_WHI_dada2/2_rds/ps.20240202_16S_P4_WHI.240205.rds");ps.20240202
rm(list=ls())
# ----- Libraries and functions ------#
# source("~/Dropbox/04_Scripts/R_source/microbiome3/Go_tools/Go_tools.5.0.R")
library("Gotools")
Gotool_dependency()
# ----- Input ------#
project<-"WHICAP_merged"
setwd("~/cumc.columbia.edu/Uhlemann Lab - Microbiome Core/1_Projects/MAPS_Pan_WHI/2_Analysis/")
rm(list=ls())
gc()
rm(list=ls())
# ----- Libraries and functions ------#
# source("~/Dropbox/04_Scripts/R_source/microbiome3/Go_tools/Go_tools.5.0.R")
library("Gotools")
Gotool_dependency()
# ----- Input ------#
project<-"WHICAP_merged"
setwd("~/cumc.columbia.edu/Uhlemann Lab - Microbiome Core/1_Projects/MAPS_Pan_WHI/2_Analysis/")
list.files()
# dada2 ps input
ps.20221129 <- readRDS("20221129_16S_WHICAP_dada2/2_rds/ps.20221129_16S_WHICAP.221202.rds");ps.20221129
ps.20230421 <- readRDS("20230421_16S_WHICAP_dada2/2_rds/ps.20230421_16S_WHICAP.230424.rds");ps.20230421
ps.20230512 <- readRDS("20230512_16S_WHICAP_dada2/2_rds/ps.20230512_16S_WHICAP_Plaque.230515.rds");ps.20230512
ps.20230816 <- readRDS("20230816_16S_WHICAP_dada2/2_rds/ps.20230816_16S_WHICAP.230819.rds");ps.20230816
ps.20230327_SV <- readRDS("20230327_16S_WHICAP_Sal_dada2/2_rds/ps.20230327_16S_WHICAP_Sal.230330.rds");ps.20230327_SV
ps.20231106 <- readRDS("20231103_16S_WHICAP_dada2/2_rds/ps.20231103_16S_WHICAP.231109.rds");ps.20231106
ps.20231122 <- readRDS("20231122_16S_WHICAP_dada2/2_rds/ps.20231122_16S_WHICAP.231227.rds");ps.20231122
ps.20231222.1 <- readRDS("20231222_16S_Plate_W1_dada2/2_rds/ps.20231222_16S_Plate_W1.231225.rds");ps.20231222.1
ps.20231222.2 <- readRDS("20231222_16S_Plate_W2_dada2/2_rds/ps.20231222_16S_Plate_W2.231225.rds");ps.20231222.2
ps.20240202 <- readRDS("20240202_16S_P4_WHI_dada2/2_rds/ps.20240202_16S_P4_WHI.240205.rds");ps.20240202
# merge all togather
ps <- merge_phyloseq(ps.20221129, ps.20230421, ps.20230512, ps.20230816,ps.20230327_SV,
ps.20231106,ps.20231122, ps.20231222.1, ps.20231222.2,ps.20240202);ps
dir <- Go_path(project, pdf="no", table="no", path="2_rds")
dir <- Go_path(project, pdf="no", table="no", path="1_out")
saveRDS(ps, sprintf("%s/ps.merged.%s.%s.rds", dir,project, format(Sys.Date(), "%y%m%d")))
# merge all togather
ps <- merge_phyloseq(ps.20221129, ps.20230421, ps.20230512, ps.20230816,ps.20230327_SV,
ps.20231106,ps.20231122, ps.20231222.1, ps.20231222.2,ps.20240202);ps
dir <- Go_path(project, pdf="no", table="no", path="2_rds")
dir <- Go_path(project, pdf="no", table="no", path="1_out")
saveRDS(ps, sprintf("%s/ps.merged.%s.%s.rds", dir,project, format(Sys.Date(), "%y%m%d")))
dir
dir
dirs <- Go_path(project, pdf="no", table="no", path="2_rds")
dirs$main
dirs$path
saveRDS(ps, sprintf("%s/ps.merged.%s.%s.rds", dirs$path, project, format(Sys.Date(), "%y%m%d")))
# go to the function DIR or working DIR
setwd("~/Dropbox/04_Scripts/R_source/microbiome3/") #
# build package
setwd("~/Dropbox/04_Scripts/R_source/Gotools")
devtools::build()
# build package
setwd("~/Dropbox/04_Scripts/R_source/Gotools")
devtools::build()
cd ~/Dropbox/04_Scripts/R_source/Gotools
devtools::install_github("bbagy/Gotools") # or install.packages("Gomarkdown_0.0.0.9000.tar.gz", repos = NULL, type="source")
library("Gotools")
Gotool_dependency()
devtools::document()
devtools::build()
devtools::document()
create_package(path = "~/Dropbox/04_Scripts/R_source/Gotools")
# build package
setwd("~/Dropbox/04_Scripts/R_source/Gotools")
devtools::build()
devtools::document()
rm(list = ls())
library(devtools)
# build package
setwd("~/Dropbox/04_Scripts/R_source/Gotools")
devtools::document()
devtools::document()

}
fill_meta <- function(i7, i5, sheet, field) {
idx <- which(sheet$I7_Index_ID == i7 & sheet$I5_Index_ID == i5)
if (length(idx) == 1) {
return(sheet[[field]][idx])
} else {
return(NA)
}
}
merged$sample_well <- mapply(fill_well,
merged$I7_Index_ID,
merged$I5_Index_ID,
MoreArgs = list(sheet = samplesheet_full))
merged$Index_sets <- mapply(fill_meta,
merged$I7_Index_ID,
merged$I5_Index_ID,
MoreArgs = list(sheet = samplesheet_full, field = "Index_sets"))
# === Step 3: Index_sets 기준으로 분리 저장 ===
index_set_levels <- unique(na.omit(merged$Index_sets))
for (iset in index_set_levels) {
sub_df <- merged[merged$Index_sets == iset, , drop = FALSE]
plate_file <- sub("\\.csv$", paste0(".filled_", iset, ".csv"), scrub_file[1])
write.csv(sub_df, file = plate_file, row.names = TRUE)
message(sprintf("Saved plate-level SCRub: %s", basename(plate_file)))
}
} else {
warning(sprintf("Malformed SampleSheet: %s", samplesheet_file[1]))
}
} else {
warning(sprintf("SCRub.csv or *_samplesheet.csv not found in %s/3_map", ccm.ps))
}
}
base_path <- "~/Documents/02_lab_Projects/09_CCM_phase2/16S"
sample_location <- "~/Documents/02_lab_Projects/09_CCM_phase2/16S/20250402_16S_samplesheet_A2D.csv"
# 미리 sample_location 처리
lines2 <- readLines(sample_location)
data_start2 <- which(grepl("^\\[Data\\]", lines2)) + 1
samplesheet_full <- read.csv(
text = paste(lines2[data_start2:length(lines2)], collapse = "\n"),
stringsAsFactors = FALSE
)
for (ccm.ps in CCM_PHASE2) {
project_dir <- file.path(base_path, ccm.ps)
setwd(project_dir)
scrub_file <- list.files("3_map", pattern = "\\.SCRub\\.csv$", full.names = TRUE)
samplesheet_file <- list.files("3_map", pattern = "_samplesheet\\.csv$", full.names = TRUE)
if (length(scrub_file) > 0 && length(samplesheet_file) > 0) {
data1 <- read.csv(scrub_file[1], row.names = 1)
if (!"ID" %in% colnames(data1)) {
data1$ID <- sub("_S\\d+$", "", rownames(data1))
data1$ID <- gsub("-", "_", data1$ID)
}
lines <- readLines(samplesheet_file[1])
data_start <- which(grepl("^\\[Data\\]", lines)) + 1
if (length(lines) >= data_start + 1) {
samplesheet <- read.csv(
text = paste(lines[data_start:length(lines)], collapse = "\n"),
stringsAsFactors = FALSE
)
samplesheet$Sample_ID <- gsub("-", "_", samplesheet$Sample_ID)
available_cols <- intersect(colnames(samplesheet), c("Sample_ID", "I7_Index_ID", "I5_Index_ID"))
if (!"Sample_ID" %in% available_cols) {
warning("Sample_ID not found in SampleSheet. Skipping...")
next
}
sample_match <- match(data1$ID, samplesheet$Sample_ID)
new_data <- samplesheet[sample_match, available_cols[available_cols != "Sample_ID"], drop = FALSE]
merged <- cbind(data1, new_data)
# === Step 2: sample_location 기반으로 sample_well 채우기 ===
fill_well <- function(i7, i5, sheet) {
idx <- which(sheet$I7_Index_ID == i7 & sheet$I5_Index_ID == i5)
if (length(idx) == 1) {
return(sheet$Sample_Well[idx])
} else {
return(NA)
}
}
fill_meta <- function(i7, i5, sheet, field) {
idx <- which(sheet$I7_Index_ID == i7 & sheet$I5_Index_ID == i5)
if (length(idx) == 1) {
return(sheet[[field]][idx])
} else {
return(NA)
}
}
merged$sample_well <- mapply(fill_well,
merged$I7_Index_ID,
merged$I5_Index_ID,
MoreArgs = list(sheet = samplesheet_full))
merged$Index_sets <- mapply(fill_meta,
merged$I7_Index_ID,
merged$I5_Index_ID,
MoreArgs = list(sheet = samplesheet_full, field = "Index_sets"))
# === Step 4: 채우기 ===
# ID 기반으로 is_control, sample_type 지정
id_lower <- tolower(merged$ID)
merged$is_control <- grepl("neg|pos|negative|positive", id_lower)
merged$sample_type <- ""
merged$sample_type[merged$is_control & grepl("neg|negative", id_lower)] <- "control negative"
merged$sample_type[merged$is_control & grepl("pos|positive", id_lower)] <- "control positive"
# === Step 3: Index_sets 기준으로 분리 저장 ===
index_set_levels <- unique(na.omit(merged$Index_sets))
for (iset in index_set_levels) {
sub_df <- merged[merged$Index_sets == iset, , drop = FALSE]
plate_file <- sub("\\.csv$", paste0(".filled_", iset, ".csv"), scrub_file[1])
write.csv(sub_df, file = plate_file, row.names = TRUE)
message(sprintf("Saved plate-level SCRub: %s", basename(plate_file)))
}
} else {
warning(sprintf("Malformed SampleSheet: %s", samplesheet_file[1]))
}
} else {
warning(sprintf("SCRub.csv or *_samplesheet.csv not found in %s/3_map", ccm.ps))
}
}
Sample_Type <- "CCM"
# 미리 sample_location 처리
lines2 <- readLines(sample_location)
data_start2 <- which(grepl("^\\[Data\\]", lines2)) + 1
samplesheet_full <- read.csv(
text = paste(lines2[data_start2:length(lines2)], collapse = "\n"),
stringsAsFactors = FALSE
)
for (ccm.ps in CCM_PHASE2) {
project_dir <- file.path(base_path, ccm.ps)
setwd(project_dir)
scrub_file <- list.files("3_map", pattern = "\\.SCRub\\.csv$", full.names = TRUE)
samplesheet_file <- list.files("3_map", pattern = "_samplesheet\\.csv$", full.names = TRUE)
if (length(scrub_file) > 0 && length(samplesheet_file) > 0) {
data1 <- read.csv(scrub_file[1], row.names = 1)
if (!"ID" %in% colnames(data1)) {
data1$ID <- sub("_S\\d+$", "", rownames(data1))
data1$ID <- gsub("-", "_", data1$ID)
}
lines <- readLines(samplesheet_file[1])
data_start <- which(grepl("^\\[Data\\]", lines)) + 1
if (length(lines) >= data_start + 1) {
samplesheet <- read.csv(
text = paste(lines[data_start:length(lines)], collapse = "\n"),
stringsAsFactors = FALSE
)
samplesheet$Sample_ID <- gsub("-", "_", samplesheet$Sample_ID)
available_cols <- intersect(colnames(samplesheet), c("Sample_ID", "I7_Index_ID", "I5_Index_ID"))
if (!"Sample_ID" %in% available_cols) {
warning("Sample_ID not found in SampleSheet. Skipping...")
next
}
sample_match <- match(data1$ID, samplesheet$Sample_ID)
new_data <- samplesheet[sample_match, available_cols[available_cols != "Sample_ID"], drop = FALSE]
merged <- cbind(data1, new_data)
# === Step 2: sample_location 기반으로 sample_well 채우기 ===
fill_well <- function(i7, i5, sheet) {
idx <- which(sheet$I7_Index_ID == i7 & sheet$I5_Index_ID == i5)
if (length(idx) == 1) {
return(sheet$Sample_Well[idx])
} else {
return(NA)
}
}
fill_meta <- function(i7, i5, sheet, field) {
idx <- which(sheet$I7_Index_ID == i7 & sheet$I5_Index_ID == i5)
if (length(idx) == 1) {
return(sheet[[field]][idx])
} else {
return(NA)
}
}
merged$sample_well <- mapply(fill_well,
merged$I7_Index_ID,
merged$I5_Index_ID,
MoreArgs = list(sheet = samplesheet_full))
merged$Index_sets <- mapply(fill_meta,
merged$I7_Index_ID,
merged$I5_Index_ID,
MoreArgs = list(sheet = samplesheet_full, field = "Index_sets"))
# === Step 3: 채우기 ===
# ID 기반으로 is_control, sample_type 지정
id_lower <- tolower(merged$ID)
merged$is_control <- grepl("neg|pos|negative|positive", id_lower)
merged$sample_type <- Sample_Type
merged$sample_type[merged$is_control & grepl("neg|negative", id_lower)] <- "control negative"
merged$sample_type[merged$is_control & grepl("pos|positive", id_lower)] <- "control positive"
# === Step 4: Index_sets 기준으로 분리 저장 ===
index_set_levels <- unique(na.omit(merged$Index_sets))
for (iset in index_set_levels) {
sub_df <- merged[merged$Index_sets == iset, , drop = FALSE]
plate_file <- sub("\\.csv$", paste0(".filled_", iset, ".csv"), scrub_file[1])
write.csv(sub_df, file = plate_file, row.names = TRUE)
message(sprintf("Saved plate-level SCRub: %s", basename(plate_file)))
}
} else {
warning(sprintf("Malformed SampleSheet: %s", samplesheet_file[1]))
}
} else {
warning(sprintf("SCRub.csv or *_samplesheet.csv not found in %s/3_map", ccm.ps))
}
}
Go_SCRubMap <- function(SCRubfile, IlluSamplesheet, IlluLocation, map_dir = "3_map") {
# 파일 경로 수동 지정 가능하게
scrub_file <- file.path(map_dir, SCRubfile)
samplesheet_file <- file.path(map_dir, IlluSamplesheet)
if (file.exists(scrub_file) && file.exists(samplesheet_file)) {
data1 <- read.csv(scrub_file, row.names = 1)
if (!"ID" %in% colnames(data1)) {
data1$ID <- sub("_S\\d+$", "", rownames(data1))
data1$ID <- gsub("-", "_", data1$ID)
}
# SampleSheet 불러오기
lines <- readLines(samplesheet_file)
data_start <- which(grepl("^\\[Data\\]", lines)) + 1
if (length(lines) >= data_start + 1) {
samplesheet <- read.csv(
text = paste(lines[data_start:length(lines)], collapse = "\n"),
stringsAsFactors = FALSE
)
samplesheet$Sample_ID <- gsub("-", "_", samplesheet$Sample_ID)
available_cols <- intersect(colnames(samplesheet), c("Sample_ID", "I7_Index_ID", "I5_Index_ID"))
if (!"Sample_ID" %in% available_cols) {
stop("Sample_ID not found in Illumina SampleSheet")
}
sample_match <- match(data1$ID, samplesheet$Sample_ID)
new_data <- samplesheet[sample_match, available_cols[available_cols != "Sample_ID"], drop = FALSE]
merged <- cbind(data1, new_data)
# IlluLocation (full samplesheet) 처리
lines2 <- readLines(IlluLocation)
data_start2 <- which(grepl("^\\[Data\\]", lines2)) + 1
samplesheet_full <- read.csv(
text = paste(lines2[data_start2:length(lines2)], collapse = "\n"),
stringsAsFactors = FALSE
)
fill_meta <- function(i7, i5, sheet, field) {
idx <- which(sheet$I7_Index_ID == i7 & sheet$I5_Index_ID == i5)
if (length(idx) == 1) {
return(sheet[[field]][idx])
} else {
return(NA)
}
}
merged$sample_well <- mapply(fill_meta,
merged$I7_Index_ID,
merged$I5_Index_ID,
MoreArgs = list(sheet = samplesheet_full, field = "Sample_Well"))
merged$Index_sets <- mapply(fill_meta,
merged$I7_Index_ID,
merged$I5_Index_ID,
MoreArgs = list(sheet = samplesheet_full, field = "Index_sets"))
# is_control / sample_type 지정
id_lower <- tolower(merged$ID)
merged$is_control <- grepl("neg|pos|negative|positive", id_lower)
merged$sample_type <- ""
merged$sample_type[merged$is_control & grepl("neg|negative", id_lower)] <- "control negative"
merged$sample_type[merged$is_control & grepl("pos|positive", id_lower)] <- "control positive"
# plate별 저장
index_set_levels <- unique(na.omit(merged$Index_sets))
for (iset in index_set_levels) {
sub_df <- merged[merged$Index_sets == iset, , drop = FALSE]
plate_file <- file.path(map_dir, sub("\\.csv$", paste0(".filled_", iset, ".csv"), basename(scrub_file)))
write.csv(sub_df, file = plate_file, row.names = TRUE)
message(sprintf("Saved plate-level SCRub: %s", basename(plate_file)))
}
} else {
stop("Malformed SampleSheet: [Data] section not found")
}
} else {
stop("SCRub or SampleSheet file not found.")
}
}
# 기준 경로
base_path <- "~/Documents/02_lab_Projects/09_CCM_phase2/16S/20220310_16S_CCM_Phase2_dada2"
setwd(base_path)
Go_SCRubMap(
SCRubfile = "empty.250401.20220310_16S_CCM_Phase2_dada2.mapping.SCRub.csv",
IlluSamplesheet = "20220310_16S_samplesheet.csv",
IlluLocation = sprintf("%s/20250402_16S_samplesheet_A2D.csv",base_path),
map_dir = sprintf("%s/20220310_16S_CCM_Phase2_dada2/3_map",base_path)
)
SCRubfile = "empty.250401.20220310_16S_CCM_Phase2_dada2.mapping.SCRub.csv"
IlluSamplesheet = "20220310_16S_samplesheet.csv"
IlluLocation = sprintf("%s/20250402_16S_samplesheet_A2D.csv",base_path)
map_dir = sprintf("%s/20220310_16S_CCM_Phase2_dada2/3_map",base_path)
# 파일 경로 수동 지정 가능하게
scrub_file <- file.path(map_dir, SCRubfile)
samplesheet_file <- file.path(map_dir, IlluSamplesheet)
samplesheet_file
if (file.exists(scrub_file) && file.exists(samplesheet_file)) {
data1 <- read.csv(scrub_file, row.names = 1)
if (!"ID" %in% colnames(data1)) {
data1$ID <- sub("_S\\d+$", "", rownames(data1))
data1$ID <- gsub("-", "_", data1$ID)
}
# SampleSheet 불러오기
lines <- readLines(samplesheet_file)
data_start <- which(grepl("^\\[Data\\]", lines)) + 1
if (length(lines) >= data_start + 1) {
samplesheet <- read.csv(
text = paste(lines[data_start:length(lines)], collapse = "\n"),
stringsAsFactors = FALSE
)
samplesheet$Sample_ID <- gsub("-", "_", samplesheet$Sample_ID)
available_cols <- intersect(colnames(samplesheet), c("Sample_ID", "I7_Index_ID", "I5_Index_ID"))
if (!"Sample_ID" %in% available_cols) {
stop("Sample_ID not found in Illumina SampleSheet")
}
sample_match <- match(data1$ID, samplesheet$Sample_ID)
new_data <- samplesheet[sample_match, available_cols[available_cols != "Sample_ID"], drop = FALSE]
merged <- cbind(data1, new_data)
# IlluLocation (full samplesheet) 처리
lines2 <- readLines(IlluLocation)
data_start2 <- which(grepl("^\\[Data\\]", lines2)) + 1
samplesheet_full <- read.csv(
text = paste(lines2[data_start2:length(lines2)], collapse = "\n"),
stringsAsFactors = FALSE
)
fill_meta <- function(i7, i5, sheet, field) {
idx <- which(sheet$I7_Index_ID == i7 & sheet$I5_Index_ID == i5)
if (length(idx) == 1) {
return(sheet[[field]][idx])
} else {
return(NA)
}
}
merged$sample_well <- mapply(fill_meta,
merged$I7_Index_ID,
merged$I5_Index_ID,
MoreArgs = list(sheet = samplesheet_full, field = "Sample_Well"))
merged$Index_sets <- mapply(fill_meta,
merged$I7_Index_ID,
merged$I5_Index_ID,
MoreArgs = list(sheet = samplesheet_full, field = "Index_sets"))
# is_control / sample_type 지정
id_lower <- tolower(merged$ID)
merged$is_control <- grepl("neg|pos|negative|positive", id_lower)
merged$sample_type <- ""
merged$sample_type[merged$is_control & grepl("neg|negative", id_lower)] <- "control negative"
merged$sample_type[merged$is_control & grepl("pos|positive", id_lower)] <- "control positive"
# plate별 저장
index_set_levels <- unique(na.omit(merged$Index_sets))
for (iset in index_set_levels) {
sub_df <- merged[merged$Index_sets == iset, , drop = FALSE]
plate_file <- file.path(map_dir, sub("\\.csv$", paste0(".filled_", iset, ".csv"), basename(scrub_file)))
write.csv(sub_df, file = plate_file, row.names = TRUE)
message(sprintf("Saved plate-level SCRub: %s", basename(plate_file)))
}
} else {
stop("Malformed SampleSheet: [Data] section not found")
}
} else {
stop("SCRub or SampleSheet file not found.")
}
data1 <- read.csv(scrub_file, row.names = 1)
# 기준 경로
base_path <- "~/Documents/02_lab_Projects/09_CCM_phase2/16S/20220310_16S_CCM_Phase2_dada2"
setwd(base_path)
Go_SCRubMap(
SCRubfile = "empty.250401.20220310_16S_CCM_Phase2_dada2.mapping.SCRub.csv",
IlluSamplesheet = "20220310_16S_samplesheet.csv",
IlluLocation = sprintf("%s/20250402_16S_samplesheet_A2D.csv",base_path),
map_dir = sprintf("%s/20220310_16S_CCM_Phase2_dada2/3_map",base_path)
)
data1 <- read.csv(scrub_file, row.names = 1)
scrub_file
map_dir
base_path <- "~/Documents/02_lab_Projects/09_CCM_phase2/16S/20220310_16S_CCM_Phase2_dada2"
base_path <- "~/Documents/02_lab_Projects/09_CCM_phase2/16S/20220310_16S_CCM_Phase2_dada2"
setwd(base_path)
Go_SCRubMap(
SCRubfile = "empty.250401.20220310_16S_CCM_Phase2_dada2.mapping.SCRub.csv",
IlluSamplesheet = "20220310_16S_samplesheet.csv",
IlluLocation = sprintf("%s/20250402_16S_samplesheet_A2D.csv",base_path),
map_dir = sprintf("%s/20220310_16S_CCM_Phase2_dada2/3_map",base_path)
)
map_dir
# 기준 경로
base_path <- "~/Documents/02_lab_Projects/09_CCM_phase2/16S/20220310_16S_CCM_Phase2_dada2"
setwd(base_path)
# 기준 경로
base_path <- "~/Documents/02_lab_Projects/09_CCM_phase2/16S"
setwd(base_path)
Go_SCRubMap(
SCRubfile = "empty.250401.20220310_16S_CCM_Phase2_dada2.mapping.SCRub.csv",
IlluSamplesheet = "20220310_16S_samplesheet.csv",
IlluLocation = sprintf("%s/20250402_16S_samplesheet_A2D.csv",base_path),
map_dir = sprintf("%s/20220310_16S_CCM_Phase2_dada2/3_map",base_path)
)
Go_SCRubMap <- function(SCRubfile, IlluSamplesheet, IlluLocation, Sample_Type, map_dir = "3_map") {
# 파일 경로 수동 지정 가능하게
scrub_file <- file.path(map_dir, SCRubfile)
samplesheet_file <- file.path(map_dir, IlluSamplesheet)
if (file.exists(scrub_file) && file.exists(samplesheet_file)) {
data1 <- read.csv(scrub_file, row.names = 1)
if (!"ID" %in% colnames(data1)) {
data1$ID <- sub("_S\\d+$", "", rownames(data1))
data1$ID <- gsub("-", "_", data1$ID)
}
# SampleSheet 불러오기
lines <- readLines(samplesheet_file)
data_start <- which(grepl("^\\[Data\\]", lines)) + 1
if (length(lines) >= data_start + 1) {
samplesheet <- read.csv(
text = paste(lines[data_start:length(lines)], collapse = "\n"),
stringsAsFactors = FALSE
)
samplesheet$Sample_ID <- gsub("-", "_", samplesheet$Sample_ID)
available_cols <- intersect(colnames(samplesheet), c("Sample_ID", "I7_Index_ID", "I5_Index_ID"))
if (!"Sample_ID" %in% available_cols) {
stop("Sample_ID not found in Illumina SampleSheet")
}
sample_match <- match(data1$ID, samplesheet$Sample_ID)
new_data <- samplesheet[sample_match, available_cols[available_cols != "Sample_ID"], drop = FALSE]
merged <- cbind(data1, new_data)
# IlluLocation (full samplesheet) 처리
lines2 <- readLines(IlluLocation)
data_start2 <- which(grepl("^\\[Data\\]", lines2)) + 1
samplesheet_full <- read.csv(
text = paste(lines2[data_start2:length(lines2)], collapse = "\n"),
stringsAsFactors = FALSE
)
fill_meta <- function(i7, i5, sheet, field) {
idx <- which(sheet$I7_Index_ID == i7 & sheet$I5_Index_ID == i5)
if (length(idx) == 1) {
return(sheet[[field]][idx])
} else {
return(NA)
}
}
merged$sample_well <- mapply(fill_meta,
merged$I7_Index_ID,
merged$I5_Index_ID,
MoreArgs = list(sheet = samplesheet_full, field = "Sample_Well"))
merged$Index_sets <- mapply(fill_meta,
merged$I7_Index_ID,
merged$I5_Index_ID,
MoreArgs = list(sheet = samplesheet_full, field = "Index_sets"))
# is_control / sample_type 지정
id_lower <- tolower(merged$ID)
merged$is_control <- grepl("neg|pos|negative|positive", id_lower)
merged$sample_type <- Sample_Type
merged$sample_type[merged$is_control & grepl("neg|negative", id_lower)] <- "control negative"
merged$sample_type[merged$is_control & grepl("pos|positive", id_lower)] <- "control positive"
# plate별 저장
index_set_levels <- unique(na.omit(merged$Index_sets))
for (iset in index_set_levels) {
sub_df <- merged[merged$Index_sets == iset, , drop = FALSE]
plate_file <- file.path(map_dir, sub("\\.csv$", paste0(".filled_", iset, ".csv"), basename(scrub_file)))
write.csv(sub_df, file = plate_file, row.names = TRUE)
message(sprintf("Saved plate-level SCRub: %s", basename(plate_file)))
}
} else {
stop("Malformed SampleSheet: [Data] section not found")
}
} else {
stop("SCRub or SampleSheet file not found.")
}
}
# 기준 경로
base_path <- "~/Documents/02_lab_Projects/09_CCM_phase2/16S"
setwd(base_path)
Go_SCRubMap(
SCRubfile = "empty.250401.20220310_16S_CCM_Phase2_dada2.mapping.SCRub.csv",
IlluSamplesheet = "20220310_16S_samplesheet.csv",
IlluLocation = sprintf("%s/20250402_16S_samplesheet_A2D.csv",base_path),
Sample_Type = "CCM",
map_dir = sprintf("%s/20220310_16S_CCM_Phase2_dada2/3_map",base_path)
)
base_path <- "~/Documents/02_lab_Projects/09_CCM_phase2/16S"
setwd(base_path)
for (ccm.ps in CCM_PHASE2) {
project_dir <- file.path(base_path, ccm.ps)
map_dir <- file.path(project_dir, "3_map")
setwd(project_dir)
# 실제 파일명 추출
scrub_file <- list.files(map_dir, pattern = "\\.SCRub\\.csv$", full.names = FALSE)
samplesheet_file <- list.files(map_dir, pattern = "_samplesheet\\.csv$", full.names = FALSE)
# 둘 다 존재하는 경우에만 실행
if (length(scrub_file) > 0 && length(samplesheet_file) > 0) {
Go_SCRubMap(
SCRubfile = scrub_file[1],
IlluSamplesheet = samplesheet_file[1],
IlluLocation = file.path(base_path, "20250402_16S_samplesheet_A2D.csv"),
Sample_Type = "CCM",
map_dir = map_dir
)
} else {
message(sprintf("파일 누락: %s", ccm.ps))
}
}
base_path <- "~/Documents/02_lab_Projects/09_CCM_phase2/16S"
setwd(base_path)
for (ccm.ps in CCM_PHASE2) {
project_dir <- file.path(base_path, ccm.ps)
map_dir <- file.path(project_dir, "3_map")
setwd(project_dir)
# 실제 파일명 추출
scrub_file <- list.files(map_dir, pattern = "\\.SCRub\\.csv$", full.names = FALSE)
samplesheet_file <- list.files(map_dir, pattern = "_samplesheet\\.csv$", full.names = FALSE)
# 둘 다 존재하는 경우에만 실행
if (length(scrub_file) > 0 && length(samplesheet_file) > 0) {
Go_SCRubMap(
SCRubfile = scrub_file[1],
IlluSamplesheet = samplesheet_file[1],
IlluLocation = file.path(base_path, "20250402_16S_samplesheet_A2D.csv"),
Sample_Type = "CCM_swab",
map_dir = map_dir
)
} else {
message(sprintf("파일 누락: %s", ccm.ps))
}
}
# build package
setwd("~/Dropbox/04_Scripts/R_source/Gotools")
devtools::build() # generate Gotools_0.0.0.9000.tar.gz
devtools::document()

dir <- Go_path(project, pdf="yes", table="no", path=NULL)
Go_SeqLengths(ps1.prune)
ps1.size <- Go_SeqLengths(ps1.prune, from = 395, to= 450)
ps1.size.sel <- subset_samples(ps1.size, SDD_state != "NTC")
ps2 <- Go_filter(ps1.size.sel, cutoff = 0.0001)# 1: 0.00005 (548) 2: 0.0001 (381)
#===== Orders
map <- data.frame(sample_data(ps2))
StudyIDs <- sort(unique(map$StudyID))
TP1 <- sort(unique(map$Timepoint))
TP2 <- sort(unique(map$Timepoint2))
IF <- sort(unique(map$Infection1))
orders <- unique(c("Non_SDD","SDD", "No_infection", "No","Yes",
"KPC-KP_In_3Days", "KPC-KP_In_6Days","KPC-KP_In_9Days","KPC-KP_In_14Days","KPC-KP_In_19Days",
"KPC-KP_In_24Days", "Death_in_the_Days","Lost", TP1,TP2, IF,StudyIDs))
#===== ps set
ps2
map <- data.frame(sample_data(ps2))
#===== Go_myCols()
barplot.col <- Go_myCols(custumCols = "cols3");barplot.col
adiv.col <- Go_myCols(piratepal = "southpark")
bdiv.col <- Go_myCols(piratepal = "southpark")
da.col <-c("#2366C0FF", "#B91226FF")# Go_myCols(piratepal = "espresso")
ps2.no <- subset_samples(ps2, Infection == "No")
Go_barchart(psIN = ps2.no, project = project, cutoff = 0.005, simple = F, relative = T,
taxanames =c("Phylum","Class","Order","Family", "Genus","Species"),
cate.vars="StudyID", facet = c("SDD_state"), legend = "bottom",
orders = orders,  x_label = "Timepoint", mycols = barplot.col,
name = "no",
ncol=10, height = 20, width = 12)
ps2.yes <- subset_samples(ps2, Infection == "Yes")
Go_barchart(psIN = ps2.yes, project = project, cutoff = 0.005, simple = F, relative = T,
taxanames =c("Phylum","Class","Order","Family", "Genus","Species"),
cate.vars="StudyID", facet = c("SDD_state"), legend = "bottom",
orders = orders,  x_label = "Timepoint", mycols = barplot.col,
name = "yes",
ncol=10, height = 10, width = 12)
Go_barchart(psIN = ps2.yes, project = project, cutoff = 0.005, simple = F, relative = T,
taxanames =c("Phylum","Class","Order","Family", "Genus","Species"),
cate.vars="StudyID", facet = c("SDD_state"), legend = "bottom",
orders = orders,  x_label = "Timepoint2", mycols = barplot.col,
name = "yes",
ncol=10, height = 10, width = 12)
Go_barchart(psIN = ps2.no, project = project, cutoff = 0.005, simple = F, relative = T,
taxanames =c("Phylum","Class","Order","Family", "Genus","Species"),
cate.vars="StudyID", facet = c("SDD_state"), legend = "bottom",
orders = orders,  x_label = "Timepoint2", mycols = barplot.col,
name = "no",
ncol=10, height = 20, width = 12)
TP2 <- sort(unique(map$Timepoint2))
TP2
TP2 <- sort(unique(map$Timepoint2))
orders <- unique(c("Non_SDD","SDD", "No_infection", "No","Yes",
"KPC-KP_In_3Days", "KPC-KP_In_6Days","KPC-KP_In_9Days","KPC-KP_In_14Days","KPC-KP_In_19Days",
"KPC-KP_In_24Days", "Death_in_the_Days","Lost", TP2, IF,StudyIDs))
orders <- unique(c("Non_SDD","SDD", "No_infection", "No","Yes",
"KPC-KP_In_3Days", "KPC-KP_In_6Days","KPC-KP_In_9Days","KPC-KP_In_14Days","KPC-KP_In_19Days",
"KPC-KP_In_24Days", "Death_in_the_Days","Lost", TP2, IF,StudyIDs))
orders <- unique(c("Non_SDD","SDD", "No_infection", "No","Yes",
"KPC-KP_In_3Days", "KPC-KP_In_6Days","KPC-KP_In_9Days","KPC-KP_In_14Days","KPC-KP_In_19Days",
"KPC-KP_In_24Days", "Death_in_the_Days","Lost", TP2, TP,IF,StudyIDs))
orders <- unique(c("Non_SDD","SDD", "No_infection", "No","Yes",
"KPC-KP_In_3Days", "KPC-KP_In_6Days","KPC-KP_In_9Days","KPC-KP_In_14Days","KPC-KP_In_19Days",
"KPC-KP_In_24Days", "Death_in_the_Days","Lost", TP2, TP1,IF,StudyIDs))
orders
orders <- unique(c("Non_SDD","SDD", "No_infection", "No","Yes",
"KPC-KP_In_3Days", "KPC-KP_In_6Days","KPC-KP_In_9Days","KPC-KP_In_14Days","KPC-KP_In_19Days",
"KPC-KP_In_24Days", "Death_in_the_Days","Lost", TP2, TP1,IF,StudyIDs))
#===== ps set
ps2
map <- data.frame(sample_data(ps2))
#===== Go_myCols()
barplot.col <- Go_myCols(custumCols = "cols3");barplot.col
adiv.col <- Go_myCols(piratepal = "southpark")
bdiv.col <- Go_myCols(piratepal = "southpark")
da.col <-c("#2366C0FF", "#B91226FF")# Go_myCols(piratepal = "espresso")
ps2.no <- subset_samples(ps2, Infection == "No")
Go_barchart(psIN = ps2.no, project = project, cutoff = 0.005, simple = F, relative = T,
taxanames =c("Phylum","Class","Order","Family", "Genus","Species"),
cate.vars="StudyID", facet = c("SDD_state"), legend = "bottom",
orders = orders,  x_label = "Timepoint2", mycols = barplot.col,
name = "no",
ncol=10, height = 20, width = 12)
ps2.yes <- subset_samples(ps2, Infection == "Yes")
Go_barchart(psIN = ps2.yes, project = project, cutoff = 0.005, simple = F, relative = T,
taxanames =c("Phylum","Class","Order","Family", "Genus","Species"),
cate.vars="StudyID", facet = c("SDD_state"), legend = "bottom",
orders = orders,  x_label = "Timepoint2", mycols = barplot.col,
name = "yes",
ncol=10, height = 10, width = 12)
Go_barchart(psIN = ps2.yes, project = project, cutoff = 0.005, simple = F, relative = T,
taxanames =c("Phylum","Class","Order","Family"),
cate.vars="StudyID", facet = c("SDD_state"), legend = "bottom",
orders = orders,  x_label = "Timepoint2", mycols = barplot.col,
name = "yes1",
ncol=10, height = 10, width = 12)
Go_barchart(psIN = ps2.yes, project = project, cutoff = 0.005, simple = F, relative = T,
taxanames =c("Genus","Species"),
cate.vars="StudyID", facet = c("SDD_state"), legend = "bottom",
orders = orders,  x_label = "Timepoint2", mycols = barplot.col,
name = "yes2",
ncol=10, height = 12, width = 12)
Go_clme(psIN = ps2.sel, project = project, node=0,  decreasing = T, cate.vars = "Infection",mycols = NULL,
name=NULL, ID=NULL,orders = orders, paired ="StudyID", timepoint="Timepoint",
xangle=90,  height = 3, width = 8, plotCols=2, plotRows=1,standardsize = F)
#===== alpha diversity
ps2.sel <- subset_samples(ps2, Follow_up !="No");ps2.sel
Go_clme(psIN = ps2.sel, project = project, node=0,  decreasing = T, cate.vars = "Infection",mycols = NULL,
name=NULL, ID=NULL,orders = orders, paired ="StudyID", timepoint="Timepoint",
xangle=90,  height = 3, width = 8, plotCols=2, plotRows=1,standardsize = F)
ps2
#===== alpha diversity regression
outcome <- "Shannon" # Shannon Chao1
adiv <- Go_adiv(psIN = ps2, project = project, alpha_metrics = c("Chao1", "Shannon"))
adiv$Timepoint1
adiv$Timepoint1 <- as.numeric(as.character(adiv$Timepoint1))
adiv$Infection <- factor(adiv$Infection, levels = c("No", "Infection"))
# form <- as.formula(sprintf("%s ~ Infection + SDD_state + (1|StudyID) + (1 | Timepoint)", outcome))
form <- as.formula(sprintf("%s ~ Infection + SDD_state + Timepoint1 + (1 | StudyID)", outcome))
mod <- lmer(form, data = adiv)
adiv$Infection <- factor(adiv$Infection, levels = c("No", "Yes"))
# form <- as.formula(sprintf("%s ~ Infection + SDD_state + (1|StudyID) + (1 | Timepoint)", outcome))
form <- as.formula(sprintf("%s ~ Infection + SDD_state + Timepoint1 + (1 | StudyID)", outcome))
mod <- lmer(form, data = adiv)
adiv$Infection
adiv <- Go_adiv(psIN = ps2, project = project, alpha_metrics = c("Chao1", "Shannon"))
adiv$Timepoint1 <- as.numeric(as.character(adiv$Timepoint1))
adiv$Infection <- factor(adiv$Infection, levels = c("No", "Yes"))
# form <- as.formula(sprintf("%s ~ Infection + SDD_state + (1|StudyID) + (1 | Timepoint)", outcome))
form <- as.formula(sprintf("%s ~ Infection + SDD_state + Timepoint1 + (1 | StudyID)", outcome))
mod <- lmer(form, data = adiv)
summary(mod)
# 잔차 플롯
plot(mod)
qqnorm(resid(mod))
qqline(resid(mod))
# 상호작용
form <- as.formula(sprintf("%s ~ Infection * Timepoint1 + SDD_state + (1 | StudyID)", outcome))
mod <- lmer(form, data = adiv)
summary(mod)
# AIC, BIC 비교:수치가 낮은 것이 좋다.
AIC(mod)
BIC(mod)
# AIC, BIC 비교 AIC (Akaike Information Criterion) / BIC (Bayesian Information Criterion)
form <- as.formula(sprintf("%s ~ Infection * Timepoint1 + (1 | StudyID)", outcome))
mod_reduced <- lmer(form, data = adiv)
summary(mod)
summary(mod_reduced)
AIC(mod, mod_reduced)
summary(mod_reduced)
AIC(mod, mod_reduced)
BIC(mod, mod_reduced)
# 상호작용
form <- as.formula(sprintf("%s ~ Infection * Timepoint1 + SDD_state + (1 | StudyID)", outcome))
mod <- lmer(form, data = adiv)
summary(mod)
Go_forestplot(adiv, project, outcomes = c("Chao1", "Shannon"),
formular= "%s ~ Infection * Timepoint1 + SDD_state + (1 | StudyID)",
name = NULL, height=2.4, width=4)
Go_forestplot <- function(df,
project,
outcomes,
formular,
name=NULL,
height,
width){
#===== out dir
out <- file.path(sprintf("%s_%s",project, format(Sys.Date(), "%y%m%d")))
if(!file_test("-d", out)) dir.create(out)
out_path <- file.path(sprintf("%s_%s/pdf",project, format(Sys.Date(), "%y%m%d")))
if(!file_test("-d", out_path)) dir.create(out_path)
for (outcome in outcomes){
form <-  as.formula(sprintf(formular, outcome))
mod <- lmer(form, data = df)
# summary(mod)
# ===== detection method from model
patterns <- list(
glm = "\\bglm\\(",  # Ensures "glmer(" is treated as a separate word
lm = "\\blm\\(",
glmer = "\\bglmer\\(",  # Ensures "glmer(" is treated as a separate word
lmer = "\\blmer\\("     # Ensures "lmer(" is treated as a separate word
)
# Function to detect model type
detect_model_type <- function(model_call_string, patterns) {
detected_models <- sapply(patterns, function(pat) grepl(pat, model_call_string))
names(detected_models[detected_models == TRUE])
}
model_call <- summary(mod)$call
model_call_string <- deparse(model_call)
# Use the function to detect model type again
model_call_string <- model_call_string[1]
model_type <- detect_model_type(model_call_string, patterns)
# Print the detected model types
print(model_type)
# ===== extract table
coef <- as.data.frame(summary(mod)$coefficients)
coef <- coef[setdiff(rownames(coef), "(Intercept)"),,drop=F]
if(model_type == "lm" | model_type == "glm"){
colnames(coef) <- c("Estimate", "SE", "df","stat", "pval")
}else if(model_type =="lmer") {
colnames(coef) <- c("Estimate", "SE", "df","stat", "pval")
}
coef$padj <- p.adjust(coef$pval, method="fdr")
print(coef)
# ===== calculation for the confidence interval
coef$lower_ci <- coef$Estimate - qt(0.975, df=Inf) * coef$SE
coef$upper_ci <- coef$Estimate + qt(0.975, df=Inf) * coef$SE
# colnames(conf.na) <- c("2.5 %", "97.5 %")
coef$outcome <- outcome
coef$model <- model_type
print(coef)
coef$dir <- ifelse(coef$pval < 0.05, ifelse(sign(coef$Estimate)== 1, "up", "down"), "NS")
coef$dirPadj <- ifelse(coef$padj < 0.05, TRUE, FALSE)
padj_shape <- c(19,1); names(padj_shape) <- c(TRUE, FALSE)
mycols <- c("#2366C0FF", "#FF6435FF")
if(!is.null(mycols)){
dircolors <- c("down" = mycols[1], "NS" = "grey", "up" = mycols[2])
}else{
dircolors <- c("down" = "#f8766d", "NS" = "grey", "up" = "#7cae00")
}
coef$fix_effect <-rownames(coef) ; head(coef)
# Forest plot을 위한 색상 설정
lims <- max(abs(coef$upper_ci - coef$lower_ci)) * 1.1
# Forest plot 그리기
forest_plot <- ggplot(coef, aes(x=reorder(fix_effect, Estimate), y=Estimate, ymin=lower_ci, ymax=upper_ci)) + #reorder(fix_effect, Estimate)
geom_pointrange(aes(color=dir, shape=dirPadj), size=0.5) +
geom_hline(yintercept=0, linetype="dashed", color = "black") +
coord_flip() +
scale_color_manual(values=dircolors) +
scale_shape_manual(values=c("TRUE" = 19, "FALSE" = 1)) +  # Closed circle for significant, open for not
labs(title=sprintf("Forest Plot of %s LMM Results", outcome), y="Effect Size", x="Variable") +
#theme_minimal()
theme_classic()
# Plot 출력
print(forest_plot)
ggsave(sprintf("%s/forest.%s.%s.%s%s.pdf", out_path, project,
outcome,
ifelse(is.null(name), "", paste(name, ".", sep = "")),
format(Sys.Date(), "%y%m%d")), plot = forest_plot, device = "pdf", width = width, height = height)
}
}
Go_forestplot(adiv, project, outcomes = c("Chao1", "Shannon"),
formular= "%s ~ Infection * Timepoint1 + SDD_state + (1 | StudyID)",
name = NULL, height=2.4, width=4)
# ===== PERMANOVA
map <- data.frame(sample_data(ps2.sel))
# 결과를 저장할 빈 데이터 프레임 생성
results_df <- data.frame()
for (dist in c("bray", "unifrac", "wunifrac")) {
# 거리 행렬 계산
distance_matrix <- phyloseq::distance(ps2.sel, method = dist)
# PERMANOVA 분석 (블록 디자인 사용)
form <- as.formula(distance_matrix ~ Infection * Timepoint1 + SDD_state)
set.seed(123)
permanova_result <- adonis2(form, data = map, strata = map$StudyID)
# PERMANOVA 결과를 데이터 프레임으로 변환하고 메소드 정보를 추가
result_df <- as.data.frame(permanova_result)
result_df$Method <- dist
# 결과를 결과 데이터 프레임에 추가
results_df <- rbind(results_df, result_df)
}
# 결과 출력
print(results_df)
colnames(results_df) <- c("DF", "SumSq", "R2", "F", "pval", "Method")
results_df$padj <- p.adjust(results_df$pval, method="fdr")
results_df[] <- lapply(results_df, function(x) if(is.numeric(x)) sprintf("%.3f", x) else x)
# 결과 출력
print(results_df)
colnames(results_df) <- c("DF", "SumSq", "R2", "F", "pval", "Method")
results_df$padj <- p.adjust(results_df$pval, method="fdr")
results_df[] <- lapply(results_df, function(x) if(is.numeric(x)) sprintf("%.3f", x) else x)
# 결과 출력
print(results_df)
dir <- Go_path(project, pdf="no", table="yes", path=NULL)
write.csv(results_df, sprintf("%s/permanova.20240717.csv",dir$table))
write.csv(results_df, sprintf("%s/permanova.20240717.csv",dir$tab))
zicoseq <- Go_zicoseq(ps2, cate.outs="Infection", group1= "Yes", group2="No",
rand.eff ="StudyID", con.vari = c("SDD_state","Timepoint1"), orders=orders)
Go_zicoseq <- function(psIN,
cate.outs,
group1,
group2,
rand.eff =NULL,
con.vari = NULL,
orders){
#===== Differential abundant test  (ZicoSeq)
# install.packages("GUniFrac")
library(GUniFrac)
map <- data.frame(sample_data(psIN))
ps2.sel <- subset_samples(psIN, map[,cate.outs] %in% c(group1,group2));ps2.sel
#===== extract mata data
meta_dat <- data.frame(sample_data(ps2.sel))
meta_dat[,cate.outs] <- as.factor(meta_dat[,cate.outs] )
meta_dat[,cate.outs]  <- relevel(meta_dat[,cate.outs] , ref = group1)
#===== extract otu and species names
otu_mat <- as.matrix(t(otu_table(ps2.sel)))
species_names <- tax_table(ps2.sel)[, "Species"]  # Assuming "Species" is the column for species names
rownames(otu_mat) <- species_names
#===== check the both created data
rownames(meta_dat) <- rownames(t(otu_mat))
#===== Option: If the ZicoSeq() show errors related 0 value
non_zero_rows <- rowSums(otu_mat) != 0
# Filter out rows with all zeros
otu_mat_filtered <- otu_mat[non_zero_rows, ]
# Alternatively, you can check for any variance and remove columns with zero variance
non_zero_var_rows <- apply(otu_mat, 1, var) != 0
otu_mat_filtered <- otu_mat[non_zero_var_rows, ]
# Check how many features are left after filtering
cat("Number of features after filtering:", nrow(otu_mat_filtered), "\n")
set.seed(123)
zico_results <- ZicoSeq(
meta.dat = meta_dat,
feature.dat = otu_mat_filtered,
grp.name = cate.outs,
adj.name = con.vari,  # Adjust this if you need to account for covariates
feature.dat.type = 'count',
prev.filter = 0.1, # 0.2
mean.abund.filter = 0,
max.abund.filter = 0.01, # 0.002
is.winsor = TRUE,
outlier.pct = 0.05, # 0.03
is.post.sample = TRUE,
post.sample.no = 50,#25
link.func = list(function(x) sign(x) * (abs(x))^0.5),
perm.no = 999, #99
strata = rand.eff,
ref.pct = 0.5,
stage.no = 6,
excl.pct = 0.2,
p.max = 1000,#500
is.fwer = TRUE, # FALSE
verbose = TRUE,
return.feature.dat = TRUE
)
return(zico_results)
}
#===== Differential abundant test  (ZicoSeq)
# install.packages("GUniFrac")
library(GUniFrac)
zicoseq <- Go_zicoseq(ps2, cate.outs="Infection", group1= "Yes", group2="No",
rand.eff ="StudyID", con.vari = c("SDD_state","Timepoint1"), orders=orders)
psIN = ps2.sel
cate.outs="Infection"
group1= "Yes"
group2="No"
rand.eff ="StudyID"
con.vari = c("SDD_state","Timepoint1")
orders=orders
#===== Differential abundant test  (ZicoSeq)
# install.packages("GUniFrac")
library(GUniFrac)
map <- data.frame(sample_data(psIN))
ps2.sel <- subset_samples(psIN, map[,cate.outs] %in% c(group1,group2));ps2.sel
#===== extract mata data
meta_dat <- data.frame(sample_data(ps2.sel))
meta_dat[,cate.outs] <- as.factor(meta_dat[,cate.outs] )
meta_dat[,cate.outs]  <- relevel(meta_dat[,cate.outs] , ref = group1)
#===== extract otu and species names
otu_mat <- as.matrix(t(otu_table(ps2.sel)))
species_names <- tax_table(ps2.sel)[, "Species"]  # Assuming "Species" is the column for species names
rownames(otu_mat) <- species_names
#===== check the both created data
rownames(meta_dat) <- rownames(t(otu_mat))
#===== Option: If the ZicoSeq() show errors related 0 value
non_zero_rows <- rowSums(otu_mat) != 0
# Filter out rows with all zeros
otu_mat_filtered <- otu_mat[non_zero_rows, ]
# Alternatively, you can check for any variance and remove columns with zero variance
non_zero_var_rows <- apply(otu_mat, 1, var) != 0
otu_mat_filtered <- otu_mat[non_zero_var_rows, ]
# Check how many features are left after filtering
cat("Number of features after filtering:", nrow(otu_mat_filtered), "\n")
set.seed(123)
zico_results <- ZicoSeq(
meta.dat = meta_dat,
feature.dat = otu_mat_filtered,
grp.name = cate.outs,
adj.name = con.vari,  # Adjust this if you need to account for covariates
feature.dat.type = 'count',
prev.filter = 0.1, # 0.2
mean.abund.filter = 0,
max.abund.filter = 0.01, # 0.002
is.winsor = TRUE,
outlier.pct = 0.05, # 0.03
is.post.sample = TRUE,
post.sample.no = 50,#25
link.func = list(function(x) sign(x) * (abs(x))^0.5),
perm.no = 999, #99
strata = rand.eff,
ref.pct = 0.5,
stage.no = 6,
excl.pct = 0.2,
p.max = 1000,#500
is.fwer = TRUE, # FALSE
verbose = TRUE,
return.feature.dat = TRUE
)
pval <- 'p.adj.fdr' # 'p.adj.fdr','p.raw' and 'p.adj.fwer'.
cut.off <- 0.05
p <- ZicoSeq.plot(
ZicoSeq.obj = zicoseq,
pvalue.type = pval,
cutoff = cut.off,
text.size = 8,
out.dir = dir$pdf,  # Specify the directory only once
file.name = sprintf('ZicoSeq.plot.(%s.vs.%s).%s_%s.%s.pdf',group1, group2, pval, cut.off,format(Sys.Date(), "%y%m%d")),
width = 6, # 12
height = 4 # 8
)
zicoseq <- Go_zicoseq(ps2.sel, cate.outs="Infection", group1= "Yes", group2="No",
rand.eff ="StudyID", con.vari = c("SDD_state","Timepoint1"), orders=orders)
p <- ZicoSeq.plot(
ZicoSeq.obj = zicoseq,
pvalue.type = pval,
cutoff = cut.off,
text.size = 8,
out.dir = dir$pdf,  # Specify the directory only once
file.name = sprintf('ZicoSeq.plot.(%s.vs.%s).%s_%s.%s.pdf',group1, group2, pval, cut.off,format(Sys.Date(), "%y%m%d")),
width = 6, # 12
height = 4 # 8
)
pval <- 'p.adj.fdr' # 'p.adj.fdr','p.raw' and 'p.adj.fwer'.
cut.off <- 0.05
p <- ZicoSeq.plot(
ZicoSeq.obj = zicoseq,
pvalue.type = pval,
cutoff = cut.off,
text.size = 8,
out.dir = dir$pdf,  # Specify the directory only once
file.name = sprintf('ZicoSeq.plot.(%s.vs.%s).%s_%s.%s.pdf',group1, group2, pval, cut.off,format(Sys.Date(), "%y%m%d")),
width = 6, # 12
height = 4 # 8
)
group1= "Yes"
group2="No"
p <- ZicoSeq.plot(
ZicoSeq.obj = zicoseq,
pvalue.type = pval,
cutoff = cut.off,
text.size = 8,
out.dir = dir$pdf,  # Specify the directory only once
file.name = sprintf('ZicoSeq.plot.(%s.vs.%s).%s_%s.%s.pdf',group1, group2, pval, cut.off,format(Sys.Date(), "%y%m%d")),
width = 6, # 12
height = 4 # 8
)
zicoseq
dir$pdf
dir <- Go_path(project, pdf="yes", table="no", path=NULL)
p <- ZicoSeq.plot(
ZicoSeq.obj = zicoseq,
pvalue.type = pval,
cutoff = cut.off,
text.size = 8,
out.dir = dir$pdf,  # Specify the directory only once
file.name = sprintf('ZicoSeq.plot.(%s.vs.%s).%s_%s.%s.pdf',group1, group2, pval, cut.off,format(Sys.Date(), "%y%m%d")),
width = 6, # 12
height = 4 # 8
)
pval <- 'p.adj.fwer' # 'p.adj.fdr','p.raw' and 'p.adj.fwer'.
cut.off <- 0.05
dir <- Go_path(project, pdf="yes", table="no", path=NULL)
p <- ZicoSeq.plot(
ZicoSeq.obj = zicoseq,
pvalue.type = pval,
cutoff = cut.off,
text.size = 8,
out.dir = dir$pdf,  # Specify the directory only once
file.name = sprintf('ZicoSeq.plot.(%s.vs.%s).%s_%s.%s.pdf',group1, group2, pval, cut.off,format(Sys.Date(), "%y%m%d")),
width = 6, # 12
height = 4 # 8
)
pval <- 'p.adj.fdr' # 'p.adj.fdr','p.raw' and 'p.adj.fwer'.
cut.off <- 0.1
dir <- Go_path(project, pdf="yes", table="no", path=NULL)
p <- ZicoSeq.plot(
ZicoSeq.obj = zicoseq,
pvalue.type = pval,
cutoff = cut.off,
text.size = 8,
out.dir = dir$pdf,  # Specify the directory only once
file.name = sprintf('ZicoSeq.plot.(%s.vs.%s).%s_%s.%s.pdf',group1, group2, pval, cut.off,format(Sys.Date(), "%y%m%d")),
width = 6, # 12
height = 4 # 8
)
pval <- 'p.raw' # 'p.adj.fdr','p.raw' and 'p.adj.fwer'.
cut.off <- 0.1
dir <- Go_path(project, pdf="yes", table="no", path=NULL)
p <- ZicoSeq.plot(
ZicoSeq.obj = zicoseq,
pvalue.type = pval,
cutoff = cut.off,
text.size = 8,
out.dir = dir$pdf,  # Specify the directory only once
file.name = sprintf('ZicoSeq.plot.(%s.vs.%s).%s_%s.%s.pdf',group1, group2, pval, cut.off,format(Sys.Date(), "%y%m%d")),
width = 6, # 12
height = 4 # 8
)
#===== Differential abundant test
Go_Ancom2(ps2,  project,  cate.outs = "Infection",rand.eff = "StudyID", cont.conf = "Timepoint1", cate.conf= "SDD_state",orders= orders, name=NULL)
#===== Differential abundant test
Go_Ancom2(ps2,  project,  cate.outs = "Infection",rand.eff = "StudyID", cont.conf = "Timepoint1", cate.conf= "SDD_state",orders= orders, name=NULL, taxanames = "Species")
#===== Differential abundant test
Go_Ancom2(ps2,  project,  cate.outs = "Infection",rand.eff = NULL, cont.conf = NULL, cate.conf= NULL,orders= orders, name=NULL, taxanames = "Species")
for(tool in c("Ancom2")){# ANCOM2 ,"Deseq2","Aldex2",
Go_volcanoPlot(project, file_path = sprintf("%s_%s/table/%s", project, format(Sys.Date(), "%y%m%d"), tool),
files= ".csv", mycols=da.col, fc = 0,
name="no_adj" , font = 3, height =5.5, width=6.5)
}
devtools::document()
# build package
setwd("~/Dropbox/04_Scripts/R_source/Gotools")
devtools::build()
devtools::document()

writeXStringSet(dna_strings[seq_name], fasta_file)
system2("blastn", args = c("-query", fasta_file, "-db", blastDB, "-out", output_file, "-outfmt", "5"))
file.remove(fasta_file) # Clean up FASTA file immediately after use
return(output_file)
})
# Parse BLAST results
parsed_results <- lapply(blast_results, function(file) {
doc <- try(xmlParse(file), silent = TRUE)
if (inherits(doc, "try-error")) {
cat("Failed to parse XML file:", file, "\n")
return(list(Hit_Number = NA, Hit_Definition = NA))
}
hits <- getNodeSet(doc, "//BlastOutput_iterations/Iteration/Iteration_hits/Hit")
if (length(hits) == 0) {
return(list(Hit_Number = NA, Hit_Definition = NA))
}
first_hit <- hits[[1]]
list(Hit_Number = xmlValue(getNodeSet(first_hit, "Hit_num")[[1]]),
Hit_Definition = xmlValue(getNodeSet(first_hit, "Hit_def")[[1]]))
})
results_df <- do.call(rbind, lapply(parsed_results, as.data.frame, stringsAsFactors = FALSE))
sequences_df <- cbind(sequences_df, results_df)
# Simplify the hit definitions to only include the genus and species
sequences_df$Hit_Definition <- sapply(strsplit(sequences_df$Hit_Definition, " "), function(words) {
paste(words[1:min(length(words), 2)], collapse=" ")
})
# Write results to CSV
write.csv(sequences_df, sprintf("1_out/%s.updated_sequences_with_blast_results.%s.csv",project, format(Sys.Date(), "%y%m%d")), row.names = TRUE)
cat("Results have been successfully saved to 1_out/updated_sequences_with_blast_results.csv\n")
}
#===== Input 2
Go_blastASVs(project, asvsTable="1_out/Nick.240412.psTotab.asvTable.csv", blastDB="/Users/heekukpark/DB/blastDB/16S_ribosomal_RNA")
asvsTable="1_out/Nick.240412.psTotab.asvTable.csv"
blastDB="/Users/heekukpark/DB/blastDB/16S_ribosomal_RNA"
# Load necessary libraries
if (!requireNamespace("Biostrings", quietly = TRUE)) {
if (!requireNamespace("BiocManager", quietly = TRUE)) {
install.packages("BiocManager")
}
BiocManager::install("Biostrings", ask = FALSE)
}
library(Biostrings, quietly = TRUE)
# Set up the PATH environment variable for BLAST
current_path <- Sys.getenv("PATH")
new_path <- paste(current_path, "/Users/heekukpark/miniconda3/bin", sep=":")
Sys.setenv(PATH = new_path)
# Verify BLAST installation
if (system("blastn -version", intern = F) == 0) {
cat("BLAST is correctly installed and found in PATH.\n")
} else {
stop("BLAST not found. Please check your BLAST installation and PATH.")
}
# Read sequences
sequences_df <- read.csv(asvsTable, row.names = 1, check.names = FALSE)
dna_strings <- DNAStringSet(rownames(sequences_df))
names(dna_strings) <- paste("Sequence", seq_along(dna_strings), sep="_")
# Setup output directory
output_dir <- "1_out/blast"
# Read sequences
sequences_df <- read.csv(asvsTable, row.names = 1, check.names = FALSE)
blastDB="/Users/heekukpark/DB/blastDB/16S_ribosomal_RNA"
asvsTable="1_out/Nick.240412.psTotab.asvTable.csv"
# Read sequences
sequences_df <- read.csv(asvsTable, row.names = 1, check.names = FALSE)
dna_strings <- DNAStringSet(rownames(sequences_df))
names(dna_strings) <- paste("Sequence", seq_along(dna_strings), sep="_")
# Setup output directory
output_dir <- "1_out/blast"
if (!dir.exists(output_dir)) {
dir.create(output_dir, recursive = TRUE)
}
# Run BLAST for each sequence
blast_results <- sapply(names(dna_strings), function(seq_name) {
fasta_file <- file.path(output_dir, paste0(seq_name, ".fasta"))
output_file <- file.path(output_dir, paste0(seq_name, "_blast.xml"))
writeXStringSet(dna_strings[seq_name], fasta_file)
system2("blastn", args = c("-query", fasta_file, "-db", blastDB, "-out", output_file, "-outfmt", "5"))
file.remove(fasta_file) # Clean up FASTA file immediately after use
return(output_file)
})
# Parse BLAST results
parsxed_results <- lapply(blast_results, function(file) {
doc <- try(xmlParse(file), silent = TRUE)
if (inherits(doc, "try-error")) {
cat("Failed to parse XML file:", file, "\n")
return(list(Hit_Number = NA, Hit_Definition = NA))
}
hits <- getNodeSet(doc, "//BlastOutput_iterations/Iteration/Iteration_hits/Hit")
if (length(hits) == 0) {
return(list(Hit_Number = NA, Hit_Definition = NA))
}
first_hit <- hits[[1]]
list(Hit_Number = xmlValue(getNodeSet(first_hit, "Hit_num")[[1]]),
Hit_Definition = xmlValue(getNodeSet(first_hit, "Hit_def")[[1]]))
})
parse_blast_results <- function(file) {
# Load and parse the XML file
doc <- try(xmlParse(file), silent = TRUE)
if (inherits(doc, "try-error")) {
cat("Failed to parse XML file:", file, "\n")
return(list(Hit_Number = NA, Hit_Definition = NA))
}
# Get iterations
iterations <- getNodeSet(doc, "//BlastOutput_iterations/Iteration")
if (length(iterations) == 0) {
cat("No iterations found in file:", file, "\n")
return(list(Hit_Number = NA, Hit_Definition = NA))
}
# Check for hits
hits <- getNodeSet(iterations[[1]], "Iteration_hits/Hit")
if (length(hits) == 0) {
cat("No hits found in iteration of file:", file, "\n")
return(list(Hit_Number = NA, Hit_Definition = NA))
}
# Extract the first hit's number and definition
first_hit <- hits[[1]]
hit_num <- xmlValue(getNodeSet(first_hit, "Hit_num")[[1]])
hit_def <- xmlValue(getNodeSet(first_hit, "Hit_def")[[1]])
return(list(Hit_Number = hit_num, Hit_Definition = hit_def))
}
# Parse BLAST results
parse_blast_results <- function(file) {
# Load and parse the XML file
doc <- try(xmlParse(file), silent = TRUE)
if (inherits(doc, "try-error")) {
cat("Failed to parse XML file:", file, "\n")
return(list(Hit_Number = NA, Hit_Definition = NA))
}
# Get iterations
iterations <- getNodeSet(doc, "//BlastOutput_iterations/Iteration")
if (length(iterations) == 0) {
cat("No iterations found in file:", file, "\n")
return(list(Hit_Number = NA, Hit_Definition = NA))
}
# Check for hits
hits <- getNodeSet(iterations[[1]], "Iteration_hits/Hit")
if (length(hits) == 0) {
cat("No hits found in iteration of file:", file, "\n")
return(list(Hit_Number = NA, Hit_Definition = NA))
}
# Extract the first hit's number and definition
first_hit <- hits[[1]]
hit_num <- xmlValue(getNodeSet(first_hit, "Hit_num")[[1]])
hit_def <- xmlValue(getNodeSet(first_hit, "Hit_def")[[1]])
return(list(Hit_Number = hit_num, Hit_Definition = hit_def))
}
results_df <- do.call(rbind, lapply(parsed_results, as.data.frame, stringsAsFactors = FALSE))
# Parse BLAST results
parsed_results <- function(file) {
# Load and parse the XML file
doc <- try(xmlParse(file), silent = TRUE)
if (inherits(doc, "try-error")) {
cat("Failed to parse XML file:", file, "\n")
return(list(Hit_Number = NA, Hit_Definition = NA))
}
# Get iterations
iterations <- getNodeSet(doc, "//BlastOutput_iterations/Iteration")
if (length(iterations) == 0) {
cat("No iterations found in file:", file, "\n")
return(list(Hit_Number = NA, Hit_Definition = NA))
}
# Check for hits
hits <- getNodeSet(iterations[[1]], "Iteration_hits/Hit")
if (length(hits) == 0) {
cat("No hits found in iteration of file:", file, "\n")
return(list(Hit_Number = NA, Hit_Definition = NA))
}
# Extract the first hit's number and definition
first_hit <- hits[[1]]
hit_num <- xmlValue(getNodeSet(first_hit, "Hit_num")[[1]])
hit_def <- xmlValue(getNodeSet(first_hit, "Hit_def")[[1]])
return(list(Hit_Number = hit_num, Hit_Definition = hit_def))
}
results_df <- do.call(rbind, lapply(parsed_results, as.data.frame, stringsAsFactors = FALSE))
# Parse BLAST results
parse_blast_results <- function(file) {
# Load and parse the XML file
doc <- try(xmlParse(file), silent = TRUE)
if (inherits(doc, "try-error")) {
cat("Failed to parse XML file:", file, "\n")
return(list(Hit_Number = NA, Hit_Definition = NA))
}
# Get iterations
iterations <- getNodeSet(doc, "//BlastOutput_iterations/Iteration")
if (length(iterations) == 0) {
cat("No iterations found in file:", file, "\n")
return(list(Hit_Number = NA, Hit_Definition = NA))
}
# Check for hits
hits <- getNodeSet(iterations[[1]], "Iteration_hits/Hit")
if (length(hits) == 0) {
cat("No hits found in iteration of file:", file, "\n")
return(list(Hit_Number = NA, Hit_Definition = NA))
}
# Extract the first hit's number and definition
first_hit <- hits[[1]]
hit_num <- xmlValue(getNodeSet(first_hit, "Hit_num")[[1]])
hit_def <- xmlValue(getNodeSet(first_hit, "Hit_def")[[1]])
return(list(Hit_Number = hit_num, Hit_Definition = hit_def))
}
# Apply the function to each result file
parsed_results <- lapply(blast_results, parse_blast_results)
# Convert results to a data frame
results_df <- as.data.frame(do.call(rbind, parsed_results))
# If sequences_df has the same order and number of sequences as blast_results
#sequences_df$Hit_Number <- results_df$Hit_Number
sequences_df$Hit_Definition <- results_df$Hit_Definition
# Assuming Hit_Number and Hit_Definition might still be lists, convert them to character vectors
#sequences_df$Hit_Number <- sapply(sequences_df$Hit_Number, function(x) ifelse(is.null(x), NA, x))
sequences_df$Hit_Definition <- sapply(sequences_df$Hit_Definition, function(x) ifelse(is.null(x), NA, x))
# Split each string by spaces and select the first two words
sequences_df$Hit_Definition <- sapply(strsplit(sequences_df$Hit_Definition, " "), function(words) {
paste(words[1:2], collapse=" ")
})
# Print the modified column to verify the changes
print(sequences_df$Hit_Definition)
# Go_blastASVs <- function(asvsTable=na, blastDB=na){
bioconductor_packages <- c("Biostrings", "blastula")
# Function to install and load Bioconductor packages
install_load_bioc <- function(package) {
if (!require(package, character.only = TRUE, quietly = TRUE)) {
if (!require("BiocManager", quietly = TRUE)) {
install.packages("BiocManager")
}
BiocManager::install(package, force = TRUE, ask = FALSE, type = "source")
}
library(package, character.only = TRUE, quietly = TRUE)
}
# Get the current PATH
current_path <- Sys.getenv("PATH")
# Set the new PATH by appending the Conda bin directory where blastn is located
new_path <- paste(current_path, "/Users/heekukpark/miniconda3/bin", sep=":")
Sys.setenv(PATH = new_path)
# Verify by checking if blastn can be called from R now
system("blastn -version")
#===== Get and Convert sequences to DNAStringSet and write to FASTA file
# Go_psTotab(psIN = ps2.sel,project)
sequences_df <- read.csv("1_out/Nick.240412.psTotab.asvTable.csv",row.names=1,check.names=FALSE);dim(sequences_df)
dna_strings <- DNAStringSet(rownames(sequences_df))
names(dna_strings) <- paste("Sequence", seq_along(dna_strings), sep="_")
#===== Run blast
# Define the directory path
output_dir <- "1_out/blast"
if (!dir.exists(output_dir)) {
dir.create(output_dir, recursive = TRUE)
}
# Create a separate FASTA file for each sequence and run BLAST
blast_results <- sapply(names(dna_strings), function(seq_name) {
fasta_file <- file.path(output_dir, paste0(seq_name, ".fasta"))
output_file <- file.path(output_dir, paste0(seq_name, "_blast.xml"))
# Write the single sequence to a FASTA file
writeXStringSet(dna_strings[seq_name], fasta_file)
# Run BLAST command
system2("blastn", args = c("-query", fasta_file,
"-db", "/Users/heekukpark/DB/blastDB/16S_ribosomal_RNA",
"-out", output_file,
"-outfmt", "5"))
return(output_file)
})
sapply(names(dna_strings), function(seq_name) {
fasta_file_path <- file.path(output_dir, paste0(seq_name, ".fasta"))
file.remove(fasta_file_path)
})
# Check results
print(blast_results)
library(XML)
# Parse BLAST results
parse_blast_results <- function(file) {
# Load and parse the XML file
doc <- try(xmlParse(file), silent = TRUE)
if (inherits(doc, "try-error")) {
cat("Failed to parse XML file:", file, "\n")
return(list(Hit_Number = NA, Hit_Definition = NA))
}
# Get iterations
iterations <- getNodeSet(doc, "//BlastOutput_iterations/Iteration")
if (length(iterations) == 0) {
cat("No iterations found in file:", file, "\n")
return(list(Hit_Number = NA, Hit_Definition = NA))
}
# Check for hits
hits <- getNodeSet(iterations[[1]], "Iteration_hits/Hit")
if (length(hits) == 0) {
cat("No hits found in iteration of file:", file, "\n")
return(list(Hit_Number = NA, Hit_Definition = NA))
}
# Extract the first hit's number and definition
first_hit <- hits[[1]]
hit_num <- xmlValue(getNodeSet(first_hit, "Hit_num")[[1]])
hit_def <- xmlValue(getNodeSet(first_hit, "Hit_def")[[1]])
return(list(Hit_Number = hit_num, Hit_Definition = hit_def))
}
# Apply the function to each result file
parsed_results <- lapply(blast_results, parse_blast_results)
# Convert results to a data frame
results_df <- as.data.frame(do.call(rbind, parsed_results))
# If sequences_df has the same order and number of sequences as blast_results
#sequences_df$Hit_Number <- results_df$Hit_Number
sequences_df$Hit_Definition <- results_df$Hit_Definition
# Assuming Hit_Number and Hit_Definition might still be lists, convert them to character vectors
#sequences_df$Hit_Number <- sapply(sequences_df$Hit_Number, function(x) ifelse(is.null(x), NA, x))
sequences_df$Hit_Definition <- sapply(sequences_df$Hit_Definition, function(x) ifelse(is.null(x), NA, x))
# Split each string by spaces and select the first two words
sequences_df$Hit_Definition <- sapply(strsplit(sequences_df$Hit_Definition, " "), function(words) {
paste(words[1:2], collapse=" ")
})
# Print the modified column to verify the changes
print(sequences_df$Hit_Definition)
# Write results to CSV
write.csv(sequences_df, sprintf("1_out/%s.updated_sequences_with_blast_results.%s.csv",project, format(Sys.Date(), "%y%m%d")), row.names = TRUE)
cat("Results have been successfully saved to 1_out/updated_sequences_with_blast_results.csv\n")
Go_blastASVs <- function(project,
asvsTable,
blastDB) {
# Load necessary libraries
if (!requireNamespace("Biostrings", quietly = TRUE)) {
if (!requireNamespace("BiocManager", quietly = TRUE)) {
install.packages("BiocManager")
}
BiocManager::install("Biostrings", ask = FALSE)
}
library(Biostrings, quietly = TRUE)
# Set up the PATH environment variable for BLAST
current_path <- Sys.getenv("PATH")
new_path <- paste(current_path, "/Users/heekukpark/miniconda3/bin", sep=":")# which blastn
Sys.setenv(PATH = new_path)
# Verify BLAST installation
if (system("blastn -version", intern = F) == 0) {
cat("BLAST is correctly installed and found in PATH.\n")
} else {
stop("BLAST not found. Please check your BLAST installation and PATH.")
}
# Read sequences
sequences_df <- read.csv(asvsTable, row.names = 1, check.names = FALSE)
dna_strings <- DNAStringSet(rownames(sequences_df))
names(dna_strings) <- paste("Sequence", seq_along(dna_strings), sep="_")
# Setup output directory
output_dir <- "1_out/blast"
if (!dir.exists(output_dir)) {
dir.create(output_dir, recursive = TRUE)
}
# Run BLAST for each sequence
blast_results <- sapply(names(dna_strings), function(seq_name) {
fasta_file <- file.path(output_dir, paste0(seq_name, ".fasta"))
output_file <- file.path(output_dir, paste0(seq_name, "_blast.xml"))
writeXStringSet(dna_strings[seq_name], fasta_file)
system2("blastn", args = c("-query", fasta_file, "-db", blastDB, "-out", output_file, "-outfmt", "5"))
file.remove(fasta_file) # Clean up FASTA file immediately after use
return(output_file)
})
sapply(names(dna_strings), function(seq_name) {
fasta_file_path <- file.path(output_dir, paste0(seq_name, ".fasta"))
file.remove(fasta_file_path)
})
# Check results
print(blast_results)
library(XML)
# Parse BLAST results
parse_blast_results <- function(file) {
# Load and parse the XML file
doc <- try(xmlParse(file), silent = TRUE)
if (inherits(doc, "try-error")) {
cat("Failed to parse XML file:", file, "\n")
return(list(Hit_Number = NA, Hit_Definition = NA))
}
# Get iterations
iterations <- getNodeSet(doc, "//BlastOutput_iterations/Iteration")
if (length(iterations) == 0) {
cat("No iterations found in file:", file, "\n")
return(list(Hit_Number = NA, Hit_Definition = NA))
}
# Check for hits
hits <- getNodeSet(iterations[[1]], "Iteration_hits/Hit")
if (length(hits) == 0) {
cat("No hits found in iteration of file:", file, "\n")
return(list(Hit_Number = NA, Hit_Definition = NA))
}
# Extract the first hit's number and definition
first_hit <- hits[[1]]
hit_num <- xmlValue(getNodeSet(first_hit, "Hit_num")[[1]])
hit_def <- xmlValue(getNodeSet(first_hit, "Hit_def")[[1]])
return(list(Hit_Number = hit_num, Hit_Definition = hit_def))
}
# Apply the function to each result file
parsed_results <- lapply(blast_results, parse_blast_results)
# Convert results to a data frame
results_df <- as.data.frame(do.call(rbind, parsed_results))
# If sequences_df has the same order and number of sequences as blast_results
#sequences_df$Hit_Number <- results_df$Hit_Number
sequences_df$Hit_Definition <- results_df$Hit_Definition
# Assuming Hit_Number and Hit_Definition might still be lists, convert them to character vectors
#sequences_df$Hit_Number <- sapply(sequences_df$Hit_Number, function(x) ifelse(is.null(x), NA, x))
sequences_df$Hit_Definition <- sapply(sequences_df$Hit_Definition, function(x) ifelse(is.null(x), NA, x))
# Split each string by spaces and select the first two words
sequences_df$Hit_Definition <- sapply(strsplit(sequences_df$Hit_Definition, " "), function(words) {
paste(words[1:2], collapse=" ")
})
# Print the modified column to verify the changes
print(sequences_df$Hit_Definition)
# Write results to CSV
write.csv(sequences_df, sprintf("1_out/%s.updated_sequences_with_blast_results.%s.csv",project, format(Sys.Date(), "%y%m%d")), row.names = TRUE)
cat("Results have been successfully saved to 1_out/updated_sequences_with_blast_results.csv\n")
}
rm(list=ls())
#===== Read Go_tools
# devtools::install_github("bbagy/Gotools", force=T)
library("Gotools")
Gotool_dependency()
#===== Set work directory
project<-"Nick"
currentwd <- "~/cumc.columbia.edu/Uhlemann Lab - Microbiome Core/1_Projects/MAPS_Nic_Mic/2_Analysis/Nick_merged_240206/"
setwd(sprintf("%s",currentwd))
#===== Input 2
Go_blastASVs(project, asvsTable="1_out/Nick.240412.psTotab.asvTable.csv", blastDB="/Users/heekukpark/DB/blastDB/16S_ribosomal_RNA")
Go_blastASVs <- function(project,
asvsTable,
blastDB) {
# Load necessary libraries
if (!requireNamespace("Biostrings", quietly = TRUE)) {
if (!requireNamespace("BiocManager", quietly = TRUE)) {
install.packages("BiocManager")
}
BiocManager::install("Biostrings", ask = FALSE)
}
library(Biostrings, quietly = TRUE)
# Set up the PATH environment variable for BLAST
current_path <- Sys.getenv("PATH")
new_path <- paste(current_path, "/Users/heekukpark/miniconda3/bin", sep=":")# which blastn
Sys.setenv(PATH = new_path)
# Verify BLAST installation
if (system("blastn -version", intern = F) == 0) {
cat("BLAST is correctly installed and found in PATH.\n")
} else {
stop("BLAST not found. Please check your BLAST installation and PATH.")
}
# Read sequences
sequences_df <- read.csv(asvsTable, row.names = 1, check.names = FALSE)
dna_strings <- DNAStringSet(rownames(sequences_df))
names(dna_strings) <- paste("Sequence", seq_along(dna_strings), sep="_")
# Setup output directory
output_dir <- "1_out/blast"
if (!dir.exists(output_dir)) {
dir.create(output_dir, recursive = TRUE)
}
# Run BLAST for each sequence
blast_results <- sapply(names(dna_strings), function(seq_name) {
fasta_file <- file.path(output_dir, paste0(seq_name, ".fasta"))
output_file <- file.path(output_dir, paste0(seq_name, "_blast.xml"))
writeXStringSet(dna_strings[seq_name], fasta_file)
system2("blastn", args = c("-query", fasta_file, "-db", blastDB, "-out", output_file, "-outfmt", "5"))
file.remove(fasta_file) # Clean up FASTA file immediately after use
return(output_file)
})
sapply(names(dna_strings), function(seq_name) {
fasta_file_path <- file.path(output_dir, paste0(seq_name, ".fasta"))
file.remove(fasta_file_path)
})
# Check results
print(blast_results)
library(XML)
# Parse BLAST results
parse_blast_results <- function(file) {
# Load and parse the XML file
doc <- try(xmlParse(file), silent = TRUE)
if (inherits(doc, "try-error")) {
cat("Failed to parse XML file:", file, "\n")
return(list(Hit_Number = NA, Hit_Definition = NA))
}
# Get iterations
iterations <- getNodeSet(doc, "//BlastOutput_iterations/Iteration")
if (length(iterations) == 0) {
cat("No iterations found in file:", file, "\n")
return(list(Hit_Number = NA, Hit_Definition = NA))
}
# Check for hits
hits <- getNodeSet(iterations[[1]], "Iteration_hits/Hit")
if (length(hits) == 0) {
cat("No hits found in iteration of file:", file, "\n")
return(list(Hit_Number = NA, Hit_Definition = NA))
}
# Extract the first hit's number and definition
first_hit <- hits[[1]]
hit_num <- xmlValue(getNodeSet(first_hit, "Hit_num")[[1]])
hit_def <- xmlValue(getNodeSet(first_hit, "Hit_def")[[1]])
return(list(Hit_Number = hit_num, Hit_Definition = hit_def))
}
# Apply the function to each result file
parsed_results <- lapply(blast_results, parse_blast_results)
# Convert results to a data frame
results_df <- as.data.frame(do.call(rbind, parsed_results))
# If sequences_df has the same order and number of sequences as blast_results
#sequences_df$Hit_Number <- results_df$Hit_Number
sequences_df$Hit_Definition <- results_df$Hit_Definition
# Assuming Hit_Number and Hit_Definition might still be lists, convert them to character vectors
#sequences_df$Hit_Number <- sapply(sequences_df$Hit_Number, function(x) ifelse(is.null(x), NA, x))
sequences_df$Hit_Definition <- sapply(sequences_df$Hit_Definition, function(x) ifelse(is.null(x), NA, x))
# Split each string by spaces and select the first two words
sequences_df$Hit_Definition <- sapply(strsplit(sequences_df$Hit_Definition, " "), function(words) {
paste(words[1:2], collapse=" ")
})
# Print the modified column to verify the changes
print(sequences_df$Hit_Definition)
# Write results to CSV
write.csv(sequences_df, sprintf("1_out/%s.updated_sequences_with_blast_results.%s.csv",project, format(Sys.Date(), "%y%m%d")), row.names = TRUE)
cat("Results have been successfully saved to 1_out/updated_sequences_with_blast_results.csv\n")
}
#===== Input 2
Go_blastASVs(project, asvsTable="1_out/Nick.240412.psTotab.asvTable.csv", blastDB="/Users/heekukpark/DB/blastDB/16S_ribosomal_RNA")
# build package
setwd("~/Dropbox/04_Scripts/R_source/Gotools")
devtools::build()
devtools::document()

metadata_df <- metadata_df[ common_samples, , drop = FALSE]
## ---- 3) 상대 abundance → 정수 (옵션) ----
detect_abundance_type <- function(physeq) {
lib_sizes <- sample_sums(physeq); mean_lib <- mean(lib_sizes)
if (abs(mean_lib - 100) < 0.1) "relative" else if (mean_lib > 1000) "absolute" else "unknown"
}
if (detect_abundance_type(psIN) == "relative" && isTRUE(transform)) {
total_reads <- median(sample_sums(psIN))
message(sprintf("[INFO] Relative abundance detected. Multiplying by %s and rounding.", total_reads))
otu_mat <- round(otu_mat * total_reads)
}
## ---- 4) metadata 전처리 & orders ----
rn <- rownames(metadata_df)
metadata_df <- as.data.frame(lapply(metadata_df, function(x) {
if (is.character(x)) {
if (all(grepl("^[-+]?[0-9]*\\.?[0-9]+$", x[!is.na(x)]))) as.numeric(x) else as.factor(x)
} else if (is.logical(x)) as.factor(x) else x
}), stringsAsFactors = FALSE)
rownames(metadata_df) <- rn
metadata_df <- metadata_df[colnames(otu_mat), , drop = FALSE]
if (!is.null(orders)) {
for (fx in fixed_effects) {
if (fx %in% names(orders) && fx %in% colnames(metadata_df)) {
levs <- orders[[fx]]
cur  <- as.factor(metadata_df[[fx]])
keep <- levs[levs %in% levels(cur)]
if (length(keep) >= 2) metadata_df[[fx]] <- factor(cur, levels = keep)
}
}
}
## ---- 5) 체크 ----
missing_fx <- setdiff(fixed_effects, colnames(metadata_df))
if (length(missing_fx)) stop("[ERROR] Missing fixed_effects: ", paste(missing_fx, collapse=", "))
if (!is.null(random_effects)) {
missing_re <- setdiff(random_effects, colnames(metadata_df))
if (length(missing_re)) {
warning("Drop random_effects: ", paste(missing_re, collapse=", "))
random_effects <- setdiff(random_effects, missing_re)
}
}
## ---- 6) MaAsLin2 실행 (기본 plot ON) ----
fit <- Maaslin2::Maaslin2(
input_data     = otu_mat,
input_metadata = metadata_df,
output         = out_dir,
fixed_effects  = fixed_effects,
random_effects = random_effects,
normalization  = normalization,
transform      = "LOG",
plot_heatmap   = TRUE,
plot_scatter   = TRUE
)
message("[INFO] Done. Plots (box/scatter/heatmap) in: ", out_dir)
invisible(fit)
}
for (mvar in c("V2","V3")) {
sdf <- data.frame(sample_data(ps2))
keep1 <- sdf[[mvar]] == "Yes"
ps2.sel <- prune_samples(keep1 & !is.na(keep1), ps2)
ps2.sel <- prune_taxa(taxa_sums(ps2.sel) > 0, ps2.sel)
for (set in c("Set1","Set2")) {
sdf2 <- data.frame(sample_data(ps2.sel))
keep2 <- sdf2[["Sets"]] == set
ps2.sel.sel <- prune_samples(keep2 & !is.na(keep2), ps2.sel)
ps2.sel.sel <- prune_taxa(taxa_sums(ps2.sel.sel) > 0, ps2.sel.sel)
Go_Maaslin2(
psIN          = ps2.sel.sel,
project       = project,
fixed_effects = "TreatmentGroup1",
random_effects= "StudyID",
orders        = orders,
tag           = paste(mvar, set, sep="_")   # <<< 출력폴더 이름 자동 지정
)
}
}
for (mvar in c("V2","V3")) {
sdf <- data.frame(sample_data(ps2))
keep1 <- sdf[[mvar]] == "Yes"
ps2.sel <- prune_samples(keep1 & !is.na(keep1), ps2)
ps2.sel <- prune_taxa(taxa_sums(ps2.sel) > 0, ps2.sel)
for (set in c("Set1","Set2")) {
sdf2 <- data.frame(sample_data(ps2.sel))
keep2 <- sdf2[["Sets"]] == set
ps2.sel.sel <- prune_samples(keep2 & !is.na(keep2), ps2.sel)
ps2.sel.sel <- prune_taxa(taxa_sums(ps2.sel.sel) > 0, ps2.sel.sel)
Go_Maaslin2(
psIN          = ps2.sel.sel,
project       = project,
fixed_effects = "TreatmentGroup1",
random_effects= "StudyID",
orders        = orders,
tag           = paste(mvar, set, sep="_")   # <<< 출력폴더 이름 자동 지정
)
}
}
Go_Maaslin2 <- function(psIN,
project,
fixed_effects,
random_effects = NULL,
normalization = "TSS",   # "TSS","CLR","CSS","NONE"
transform = TRUE,        # 상대 abundance면 median depth 곱해 정수화
orders = NULL,           # 예: list(Timepoint=c("Pre","Post"))
out_dir = NULL) {
## ---- 0) 패키지 로드/설치 ----
if (!requireNamespace("Maaslin2", quietly = TRUE)) {
if (!requireNamespace("BiocManager", quietly = TRUE)) install.packages("BiocManager")
BiocManager::install("Maaslin2")
}
for (pkg in c("methods","stats")) {
if (!requireNamespace(pkg, quietly = TRUE)) stop(sprintf("Install %s first.", pkg))
}
suppressPackageStartupMessages({
library(Maaslin2)
})
## ---- 1) 출력 경로 ----
out_root  <- file.path(sprintf("%s_%s", project, format(Sys.Date(), "%y%m%d")))
if (!file_test("-d", out_root)) dir.create(out_root)
out_table <- file.path(out_root, "table"); if (!file_test("-d", out_table)) dir.create(out_table)
out_DA    <- file.path(out_table, "MaAsLin2"); if (!file_test("-d", out_DA)) dir.create(out_DA, recursive = TRUE)
if (is.null(out_dir)) out_dir <- out_DA
message(sprintf("[INFO] MaAsLin2 outputs -> %s", out_dir))
## ---- 2) 데이터 추출/정렬 ----
metadata_df <- as.data.frame(sample_data(psIN))
# OTU: features x samples
otu_mat <- if (taxa_are_rows(psIN)) as.matrix(otu_table(psIN)) else t(as.matrix(otu_table(psIN)))
otu_mat <- as.data.frame(otu_mat)
common_samples <- intersect(colnames(otu_mat), rownames(metadata_df))
if (length(common_samples) < 2) stop("[ERROR] Not enough overlapping samples between OTU and metadata.")
otu_mat     <- otu_mat[, common_samples, drop = FALSE]
metadata_df <- metadata_df[ common_samples, , drop = FALSE]
## ---- 3) 상대 abundance → 정수 (옵션) ----
detect_abundance_type <- function(physeq) {
lib_sizes <- sample_sums(physeq)
mean_lib <- mean(lib_sizes)
if (abs(mean_lib - 100) < 0.1) "relative" else if (mean_lib > 1000) "absolute" else "unknown"
}
if (detect_abundance_type(psIN) == "relative" && isTRUE(transform)) {
total_reads <- median(sample_sums(psIN))
message(sprintf("[INFO] Relative abundance detected. Multiplying by median depth (%s) and rounding.", total_reads))
otu_mat <- round(otu_mat * total_reads)
} else {
message("[INFO] Skip integer transform (absolute data or transform=FALSE).")
}
## ---- 4) metadata 전처리 & orders 적용 ----
# rownames 유지
rn <- rownames(metadata_df)
# 문자 → factor 또는 numeric으로 강제 (리스트/데이터프레임 열 방지)
metadata_df <- as.data.frame(lapply(metadata_df, function(x) {
if (is.character(x)) {
# 숫자문자면 numeric, 아니면 factor
if (all(grepl("^[-+]?[0-9]*\\.?[0-9]+$", x[!is.na(x)]))) as.numeric(x) else as.factor(x)
} else if (is.logical(x)) {
as.factor(x)
} else {
x
}
}), stringsAsFactors = FALSE)
rownames(metadata_df) <- rn
# orders 적용 (해당 key가 fixed_effects에 있고, 실제 메타데이터에 존재할 때만)
if (!is.null(orders) && length(orders) > 0 && length(fixed_effects) > 0) {
for (fx in fixed_effects) {
if (fx %in% names(orders) && fx %in% colnames(metadata_df)) {
levs <- orders[[fx]]
# 실제 존재하는 레벨만 남겨 순서 지정
if (is.factor(metadata_df[[fx]]) || is.character(metadata_df[[fx]])) {
cur <- as.factor(metadata_df[[fx]])
keep <- levs[levs %in% levels(cur)]
if (length(keep) >= 2) metadata_df[[fx]] <- factor(cur, levels = keep)
}
}
}
}
# rownames가 꼭 있어야 함 (MaAsLin2 요구사항)
if (is.null(rownames(metadata_df)) || any(is.na(rownames(metadata_df)))) {
stop("[ERROR] metadata must have valid rownames matching sample IDs.")
}
# 순서 맞추기(중복 방지)
metadata_df <- metadata_df[colnames(otu_mat), , drop = FALSE]
## ---- 5) 효과 항목 확인 ----
if (missing(fixed_effects) || is.null(fixed_effects) || length(fixed_effects) == 0) {
stop("[ERROR] fixed_effects must be provided.")
}
missing_fx <- setdiff(fixed_effects, colnames(metadata_df))
if (length(missing_fx)) stop("[ERROR] Missing fixed_effects in metadata: ", paste(missing_fx, collapse=", "))
if (!is.null(random_effects)) {
missing_re <- setdiff(random_effects, colnames(metadata_df))
if (length(missing_re)) {
warning("[WARN] Some random_effects not found and will be dropped: ", paste(missing_re, collapse=", "))
random_effects <- setdiff(random_effects, missing_re)
if (length(random_effects) == 0) random_effects <- NULL
}
}
## ---- 6) MaAsLin2 실행 (기본 플롯 ON: heatmap/scatter/boxplot) ----
# MaAsLin2 기본 플롯:
# - 연속형 메타: scatter
# - 범주형 메타: boxplot
# - heatmap: 유의 feature
fit <- Maaslin2::Maaslin2(
input_data     = otu_mat,         # feature x sample
input_metadata = metadata_df,     # sample x variables (rownames = sample IDs)
output         = out_dir,
fixed_effects  = fixed_effects,
random_effects = random_effects,
normalization  = normalization,   # "TSS","CLR","CSS","NONE"
transform      = "LOG",           # 내부 변환(로그)
plot_heatmap   = TRUE,
plot_scatter   = TRUE
)
message("[INFO] MaAsLin2 finished. Check default plots (box/scatter/heatmap) in: ", out_dir)
invisible(fit)
}
variation <- c("TreatmentGroup1")
for (mvar in c("V2","V3")) {
# 1) mvar == "Yes" 필터
sdf <- data.frame(sample_data(ps2))
keep1 <- sdf[[mvar]] == "Yes"
ps2.sel <- prune_samples(keep1 & !is.na(keep1), ps2)
ps2.sel <- prune_taxa(taxa_sums(ps2.sel) > 0, ps2.sel)  # 빈 taxa 제거(옵션)
for (set in c("Set1","Set2")) {
# 2) Sets == set 필터 (반드시 ps2.sel 기준!)
sdf2 <- data.frame(sample_data(ps2.sel))
keep2 <- sdf2[["Sets"]] == set
ps2.sel.sel <- prune_samples(keep2 & !is.na(keep2), ps2.sel)
ps2.sel.sel <- prune_taxa(taxa_sums(ps2.sel.sel) > 0, ps2.sel.sel)
# 3) 변환 후 그리기
Go_Maaslin2(ps2.sel.sel,  project, fixed_effects = variation,random_effects = "StudyID",orders = orders)
}
} # 잡하는 것이 아무 것도 없구만.
Go_Maaslin2 <- function(psIN,
project,
fixed_effects,
random_effects = NULL,
normalization = "TSS",
transform = TRUE,
orders = NULL,
out_dir = NULL,
tag = NULL) {   # <<< 추가: loop별 태그 (예: V2_Set1)
## ---- 0) 패키지 로드/설치 ----
if (!requireNamespace("Maaslin2", quietly = TRUE)) {
if (!requireNamespace("BiocManager", quietly = TRUE)) install.packages("BiocManager")
BiocManager::install("Maaslin2")
}
suppressPackageStartupMessages(library(Maaslin2))
## ---- 1) 출력 경로 ----
out_root  <- file.path(sprintf("%s_%s", project, format(Sys.Date(), "%y%m%d")))
if (!file_test("-d", out_root)) dir.create(out_root)
out_table <- file.path(out_root, "table"); if (!file_test("-d", out_table)) dir.create(out_table)
out_DA    <- file.path(out_table, "MaAsLin2"); if (!file_test("-d", out_DA)) dir.create(out_DA, recursive = TRUE)
# tag 있으면 붙여서 별도 폴더 생성
if (is.null(out_dir)) {
if (!is.null(tag)) {
out_dir <- file.path(out_DA, paste0("MaAsLin2.", tag))
} else {
out_dir <- out_DA
}
}
if (!file_test("-d", out_dir)) dir.create(out_dir, recursive = TRUE)
message(sprintf("[INFO] MaAsLin2 outputs -> %s", out_dir))
## ---- 2) 데이터 추출/정렬 ----
metadata_df <- as.data.frame(sample_data(psIN))
otu_mat <- if (taxa_are_rows(psIN)) as.matrix(otu_table(psIN)) else t(as.matrix(otu_table(psIN)))
otu_mat <- as.data.frame(otu_mat)
common_samples <- intersect(colnames(otu_mat), rownames(metadata_df))
if (length(common_samples) < 2) stop("[ERROR] Not enough overlapping samples.")
otu_mat     <- otu_mat[, common_samples, drop = FALSE]
metadata_df <- metadata_df[ common_samples, , drop = FALSE]
## ---- 3) 상대 abundance → 정수 (옵션) ----
detect_abundance_type <- function(physeq) {
lib_sizes <- sample_sums(physeq); mean_lib <- mean(lib_sizes)
if (abs(mean_lib - 100) < 0.1) "relative" else if (mean_lib > 1000) "absolute" else "unknown"
}
if (detect_abundance_type(psIN) == "relative" && isTRUE(transform)) {
total_reads <- median(sample_sums(psIN))
message(sprintf("[INFO] Relative abundance detected. Multiplying by %s and rounding.", total_reads))
otu_mat <- round(otu_mat * total_reads)
}
## ---- 4) metadata 전처리 & orders ----
rn <- rownames(metadata_df)
metadata_df <- as.data.frame(lapply(metadata_df, function(x) {
if (is.character(x)) {
if (all(grepl("^[-+]?[0-9]*\\.?[0-9]+$", x[!is.na(x)]))) as.numeric(x) else as.factor(x)
} else if (is.logical(x)) as.factor(x) else x
}), stringsAsFactors = FALSE)
rownames(metadata_df) <- rn
metadata_df <- metadata_df[colnames(otu_mat), , drop = FALSE]
if (!is.null(orders)) {
for (fx in fixed_effects) {
if (fx %in% names(orders) && fx %in% colnames(metadata_df)) {
levs <- orders[[fx]]
cur  <- as.factor(metadata_df[[fx]])
keep <- levs[levs %in% levels(cur)]
if (length(keep) >= 2) metadata_df[[fx]] <- factor(cur, levels = keep)
}
}
}
## ---- 5) 체크 ----
missing_fx <- setdiff(fixed_effects, colnames(metadata_df))
if (length(missing_fx)) stop("[ERROR] Missing fixed_effects: ", paste(missing_fx, collapse=", "))
if (!is.null(random_effects)) {
missing_re <- setdiff(random_effects, colnames(metadata_df))
if (length(missing_re)) {
warning("Drop random_effects: ", paste(missing_re, collapse=", "))
random_effects <- setdiff(random_effects, missing_re)
}
}
## ---- 6) MaAsLin2 실행 (기본 plot ON) ----
fit <- Maaslin2::Maaslin2(
input_data     = otu_mat,
input_metadata = metadata_df,
output         = out_dir,
fixed_effects  = fixed_effects,
random_effects = random_effects,
normalization  = normalization,
transform      = "LOG",
plot_heatmap   = TRUE,
plot_scatter   = TRUE
)
message("[INFO] Done. Plots (box/scatter/heatmap) in: ", out_dir)
invisible(fit)
}
for (mvar in c("V2","V3")) {
sdf <- data.frame(sample_data(ps2))
keep1 <- sdf[[mvar]] == "Yes"
ps2.sel <- prune_samples(keep1 & !is.na(keep1), ps2)
ps2.sel <- prune_taxa(taxa_sums(ps2.sel) > 0, ps2.sel)
for (set in c("Set1","Set2")) {
sdf2 <- data.frame(sample_data(ps2.sel))
keep2 <- sdf2[["Sets"]] == set
ps2.sel.sel <- prune_samples(keep2 & !is.na(keep2), ps2.sel)
ps2.sel.sel <- prune_taxa(taxa_sums(ps2.sel.sel) > 0, ps2.sel.sel)
Go_Maaslin2(
psIN          = ps2.sel.sel,
project       = project,
fixed_effects = "TreatmentGroup1",
random_effects= "StudyID",
orders        = orders,
tag           = paste(mvar, set, sep="_")   # <<< 출력폴더 이름 자동 지정
)
}
}
Go_Maaslin2 <- function(psIN,
project,
fixed_effects,
random_effects = NULL,
normalization = "TSS",   # "TSS","CLR","CSS","NONE"
transform = TRUE,        # 상대 abundance면 median depth 곱해 정수화
orders = NULL,           # 예: list(Timepoint=c("Pre","Post"))
out_dir = NULL,
name = NULL) {           # <- 새 옵션 추가
## ---- 0) 패키지 로드/설치 ----
if (!requireNamespace("Maaslin2", quietly = TRUE)) {
if (!requireNamespace("BiocManager", quietly = TRUE)) install.packages("BiocManager")
BiocManager::install("Maaslin2")
}
for (pkg in c("methods","stats")) {
if (!requireNamespace(pkg, quietly = TRUE)) stop(sprintf("Install %s first.", pkg))
}
suppressPackageStartupMessages({
library(Maaslin2)
})
## ---- 1) 출력 경로 ----
out_root  <- file.path(sprintf("%s_%s", project, format(Sys.Date(), "%y%m%d")))
if (!file_test("-d", out_root)) dir.create(out_root)
out_table <- file.path(out_root, "table"); if (!file_test("-d", out_table)) dir.create(out_table)
out_DA    <- file.path(out_table, "MaAsLin2"); if (!file_test("-d", out_DA)) dir.create(out_DA, recursive = TRUE)
if (is.null(name)) {
subdir <- "MaAsLin2.Base"
} else {
subdir <- sprintf("MaAsLin2.%s", name)
}
out_dir_final <- file.path(out_DA, subdir)
if (!file_test("-d", out_dir_final)) dir.create(out_dir_final, recursive = TRUE)
if (is.null(out_dir)) out_dir <- out_dir_final
message(sprintf("[INFO] MaAsLin2 outputs -> %s", out_dir))
## ---- 2) 데이터 추출/정렬 ----
metadata_df <- as.data.frame(sample_data(psIN))
otu_mat <- if (taxa_are_rows(psIN)) as.matrix(otu_table(psIN)) else t(as.matrix(otu_table(psIN)))
otu_mat <- as.data.frame(otu_mat)
common_samples <- intersect(colnames(otu_mat), rownames(metadata_df))
if (length(common_samples) < 2) stop("[ERROR] Not enough overlapping samples between OTU and metadata.")
otu_mat     <- otu_mat[, common_samples, drop = FALSE]
metadata_df <- metadata_df[ common_samples, , drop = FALSE]
## ---- 3) 상대 abundance → 정수 (옵션) ----
detect_abundance_type <- function(physeq) {
lib_sizes <- sample_sums(physeq)
mean_lib <- mean(lib_sizes)
if (abs(mean_lib - 100) < 0.1) "relative" else if (mean_lib > 1000) "absolute" else "unknown"
}
if (detect_abundance_type(psIN) == "relative" && isTRUE(transform)) {
total_reads <- median(sample_sums(psIN))
message(sprintf("[INFO] Relative abundance detected. Multiplying by median depth (%s) and rounding.", total_reads))
otu_mat <- round(otu_mat * total_reads)
} else {
message("[INFO] Skip integer transform (absolute data or transform=FALSE).")
}
## ---- 4) metadata 전처리 & orders 적용 ----
rn <- rownames(metadata_df)
metadata_df <- as.data.frame(lapply(metadata_df, function(x) {
if (is.character(x)) {
if (all(grepl("^[-+]?[0-9]*\\.?[0-9]+$", x[!is.na(x)]))) as.numeric(x) else as.factor(x)
} else if (is.logical(x)) {
as.factor(x)
} else {
x
}
}), stringsAsFactors = FALSE)
rownames(metadata_df) <- rn
if (!is.null(orders) && length(orders) > 0 && length(fixed_effects) > 0) {
for (fx in fixed_effects) {
if (fx %in% names(orders) && fx %in% colnames(metadata_df)) {
levs <- orders[[fx]]
if (is.factor(metadata_df[[fx]]) || is.character(metadata_df[[fx]])) {
cur <- as.factor(metadata_df[[fx]])
keep <- levs[levs %in% levels(cur)]
if (length(keep) >= 2) metadata_df[[fx]] <- factor(cur, levels = keep)
}
}
}
}
if (is.null(rownames(metadata_df)) || any(is.na(rownames(metadata_df)))) {
stop("[ERROR] metadata must have valid rownames matching sample IDs.")
}
metadata_df <- metadata_df[colnames(otu_mat), , drop = FALSE]
## ---- 5) 효과 항목 확인 ----
missing_fx <- setdiff(fixed_effects, colnames(metadata_df))
if (length(missing_fx)) stop("[ERROR] Missing fixed_effects in metadata: ", paste(missing_fx, collapse=", "))
if (!is.null(random_effects)) {
missing_re <- setdiff(random_effects, colnames(metadata_df))
if (length(missing_re)) {
warning("[WARN] Some random_effects not found and will be dropped: ", paste(missing_re, collapse=", "))
random_effects <- setdiff(random_effects, missing_re)
if (length(random_effects) == 0) random_effects <- NULL
}
}
## ---- 6) MaAsLin2 실행 ----
fit <- Maaslin2::Maaslin2(
input_data     = otu_mat,
input_metadata = metadata_df,
output         = out_dir,
fixed_effects  = fixed_effects,
random_effects = random_effects,
normalization  = normalization,
transform      = "LOG",
plot_heatmap   = TRUE,
plot_scatter   = TRUE
)
message("[INFO] MaAsLin2 finished. Plots/results saved in: ", out_dir)
invisible(fit)
}
for (mvar in c("V2","V3")) {
sdf <- data.frame(sample_data(ps2))
keep1 <- sdf[[mvar]] == "Yes"
ps2.sel <- prune_samples(keep1 & !is.na(keep1), ps2)
ps2.sel <- prune_taxa(taxa_sums(ps2.sel) > 0, ps2.sel)
for (set in c("Set1","Set2")) {
sdf2 <- data.frame(sample_data(ps2.sel))
keep2 <- sdf2[["Sets"]] == set
ps2.sel.sel <- prune_samples(keep2 & !is.na(keep2), ps2.sel)
ps2.sel.sel <- prune_taxa(taxa_sums(ps2.sel.sel) > 0, ps2.sel.sel)
Go_Maaslin2(
psIN          = ps2.sel.sel,
project       = project,
fixed_effects = "TreatmentGroup1",
random_effects= "StudyID",
orders        = orders,
name           = paste(mvar, set, sep="_")   # <<< 출력폴더 이름 자동 지정
)
}
}
for (mvar in c("V2","V3")) {
sdf <- data.frame(sample_data(ps2))
keep1 <- sdf[[mvar]] == "Yes"
ps2.sel <- prune_samples(keep1 & !is.na(keep1), ps2)
ps2.sel <- prune_taxa(taxa_sums(ps2.sel) > 0, ps2.sel)
for (set in c("Set1","Set2")) {
sdf2 <- data.frame(sample_data(ps2.sel))
keep2 <- sdf2[["Sets"]] == set
ps2.sel.sel <- prune_samples(keep2 & !is.na(keep2), ps2.sel)
ps2.sel.sel <- prune_taxa(taxa_sums(ps2.sel.sel) > 0, ps2.sel.sel)
Go_Maaslin2(
psIN          = ps2.sel.sel,
project       = project,
fixed_effects = "TreatmentGroup1",
random_effects= NULL,
orders        = orders,
name           = paste(mvar, set, sep="_")   # <<< 출력폴더 이름 자동 지정
)
}
}
for (mvar in c("V2","V3")) {
sdf <- data.frame(sample_data(ps2))
keep1 <- sdf[[mvar]] == "Yes"
ps2.sel <- prune_samples(keep1 & !is.na(keep1), ps2)
ps2.sel <- prune_taxa(taxa_sums(ps2.sel) > 0, ps2.sel)
for (set in c("Set1","Set2")) {
sdf2 <- data.frame(sample_data(ps2.sel))
keep2 <- sdf2[["Sets"]] == set
ps2.sel.sel <- prune_samples(keep2 & !is.na(keep2), ps2.sel)
ps2.sel.sel <- prune_taxa(taxa_sums(ps2.sel.sel) > 0, ps2.sel.sel)
Go_Maaslin2(
psIN          = ps2.sel.sel,
project       = project,
fixed_effects = "TreatmentGroup1",
random_effects= "StudyID",
orders        = orders,
name           = paste(mvar, set, sep="_")   # <<< 출력폴더 이름 자동 지정
)
}
}
setwd("~/Dropbox/04_Scripts/R_source/Gotools")
devtools::build()
devtools::document()

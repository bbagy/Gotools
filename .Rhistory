Shannon = .data[[shannon_col]],
raw_ev  = .data[[event_col]]
) %>%
filter(is.finite(time), is.finite(Shannon), time > 0)
# caselabel → status(1=이벤트, 0=검열) 자동 변환
if (is.numeric(df$raw_ev)) {
# 1/0 형태 가정
df$status <- ifelse(df$raw_ev > 0, 1L, 0L)
} else {
df$status <- ifelse(toupper(trimws(df$raw_ev)) %in% toupper(event_positive), 1L, 0L)
}
# Shannon tertile 그룹(Low/Middle/High)
df <- df %>%
mutate(Shannon.3 = cut_number(Shannon, 3, labels = c("Low","Middle","High"))) %>%
droplevels()
# KM 적합
fit <- survfit(Surv(time, status) ~ Shannon.3, data = df)
# 플롯(예시 색상: Low=초록, Middle=파랑, High=빨강)
p <- ggsurvplot(
fit, data = df,
conf.int      = TRUE,
pval          = TRUE,
risk.table    = FALSE,
xlab          = "Days",
ylab          = "Event-Free Probability (No ACR)",
legend.title  = "Strata",
legend.labs   = c("Shannon.3=Low","Shannon.3=Middle","Shannon.3=High"),
break.time.by = 50,
xlim          = c(0, max(df$time, na.rm = TRUE)),
palette       = c("#2ca02c","#1f77b4","#ff7f0e")
)
# p값 위치 커스텀(원하면 주석 해제)
# p$plot <- p$plot +
#   annotate("text", x = 40, y = 0.30, label = "Log-rank", hjust = 0)
print(p)
invisible(list(fit = fit, data = df, plot = p))
}
Go_kmplot_from_adiv(adiv)
Go_kmplot_from_adiv <- function(adiv,
event_col = "caselabel",
time_col  = "sample_days_post_tx",
shannon_col = "Shannon",
event_positive = c("Case","ACR","Yes","1")) {
# 필요한 패키지 자동 설치 & 로드
pkgs <- c("dplyr", "survival", "survminer", "ggplot2")
for (p in pkgs) {
if (!requireNamespace(p, quietly = TRUE)) {
install.packages(p, dependencies = TRUE)
}
suppressPackageStartupMessages(library(p, character.only = TRUE))
}
df <- adiv %>%
transmute(
time    = .data[[time_col]],
Shannon = .data[[shannon_col]],
raw_ev  = .data[[event_col]]
) %>%
filter(is.finite(time), is.finite(Shannon), time > 0)
# caselabel → status (1=event, 0=censor)
if (is.numeric(df$raw_ev)) {
df$status <- ifelse(df$raw_ev > 0, 1L, 0L)
} else {
df$status <- ifelse(toupper(trimws(df$raw_ev)) %in% toupper(event_positive), 1L, 0L)
}
# Shannon tertile 그룹
df <- df %>%
mutate(Shannon.3 = cut_number(Shannon, 3, labels = c("Low","Middle","High"))) %>%
droplevels()
# KM 적합
fit <- survfit(Surv(time, status) ~ Shannon.3, data = df)
# Kaplan–Meier 플롯
p <- ggsurvplot(
fit, data = df,
conf.int      = TRUE,
pval          = TRUE,
risk.table    = FALSE,
xlab          = "Days",
ylab          = "Event-Free Probability (No ACR)",
legend.title  = "Strata",
legend.labs   = c("Shannon.3=Low","Shannon.3=Middle","Shannon.3=High"),
break.time.by = 50,
xlim          = c(0, max(df$time, na.rm = TRUE)),
palette       = c("#2ca02c","#1f77b4","#ff7f0e")
)
print(p)
invisible(list(fit = fit, data = df, plot = p))
}
Go_kmplot_from_adiv(adiv)
Go_kmplot <- function(df,
project      = "KMplot",
event_col    = "caselabel",
time_col     = "time",
feature_col  = "feature",
name         = NULL,
event_positive = c("Case","ACR","Yes","1"),
n_group      = 3,
group_labels = NULL,
height       = 5,
width        = 6) {
# 필요한 패키지 자동 설치 & 로드
pkgs <- c("dplyr", "survival", "survminer", "ggplot2")
for (p in pkgs) {
if (!requireNamespace(p, quietly = TRUE)) {
install.packages(p, dependencies = TRUE)
}
suppressPackageStartupMessages(library(p, character.only = TRUE))
}
# 출력 경로 준비 (항상 날짜 폴더 + pdf 폴더 생성)
out <- file.path(sprintf("%s_%s", project, format(Sys.Date(), "%y%m%d")))
if (!file_test("-d", out)) dir.create(out, recursive = TRUE)
out_path <- file.path(sprintf("%s_%s/pdf", project, format(Sys.Date(), "%y%m%d")))
if (!file_test("-d", out_path)) dir.create(out_path, recursive = TRUE)
# 데이터 준비
df <- df %>%
dplyr::transmute(
time    = .data[[time_col]],
feature = .data[[feature_col]],
raw_ev  = .data[[event_col]]
) %>%
dplyr::filter(is.finite(time), is.finite(feature), time > 0)
# 이벤트 → status (1=이벤트, 0=검열)
if (is.numeric(df$raw_ev)) {
df$status <- ifelse(df$raw_ev > 0, 1L, 0L)
} else {
df$status <- ifelse(toupper(trimws(df$raw_ev)) %in% toupper(event_positive), 1L, 0L)
}
# feature 기반 그룹 (분위수 n_group개)
if (is.null(group_labels)) group_labels <- paste0("G", seq_len(n_group))
df <- df %>%
dplyr::mutate(feature_group = ggplot2::cut_number(feature, n_group, labels = group_labels)) %>%
droplevels()
# KM 적합
fit <- survfit(Surv(time, status) ~ feature_group, data = df)
# KM 플롯
p <- ggsurvplot(
fit, data = df,
conf.int      = TRUE,
pval          = TRUE,
risk.table    = FALSE,
xlab          = "Days",
ylab          = sprintf("Event-Free Probability by %s", feature_col),
legend.title  = feature_col,
legend.labs   = paste0(feature_col, "=", levels(df$feature_group)),
break.time.by = 50,
xlim          = c(0, max(df$time, na.rm = TRUE)),
palette       = c("#2ca02c", "#1f77b4", "#ff7f0e")[seq_len(n_group)]
)
# 파일명: feature, project, (name 옵션), 날짜
pdf_file <- sprintf(
"%s/Kaplan.Meier.plot.%s.%s.%s%s.pdf",
out_path,
feature_col,
project,
ifelse(is.null(name), "", paste0(name, ".")),
format(Sys.Date(), "%y%m%d")
)
# 항상 PDF 저장
grDevices::pdf(pdf_file, height = height, width = width)
print(p$plot)
grDevices::dev.off()
message("PDF saved: ", pdf_file)
# 화면에도 보여주기 원하면 아래 줄 유지
print(p)
invisible(list(fit = fit, data = df, plot = p, pdf = pdf_file))
}
Go_kmplot(
df = adiv,
project = ptoject,
event_col = "caselabel",
time_col = "sample_days_post_tx",
feature_col = "Shannon",
name = "Tertile3",
n_group = 3,
group_labels = c("Low", "Middle", "High"),
height = 5,
width = 6
)
ptoject
# ----- Input ------#
project<-"Yael_Rejection"
setwd("~/cumc.columbia.edu/Uhlemann Lab - Microbiome Core/1_Projects/MAPS_Yae_PLT/2_Analysis/20230626_Yael_merged/")
Go_kmplot(
df = adiv,
project = ptoject,
event_col = "caselabel",
time_col = "sample_days_post_tx",
feature_col = "Shannon",
name = "Tertile3",
n_group = 3,
group_labels = c("Low", "Middle", "High"),
height = 5,
width = 6
)
Go_kmplot(
df = adiv,
project = project,
event_col = "caselabel",
time_col = "sample_days_post_tx",
feature_col = "Shannon",
name = "Tertile3",
n_group = 3,
group_labels = c("Low", "Middle", "High"),
height = 5,
width = 6
)
Go_kmplot(
df = adiv,
project = project,
event_col = "caselabel",
time_col = "sample_days_post_tx",
feature_col = "Shannon",
name = NULL,
n_group = 4,
group_labels = c("Low", "Middle", "High","very High"),
height = 5,
width = 6
)
Go_kmplot(
df = adiv,
project = project,
event_col = "caselabel",
time_col = "sample_days_post_tx",
feature_col = "Shannon",
name = NULL,
n_group = 5,
group_labels = c("verylow","Low", "Middle", "High","very High"),
height = 5,
width = 6
)
Go_kmplot(df = adiv,project = project,
event_col = "caselabel",time_col = "sample_days_post_tx",feature_col = "Shannon",
n_group = 3, group_labels = c("Low", "Middle", "High"),
name = NULL,height = 5,width = 6)
Go_kmplot <- function(df,
project      = "KMplot",
event_col    = "caselabel",
time_col     = "time",
feature_col  = "feature",
name         = NULL,
event_positive = c("Case","ACR","Yes","1"),
n_group      = 3,
group_labels = NULL,
height       = 5,
width        = 6) {
# 필요한 패키지 자동 설치 & 로드
pkgs <- c("dplyr", "survival", "survminer", "ggplot2")
for (p in pkgs) {
if (!requireNamespace(p, quietly = TRUE)) {
install.packages(p, dependencies = TRUE)
}
suppressPackageStartupMessages(library(p, character.only = TRUE))
}
# 출력 경로 준비 (항상 날짜 폴더 + pdf 폴더 생성)
out <- file.path(sprintf("%s_%s", project, format(Sys.Date(), "%y%m%d")))
if (!file_test("-d", out)) dir.create(out, recursive = TRUE)
out_path <- file.path(sprintf("%s_%s/pdf", project, format(Sys.Date(), "%y%m%d")))
if (!file_test("-d", out_path)) dir.create(out_path, recursive = TRUE)
# 데이터 준비
df <- df %>%
dplyr::transmute(
time    = .data[[time_col]],
feature = .data[[feature_col]],
raw_ev  = .data[[event_col]]
) %>%
dplyr::filter(is.finite(time), is.finite(feature), time > 0)
# 이벤트 → status (1=이벤트, 0=검열)
if (is.numeric(df$raw_ev)) {
df$status <- ifelse(df$raw_ev > 0, 1L, 0L)
} else {
df$status <- ifelse(toupper(trimws(df$raw_ev)) %in% toupper(event_positive), 1L, 0L)
}
# feature 기반 그룹 (분위수 n_group개)
if (is.null(group_labels)) group_labels <- paste0("G", seq_len(n_group))
df <- df %>%
dplyr::mutate(feature_group = ggplot2::cut_number(feature, n_group, labels = group_labels)) %>%
droplevels()
# KM 적합
fit <- survfit(Surv(time, status) ~ feature_group, data = df)
# KM 플롯
p <- ggsurvplot(
fit, data = df,
conf.int      = TRUE,
pval          = TRUE,
risk.table    = FALSE,
xlab          = "Days",
ylab          = sprintf("Event-Free Probability by %s", event_col),
legend.title  = feature_col,
legend.labs   = paste0(feature_col, "=", levels(df$feature_group)),
break.time.by = 50,
xlim          = c(0, max(df$time, na.rm = TRUE)),
palette       = c("#2ca02c", "#1f77b4", "#ff7f0e")[seq_len(n_group)]
)
# 파일명: feature, project, (name 옵션), 날짜
pdf_file <- sprintf(
"%s/Kaplan.Meier.plot.%s.%s.%s%s.pdf",
out_path,
feature_col,
project,
ifelse(is.null(name), "", paste0(name, ".")),
format(Sys.Date(), "%y%m%d")
)
# 항상 PDF 저장
grDevices::pdf(pdf_file, height = height, width = width)
print(p$plot)
grDevices::dev.off()
message("PDF saved: ", pdf_file)
# 화면에도 보여주기 원하면 아래 줄 유지
print(p)
invisible(list(fit = fit, data = df, plot = p, pdf = pdf_file))
}
Go_kmplot(df = adiv,project = project,
event_col = "caselabel",time_col = "sample_days_post_tx",feature_col = "Shannon",
n_group = 3, group_labels = c("Low", "Middle", "High"),
name = NULL,height = 5,width = 6)
Go_kmplot <- function(df,
project      = "KMplot",
event_col    = "caselabel",
time_col     = "time",
feature_col  = "feature",
name         = NULL,
event_positive = c("Case","ACR","Yes","1"),
n_group      = 3,
group_labels = NULL,
height       = 5,
width        = 6) {
# 필요한 패키지 자동 설치 & 로드
pkgs <- c("dplyr", "survival", "survminer", "ggplot2")
for (p in pkgs) {
if (!requireNamespace(p, quietly = TRUE)) {
install.packages(p, dependencies = TRUE)
}
suppressPackageStartupMessages(library(p, character.only = TRUE))
}
# 출력 경로 (항상 생성)
out <- file.path(sprintf("%s_%s", project, format(Sys.Date(), "%y%m%d")))
if (!file_test("-d", out)) dir.create(out, recursive = TRUE)
out_path <- file.path(sprintf("%s_%s/pdf", project, format(Sys.Date(), "%y%m%d")))
if (!file_test("-d", out_path)) dir.create(out_path, recursive = TRUE)
# 데이터 준비
df <- df %>%
dplyr::transmute(
time    = .data[[time_col]],
feature = .data[[feature_col]],
raw_ev  = .data[[event_col]]
) %>%
dplyr::filter(is.finite(time), is.finite(feature), time > 0)
# 이벤트 → status (1=이벤트, 0=검열)
if (is.numeric(df$raw_ev)) {
df$status <- ifelse(df$raw_ev > 0, 1L, 0L)
} else {
df$status <- ifelse(toupper(trimws(df$raw_ev)) %in% toupper(event_positive), 1L, 0L)
}
# feature 기반 그룹 (분위수 n_group개)
if (is.null(group_labels)) group_labels <- paste0("G", seq_len(n_group))
df <- df %>%
dplyr::mutate(feature_group = ggplot2::cut_number(feature, n_group, labels = group_labels)) %>%
droplevels()
# KM 적합
fit <- survfit(Surv(time, status) ~ feature_group, data = df)
# Log-rank p 계산 및 라벨 포맷
lr  <- survdiff(Surv(time, status) ~ feature_group, data = df)
df_chi <- length(lr$n) - 1
p_raw  <- tryCatch(1 - pchisq(lr$chisq, df = df_chi), error = function(e) NA_real_)
p_txt  <- if (is.na(p_raw)) {
"Log-rank p = NA"
} else if (p_raw < 1e-4) {
"Log-rank p < 0.0001"
} else {
paste0("Log-rank p = ", signif(p_raw, 3))
}
# 팔레트(그룹 수에 맞춰 확장)
base_pal <- c("#2ca02c", "#1f77b4", "#ff7f0e", "#9467bd", "#8c564b", "#e377c2")
pal <- base_pal[seq_len(min(n_group, length(base_pal)))]
# KM 플롯
p <- ggsurvplot(
fit, data = df,
conf.int      = TRUE,
pval          = p_txt,                 # <- 여기!
risk.table    = FALSE,
xlab          = "Days",
ylab          = sprintf("Event-Free Probability (No %s)", event_col),
legend.title  = sprintf("%s groups", feature_col),
legend.labs   = paste0(feature_col, "=", levels(df$feature_group)),
break.time.by = 50,
xlim          = c(0, max(df$time, na.rm = TRUE)),
palette       = pal
)
# 파일명: feature, project, (name), 날짜
pdf_file <- sprintf(
"%s/Kaplan.Meier.plot.%s.%s.%s%s.pdf",
out_path,
feature_col,
project,
ifelse(is.null(name), "", paste0(name, ".")),
format(Sys.Date(), "%y%m%d")
)
# 항상 PDF 저장
grDevices::pdf(pdf_file, height = height, width = width)
print(p$plot)
grDevices::dev.off()
message("PDF saved: ", pdf_file)
# 화면 출력(원하면 유지)
print(p)
invisible(list(fit = fit, data = df, plot = p, pdf = pdf_file, p_value = p_raw))
}
Go_kmplot(df = adiv,project = project,
event_col = "caselabel",time_col = "sample_days_post_tx",feature_col = "Shannon",
n_group = 3, group_labels = c("Low", "Middle", "High"),
name = NULL,height = 5,width = 6)
Go_kmplot(df = adiv,project = project,
event_col = "caselabel",event_positive = "Control",time_col = "sample_days_post_tx",feature_col = "Shannon",
n_group = 3, group_labels = c("Low", "Middle", "High"),
name = NULL,height = 5,width = 6)
Go_kmplot <- function(df,
project      = "KMplot",
event_col    = "caselabel",
time_col     = "time",
feature_col  = "feature",
name         = NULL,
event_positive = c("Case","ACR","Yes","1"),
n_group      = 3,
group_labels = NULL,
height       = 5,
width        = 6) {
# 필요한 패키지 자동 설치 & 로드
pkgs <- c("dplyr", "survival", "survminer", "ggplot2")
for (p in pkgs) {
if (!requireNamespace(p, quietly = TRUE)) {
install.packages(p, dependencies = TRUE)
}
suppressPackageStartupMessages(library(p, character.only = TRUE))
}
# 출력 경로 (항상 생성)
out <- file.path(sprintf("%s_%s", project, format(Sys.Date(), "%y%m%d")))
if (!file_test("-d", out)) dir.create(out, recursive = TRUE)
out_path <- file.path(sprintf("%s_%s/pdf", project, format(Sys.Date(), "%y%m%d")))
if (!file_test("-d", out_path)) dir.create(out_path, recursive = TRUE)
# 데이터 준비
df <- df %>%
dplyr::transmute(
time    = .data[[time_col]],
feature = .data[[feature_col]],
raw_ev  = .data[[event_col]]
) %>%
dplyr::filter(is.finite(time), is.finite(feature), time > 0)
# 이벤트 → status (1=이벤트, 0=검열)
if (is.numeric(df$raw_ev)) {
df$status <- ifelse(df$raw_ev > 0, 1L, 0L)
} else {
df$status <- ifelse(toupper(trimws(df$raw_ev)) %in% toupper(event_positive), 1L, 0L)
}
# feature 기반 그룹 (분위수 n_group개)
if (is.null(group_labels)) group_labels <- paste0("G", seq_len(n_group))
df <- df %>%
dplyr::mutate(feature_group = ggplot2::cut_number(feature, n_group, labels = group_labels)) %>%
droplevels()
# KM 적합
fit <- survfit(Surv(time, status) ~ feature_group, data = df)
# Log-rank p 계산 및 라벨 포맷
lr  <- survdiff(Surv(time, status) ~ feature_group, data = df)
df_chi <- length(lr$n) - 1
p_raw  <- tryCatch(1 - pchisq(lr$chisq, df = df_chi), error = function(e) NA_real_)
p_txt  <- if (is.na(p_raw)) {
"Log-rank p = NA"
} else if (p_raw < 1e-4) {
"Log-rank p < 0.0001"
} else {
paste0("Log-rank p = ", signif(p_raw, 3))
}
# 팔레트(그룹 수에 맞춰 확장)
base_pal <- c("#2ca02c", "#1f77b4", "#ff7f0e", "#9467bd", "#8c564b", "#e377c2")
pal <- base_pal[seq_len(min(n_group, length(base_pal)))]
# KM 플롯
p <- ggsurvplot(
fit, data = df,
conf.int      = TRUE,
pval          = p_txt,                 # <- 여기!
risk.table    = FALSE,
xlab          = "Days",
ylab          = sprintf("Event-Free Probability (%s)", event_col),
legend.title  = sprintf("%s groups", feature_col),
legend.labs   = paste0(feature_col, "=", levels(df$feature_group)),
break.time.by = 50,
xlim          = c(0, max(df$time, na.rm = TRUE)),
palette       = pal
)
# 파일명: feature, project, (name), 날짜
pdf_file <- sprintf(
"%s/Kaplan.Meier.plot.%s.%s.%s%s.pdf",
out_path,
feature_col,
project,
ifelse(is.null(name), "", paste0(name, ".")),
format(Sys.Date(), "%y%m%d")
)
# 항상 PDF 저장
grDevices::pdf(pdf_file, height = height, width = width)
print(p$plot)
grDevices::dev.off()
message("PDF saved: ", pdf_file)
# 화면 출력(원하면 유지)
print(p)
invisible(list(fit = fit, data = df, plot = p, pdf = pdf_file, p_value = p_raw))
}
Go_kmplot(df = adiv,project = project,
event_col = "caselabel",event_positive = "Case",time_col = "sample_days_post_tx",feature_col = "Shannon",
n_group = 3, group_labels = c("Low", "Middle", "High"),
name = NULL,height = 5,width = 6)
# build package
setwd("~/Dropbox/04_Scripts/R_source/Gotools")
devtools::build() # generate Gotools_0.0.0.9000.tar.gz
devtools::document()

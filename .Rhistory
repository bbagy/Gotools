html_content <- gsub("\\{\\{contact_email\\}\\}", contact_email, html_content)
# Print the modified HTML content into the R Markdown document
cat(html_content, sep = "\n")
contact_email<-c("ds4057@cumc.columbia.edu")
# Read the external HTML file content
html_content <- readLines("/Users/heekukpark/Dropbox/04_scripts/R_source/Gotool_html/email_form.html", warn = FALSE)
# Replace placeholders with actual R variables
contact_email <- contact_email
html_content <- gsub("\\{\\{project_name\\}\\}", project_name, html_content)
html_content <- gsub("\\{\\{contact_email\\}\\}", contact_email, html_content)
# Print the modified HTML content into the R Markdown document
cat(html_content, sep = "\n")
# Join the email addresses with a comma if there are two
contact_email_joined <- paste(contact_email, collapse = ",")
contact_email_joined
expInfo <- Go_expInfo(kit_number = 6, prep_number = 1, spikein_number = 2, authorName1="Heekuk Park",authorName2="Dwayne Seeram");expInfo
contact_email<- expInfo$contact_email
# Join the email addresses with a comma if there are two
contact_email_joined <- paste(contact_email, collapse = ",")
contact_email_joined
# Your existing code to replace placeholders
html_content <- readLines("/Users/heekukpark/Dropbox/04_scripts/R_source/Gotool_html/email_form.html", warn = FALSE)
html_content <- gsub("\\{\\{project_name\\}\\}", project_name, html_content)
html_content <- gsub("\\{\\{contact_email\\}\\}", contact_email_joined, html_content)
# Print the modified HTML content
cat(html_content, sep = "\n")
expInfo <- Go_expInfo(kit_number = 6, prep_number = 1, spikein_number = 2, authorName1="Heekuk Park",authorName2=NULL);expInfo
contact_email<- expInfo$contact_email
# Join the email addresses with a comma if there are two
contact_email_joined <- paste(contact_email, collapse = ",")
# Your existing code to replace placeholders
html_content <- readLines("/Users/heekukpark/Dropbox/04_scripts/R_source/Gotool_html/email_form.html", warn = FALSE)
html_content <- gsub("\\{\\{project_name\\}\\}", project_name, html_content)
html_content <- gsub("\\{\\{contact_email\\}\\}", contact_email_joined, html_content)
# Print the modified HTML content
cat(html_content, sep = "\n")
library(rmarkdown)
# Path to your R Markdown template
rmd_template_path <- "/Users/heekukpark/Dropbox/04_scripts/R_source/R_storage/1_R_History/2024/FB_Inuline/20240410_Summary_report_tem_v1.Rmd"
# Render the Rmd file to an HTML output
render(input = rmd_template_path, output_format = "html_document")
library(rmarkdown)
# Path to your R Markdown template
rmd_template_path <- "/Users/heekukpark/Dropbox/04_scripts/R_source/R_storage/1_R_History/2024/FB_Inuline/20240410_Summary_report_tem_v1.Rmd"
# Render the Rmd file to an HTML output
render(input = rmd_template_path, output_format = "html_document")
# Path to your R Markdown template
rmd_template_path <- "/Users/heekukpark/Dropbox/04_scripts/R_source/R_storage/1_R_History/2024/FB_Inuline/20240410_Summary_report_tem_v1.Rmd"
# Render the Rmd file to an HTML output
render(input = rmd_template_path, output_format = "html_document")
#######################################################
#---------     Core general Rmd starter      ---------#
#######################################################
# rm(list=ls())
# list.files()
#===== Read Go_tools
# devtools::install_github("bbagy/Gotools", force=T)
library("Gotools")
Gotool_dependency()
devtools::install_github("bbagy/Gotools", force=T)
library("Gotools")
#######################################################
#---------     Core general Rmd starter      ---------#
#######################################################
# rm(list=ls())
# list.files()
#===== Read Go_tools
# devtools::install_github("bbagy/Gotools", force=T)
library("Gotools")
devtools::install_github("bbagy/Gotools", force=T)
library("Gotools")
devtools::install_github("bbagy/Gotools", force=T)
library("Gotools")
Gotool_dependency()
devtools::install_github("bbagy/Gotools",force = TRUE)
library("Gotools")
Gotool_dependency()
# ----- Libraries and functions ------#
#source("~/Dropbox/04_Scripts/R_source/microbiome2/Go_tools/Go_tools.4.0.2.R")
#===== Read Go_tools
# devtools::install_github("bbagy/Gotools",force = TRUE)
library("Gotools")
Gotool_dependency()
# ----- Input ------#
project<-"Thomas_Humann"
setwd("~/cumc.columbia.edu/Uhlemann Lab - Microbiome Core/1_Projects/MAPS_Tao_Leu/2_Analysis/20250125_MG_AVITI/")
Go_function2ps(tabPath = "1_out/humann3_final_out/kegg-orthology/stratified_out/5_merged_genefamilies_uniref90_ko_kegg-orthology_cpm_unstratified_filtered.txt",
project = project,
func.type = "Humann",
name = "KO")
Go_function2ps(tabPath = "1_out/humann3_final_out/pathabundance_stratified_out/merged_pathabundance_unstratified.txt",
project = project,
func.type = "Humann",
name = "KO")
Go_function2ps(tabPath = "1_out/humann3_final_out/kegg-orthology/stratified_out/5_merged_genefamilies_uniref90_ko_kegg-orthology_cpm_unstratified_filtered.txt",
project = project,
func.type = "Humann",
name = NULL)
Go_function2ps(tabPath = "1_out/humann3_final_out/pathabundance_stratified_out/merged_pathabundance_unstratified.txt",
project = project,
func.type = "Humann",
name = NULL)
Go_function2ps <- function(tabPath, project = NULL, func.type, name = NULL) {
library(phyloseq)
library(stringr)
# Read tab
func.tab <- try(read.delim(tabPath, header = TRUE, sep = "\t", row.names = 1, check.names = FALSE), silent = TRUE)
if (inherits(func.tab, "try-error")) {
print("Error reading the table. Check the file path and format.")
return(NULL)
}
# Identify data type and perform necessary preprocessing
if (tolower(func.type) %in% c("picrust", "picrust2", "picrustt2")) {
func.type <- "PICRUSt2"
} else if (tolower(func.type) %in% c("humann", "humann2", "humann3")) {
func.type <- "Humann3"
# HUMAnN 데이터 전처리: 특정 단어 포함된 행 제거
func.tab <- func.tab[!grepl("ribosomal protein|UNGROUPED|unclassified|UNMAPPED|UNINTEGRATED", rownames(func.tab)), ]
# KO ID와 설명을 분리
func.tab1 <- data.frame(do.call(rbind, str_split(rownames(func.tab), ": ", n = 2)))
colnames(func.tab1) <- c("ID", "Description")
# Description이 없는 경우 처리
func.tab1$Description[is.na(func.tab1$Description)] <- "Unknown"
# 원본 데이터에 병합
func.tab <- cbind(func.tab1, func.tab)
rownames(func.tab) <- func.tab$ID
} else {
print("Please define the data type: PICRUSt2 or Humann3")
return(NULL)
}
# Define number of samples and split data frame
NumOfSample <- ncol(func.tab)
otu <- as.matrix(func.tab[, 3:NumOfSample])
tax <- as.matrix(func.tab[, 1:2])
rownames(otu) <- tax[, 1]
rownames(tax) <- tax[, 1]
# Define KEGG or pathway
if (any(grepl("^K\\d{5}", tax[, 1]))) {
colnames(tax) <- c("KO", "KO.des")
func <- "KEGG"
} else if (any(grepl("^PWY", tax[, 1]))) {
colnames(tax) <- c("pathway", "path.des")
func <- "pathway"
} else {
func <- NULL
}
# Merge phyloseq
ps <- phyloseq(otu_table(otu, taxa_are_rows = TRUE), tax_table(tax))
print(ps)
# Saving file
rds <- file.path("2_rds")
if (!dir.exists(rds)) dir.create(rds, recursive = TRUE)
saveRDS(ps, file.path(rds, sprintf("ps.%s.%s%s%s%s.rds",
func.type,
ifelse(is.null(func), "", paste0(func, ".")),
ifelse(is.null(project), "", paste0(project, ".")),
ifelse(is.null(name), "", paste0(name, ".")),
format(Sys.Date(), "%y%m%d"))))
}
Go_function2ps(tabPath = "1_out/humann3_final_out/kegg-orthology/stratified_out/5_merged_genefamilies_uniref90_ko_kegg-orthology_cpm_unstratified_filtered.txt",
project = project,
func.type = "Humann",
name = NULL)
Go_function2ps(tabPath = "1_out/humann3_final_out/pathabundance_stratified_out/merged_pathabundance_unstratified.txt",
project = project,
func.type = "Humann",
name = NULL)
Go_function2ps(tabPath = "1_out/humann3_final_out/kegg-orthology/stratified_out/5_merged_genefamilies_uniref90_ko_kegg-orthology_cpm_unstratified_filtered.txt",
project = project,
func.type = "Humann",
name = NULL)
Go_function2ps(tabPath = "1_out/humann3_final_out/pathabundance_stratified_out/merged_pathabundance_unstratified.txt",
project = project,
func.type = "Humann",
name = NULL)
ps.gene <-readRDS("2_rds/ps.Humann3.KEGG.Thomas_Humann.250204.rds");ps.gene
ps.path <-readRDS("2_rds/ps.Humann3.pathway.Thomas_Humann.250204.rds");ps.path
ps.gene <-readRDS("2_rds/ps.Humann3.KEGG.Thomas_Humann.250204.rds");ps.gene
ps.path <-readRDS("2_rds/ps.Humann3.pathway.Thomas_Humann.250204.rds");ps.path
ps.path.fil <- Go_filter(ps.path, cutoff= 0.0013) # 150 정도
ps.gene.fil <- Go_filter(ps.gene, cutoff= 0.0013) # 150 정도
Go_emptyMap(psIN = ps.gene, project)
Go_sampleIDmerge <- function(psIN, map, mergeBy){
#===== out dir
out <- file.path("2_rds")
if(!file_test("-d", out)) dir.create(out)
if (class(map) == "character"){
mapIN <- read.csv(map,row.names=1,check.names=FALSE)
}else{
mapIN <- map
}
ps1 <- merge_phyloseq(ps, sample_data(data.frame(mapIN)));ps1
ps1.mergedbysample <- merge_samples(ps1, group = factor(as.character(unlist(sample_data(ps1)[,mergeBy]))));ps1.mergedbysample
saveRDS(ps1.mergedbysample, sprintf("%s/ps.mergedbystudyID.%s.%s.rds", out,project, format(Sys.Date(), "%y%m%d")))
}
Go_sampleIDmerge <- function(psIN, map, mergeBy, name=NULL){
#===== out dir
out <- file.path("2_rds")
if(!file_test("-d", out)) dir.create(out)
if (class(map) == "character"){
mapIN <- read.csv(map,row.names=1,check.names=FALSE)
}else{
mapIN <- map
}
ps1 <- merge_phyloseq(ps, sample_data(data.frame(mapIN)));ps1
ps1.mergedbysample <- merge_samples(ps1, group = factor(as.character(unlist(sample_data(ps1)[,mergeBy]))));ps1.mergedbysample
saveRDS(ps1.mergedbysample, sprintf("%s/ps.mergedbystudyID.%s.%s%s.rds", out,project,
ifelse(is.null(name), "", paste(name, ".", sep = "")),
format(Sys.Date(), "%y%m%d")))
}
Go_sampleIDmerge <- function(psIN, mapIN, mergeBy, name=NULL){
#===== out dir
out <- file.path("2_rds")
if(!file_test("-d", out)) dir.create(out)
if (class(map) == "character"){
mapIN <- read.csv(mapIN,row.names=1,check.names=FALSE)
}else{
mapIN <- map
}
psIN1 <- merge_phyloseq(psIN, sample_data(data.frame(mapIN)));ps1
ps1.mergedbysample <- merge_samples(psIN1, group = factor(as.character(unlist(sample_data(ps1)[,mergeBy]))));ps1.mergedbysample
sample_data(ps1.mergedbysample) <- NULL
saveRDS(ps1.mergedbysample, sprintf("%s/ps.mergedbystudyID.%s.%s%s.rds", out,project,
ifelse(is.null(name), "", paste(name, ".", sep = "")),
format(Sys.Date(), "%y%m%d")))
return(ps1.mergedbysample)
}
Go_sampleIDmerge(psIN=ps.gene, mapIN = "3_map/250205.Thomas_Humann_merging_mapping.csv",mergeBy = "StudyID",name = "gene")
mapIN = "3_map/250205.Thomas_Humann_merging_mapping.csv"
if (class(map) == "character"){
mapIN <- read.csv(mapIN,row.names=1,check.names=FALSE)
}else{
mapIN <- map
}
mapIN
class(map) == "character"
if (class(mapIN) == "character"){
mapIN <- read.csv(mapIN,row.names=1,check.names=FALSE)
}else{
mapIN <- map
}
if (class(mapIN) == "character"){
mapIN <- read.csv(mapIN,row.names=1,check.names=FALSE)
}else{
mapIN <- psIN
}
if (class(mapIN) == "character"){
mapIN <- read.csv(mapIN,row.names=1,check.names=FALSE)
}else{
mapIN <- mapIN
}
mapIN
class(mapIN)
psIN
#===== out dir
out <- file.path("2_rds")
if(!file_test("-d", out)) dir.create(out)
if (class(mapIN) == "character"){
mapinput <- read.csv(map,row.names=1,check.names=FALSE)
}else{
mapinput <- map
}
mapInput
Go_sampleIDmerge <- function(psIN, map, mergeBy, name=NULL){
#===== out dir
out <- file.path("2_rds")
if(!file_test("-d", out)) dir.create(out)
if (class(map) == "character"){
mapinput <- read.csv(map,row.names=1,check.names=FALSE)
}else{
mapinput <- map
}
psIN1 <- merge_phyloseq(psIN, sample_data(data.frame(mapinput)));ps1
ps1.mergedbysample <- merge_samples(psIN1, group = factor(as.character(unlist(sample_data(psIN1)[,mergeBy]))));ps1.mergedbysample
sample_data(ps1.mergedbysample) <- NULL
saveRDS(ps1.mergedbysample, sprintf("%s/ps.mergedbystudyID.%s.%s%s.rds", out,project,
ifelse(is.null(name), "", paste(name, ".", sep = "")),
format(Sys.Date(), "%y%m%d")))
return(ps1.mergedbysample)
}
Go_sampleIDmerge(psIN=ps.gene, map = "3_map/250205.Thomas_Humann_merging_mapping.csv",mergeBy = "StudyID",name = "gene")
Go_sampleIDmerge <- function(psIN, map, mergeBy, name=NULL){
#===== out dir
out <- file.path("2_rds")
if(!file_test("-d", out)) dir.create(out)
if (class(map) == "character"){
mapinput <- read.csv(map,row.names=1,check.names=FALSE)
}else{
mapinput <- map
}
psIN1 <- merge_phyloseq(psIN, sample_data(data.frame(mapinput)))
ps1.mergedbysample <- merge_samples(psIN1, group = factor(as.character(unlist(sample_data(psIN1)[,mergeBy]))));ps1.mergedbysample
sample_data(ps1.mergedbysample) <- NULL
saveRDS(ps1.mergedbysample, sprintf("%s/ps.mergedbystudyID.%s.%s%s.rds", out,project,
ifelse(is.null(name), "", paste(name, ".", sep = "")),
format(Sys.Date(), "%y%m%d")))
return(ps1.mergedbysample)
}
Go_sampleIDmerge(psIN=ps.gene, map = "3_map/250205.Thomas_Humann_merging_mapping.csv",mergeBy = "StudyID",name = "gene")
psIN=ps.gene
map = "3_map/250205.Thomas_Humann_merging_mapping.csv"
mergeBy = "StudyID"
name = "gene"
#===== out dir
out <- file.path("2_rds")
if(!file_test("-d", out)) dir.create(out)
if (class(map) == "character"){
mapinput <- read.csv(map,row.names=1,check.names=FALSE)
}else{
mapinput <- map
}
mapinput
psIN1 <- merge_phyloseq(psIN, sample_data(data.frame(mapinput)))
psIN1
ps1.mergedbysample <- merge_samples(psIN1, group = factor(as.character(unlist(sample_data(psIN1)[,mergeBy]))));ps1.mergedbysample
sample_data(ps1.mergedbysample) <- NULL
ps1.mergedbysample
#===== out dir
out <- file.path("2_rds")
if (!dir.exists(out)) dir.create(out)
# map 데이터 불러오기
if (is.character(map)){
mapinput <- read.csv(map, row.names=1, check.names=FALSE)
} else {
mapinput <- map
}
# phyloseq 객체와 sample metadata 병합
psIN1 <- merge_phyloseq(psIN, sample_data(mapinput))
# 샘플 ID 기준으로 병합
ps1.mergedbysample <- merge_samples(psIN1, group = sample_data(psIN1)[[mergeBy]])
ps1.mergedbysample
# 샘플 ID 기준으로 병합
ps1.mergedbysample <- merge_samples(psIN1, group = sample_data(psIN1)[[mergeBy]])
# 파일 저장
saveRDS(ps1.mergedbysample, sprintf("%s/ps.mergedbystudyID.%s.%s%s.rds",
out, project,
ifelse(is.null(name), "", paste(name, ".", sep = "")),
format(Sys.Date(), "%y%m%d")))
return(ps1.mergedbysample)
ps1.mergedbysample
Go_sampleIDmerge <- function(psIN, map, mergeBy, project, name=NULL){
#===== out dir
out <- file.path("2_rds")
if (!dir.exists(out)) dir.create(out)
# map 데이터 불러오기
if (is.character(map)){
mapinput <- read.csv(map, row.names=1, check.names=FALSE)
} else {
mapinput <- map
}
# phyloseq 객체와 sample metadata 병합
psIN1 <- merge_phyloseq(psIN, sample_data(mapinput))
# 샘플 ID 기준으로 병합
ps1.mergedbysample <- merge_samples(psIN1, group = sample_data(psIN1)[[mergeBy]])
# 파일 저장
saveRDS(ps1.mergedbysample, sprintf("%s/ps.mergedbystudyID.%s.%s%s.rds",
out, project,
ifelse(is.null(name), "", paste(name, ".", sep = "")),
format(Sys.Date(), "%y%m%d")))
return(ps1.mergedbysample)
}
Go_sampleIDmerge(psIN=ps.gene, map = "3_map/250205.Thomas_Humann_merging_mapping.csv", mergeBy = "StudyID", name = "gene")
Go_sampleIDmerge <- function(psIN, project, map, mergeBy, project, name=NULL){
#===== out dir
out <- file.path("2_rds")
if (!dir.exists(out)) dir.create(out)
# map 데이터 불러오기
if (is.character(map)){
mapinput <- read.csv(map, row.names=1, check.names=FALSE)
} else {
mapinput <- map
}
# phyloseq 객체와 sample metadata 병합
psIN1 <- merge_phyloseq(psIN, sample_data(mapinput))
# 샘플 ID 기준으로 병합
ps1.mergedbysample <- merge_samples(psIN1, group = sample_data(psIN1)[[mergeBy]])
# 파일 저장
saveRDS(ps1.mergedbysample, sprintf("%s/ps.mergedbystudyID.%s.%s%s.rds",
out, project,
ifelse(is.null(name), "", paste(name, ".", sep = "")),
format(Sys.Date(), "%y%m%d")))
return(ps1.mergedbysample)
}
Go_sampleIDmerge <- function(psIN, project, map, mergeBy, name=NULL){
#===== out dir
out <- file.path("2_rds")
if (!dir.exists(out)) dir.create(out)
# map 데이터 불러오기
if (is.character(map)){
mapinput <- read.csv(map, row.names=1, check.names=FALSE)
} else {
mapinput <- map
}
# phyloseq 객체와 sample metadata 병합
psIN1 <- merge_phyloseq(psIN, sample_data(mapinput))
# 샘플 ID 기준으로 병합
ps1.mergedbysample <- merge_samples(psIN1, group = sample_data(psIN1)[[mergeBy]])
# 파일 저장
saveRDS(ps1.mergedbysample, sprintf("%s/ps.mergedbystudyID.%s.%s%s.rds",
out, project,
ifelse(is.null(name), "", paste(name, ".", sep = "")),
format(Sys.Date(), "%y%m%d")))
return(ps1.mergedbysample)
}
Go_sampleIDmerge(psIN=ps.gene,  project,map = "3_map/250205.Thomas_Humann_merging_mapping.csv", mergeBy = "StudyID", name = "gene")
Go_sampleIDmerge <- function(psIN, map, mergeBy, project, name=NULL){
#===== out dir
out <- file.path("2_rds")
if (!dir.exists(out)) dir.create(out)
# map 데이터 불러오기
if (is.character(map)){
mapinput <- read.csv(map, row.names=1, check.names=FALSE)
} else {
mapinput <- map
}
# phyloseq 객체와 sample metadata 병합
psIN1 <- merge_phyloseq(psIN, sample_data(mapinput))
# 샘플 ID 기준으로 병합
ps1.mergedbysample <- merge_samples(psIN1, group = sample_data(psIN1)[[mergeBy]])
# sample_data 제거
sample_data(ps1.mergedbysample) <- NULL
# 파일 저장
saveRDS(ps1.mergedbysample, sprintf("%s/ps.mergedbystudyID.%s.%s%s.rds",
out, project,
ifelse(is.null(name), "", paste(name, ".", sep = "")),
format(Sys.Date(), "%y%m%d")))
return(ps1.mergedbysample)
}
Go_sampleIDmerge(psIN=ps.gene,  project,map = "3_map/250205.Thomas_Humann_merging_mapping.csv", mergeBy = "StudyID", name = "gene")
Go_sampleIDmerge <- function(psIN, map, mergeBy, project, name=NULL){
#===== out dir
out <- file.path("2_rds")
if (!dir.exists(out)) dir.create(out)
# map 데이터 불러오기
if (is.character(map)){
mapinput <- read.csv(map, row.names=1, check.names=FALSE)
} else {
mapinput <- map
}
# phyloseq 객체와 sample metadata 병합
psIN1 <- merge_phyloseq(psIN, sample_data(mapinput))
# 샘플 ID 기준으로 병합
ps1.mergedbysample <- merge_samples(psIN1, group = sample_data(psIN1)[[mergeBy]])
# sample_data 제거 전에 데이터 확인
print(ps1.mergedbysample)  # 구조 확인
# sample_data 제거
ps1.mergedbysample_no_sample <- phyloseq(otu_table(ps1.mergedbysample),
tax_table(ps1.mergedbysample))  # sample_data 제외
# 파일 저장
saveRDS(ps1.mergedbysample_no_sample, sprintf("%s/ps.mergedbystudyID.%s.%s%s.rds",
out, project,
ifelse(is.null(name), "", paste(name, ".", sep = "")),
format(Sys.Date(), "%y%m%d")))
return(ps1.mergedbysample_no_sample)
}
Go_sampleIDmerge(psIN=ps.gene,  project,map = "3_map/250205.Thomas_Humann_merging_mapping.csv", mergeBy = "StudyID", name = "gene")
Go_sampleIDmerge <- function(psIN, map, mergeBy, project, name=NULL){
#===== out dir
out <- file.path("2_rds")
if (!dir.exists(out)) dir.create(out)
# map 데이터 불러오기
if (is.character(map)){
mapinput <- read.csv(map, row.names=1, check.names=FALSE)
} else {
mapinput <- map
}
# phyloseq 객체와 sample metadata 병합
psIN1 <- merge_phyloseq(psIN, sample_data(mapinput))
# 샘플 ID 기준으로 병합
ps1.mergedbysample <- merge_samples(psIN1, group = sample_data(psIN1)[[mergeBy]])
# sample_data 제거 전에 데이터 확인
# print(ps1.mergedbysample)  # 구조 확인
# sample_data 제거
ps1.mergedbysample_no_sample <- phyloseq(otu_table(ps1.mergedbysample),
tax_table(ps1.mergedbysample))  # sample_data 제외
# 파일 저장
saveRDS(ps1.mergedbysample_no_sample, sprintf("%s/ps.mergedbystudyID.%s.%s%s.rds",
out, project,
ifelse(is.null(name), "", paste(name, ".", sep = "")),
format(Sys.Date(), "%y%m%d")))
return(ps1.mergedbysample_no_sample)
}
Go_sampleIDmerge(psIN=ps.gene,  project,map = "3_map/250205.Thomas_Humann_merging_mapping.csv", mergeBy = "StudyID", name = "gene")
Go_sampleIDmerge <- function(psIN, map, mergeBy, project, name=NULL){
# Prepare output directory
out <- file.path("2_rds")
if (!dir.exists(out)) dir.create(out)
# Load map data
if (is.character(map)){
mapinput <- read.csv(map, row.names=1, check.names=FALSE)
} else {
mapinput <- map
}
# Merge Phyloseq object with sample metadata
psIN1 <- merge_phyloseq(psIN, sample_data(mapinput))
# Merge samples based on the specified column
ps1.mergedbysample <- merge_samples(psIN1, group = sample_data(psIN1)[[mergeBy]])
# Remove sample data from the Phyloseq object
ps1.mergedbysample_no_sample <- phyloseq(otu_table(ps1.mergedbysample),
tax_table(ps1.mergedbysample))  # sample_data excluded
# Save the merged Phyloseq object as an RDS file
saveRDS(ps1.mergedbysample_no_sample, sprintf("%s/ps.mergedbystudyID.%s.%s%s.rds",
out, project,
ifelse(is.null(name), "", paste(name, ".", sep = "")),
format(Sys.Date(), "%y%m%d")))
return(ps1.mergedbysample_no_sample)
}
setwd("~/Dropbox/04_Scripts/R_source/Gotools")
devtools::build()
setwd("~/Dropbox/04_Scripts/R_source/Gotools")
devtools::build()
devtools::document()

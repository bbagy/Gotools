mutate(ACC_merge = as.character(ACCNO_MDR)) %>%
left_join(TRAC_sus, by = "ACC_merge", suffix = c("", "_TRACACC"))
# 어떤 sus 컬럼이 있는지 파악
sus_cols_now  <- names(x25_aug)[grepl("(IMIPENEM|MEROPENEM|ERTAPENEM).+_sus$", names(x25_aug), ignore.case = TRUE)]
sus_cols_trac <- paste0(sus_cols_now, "_TRACACC")
sus_cols_trac <- sus_cols_trac[sus_cols_trac %in% names(x25_aug)]
# NA인 곳에만 TRACACC 값 주입
for (i in seq_along(sus_cols_now)) {
dst <- sus_cols_now[i]
src <- sus_cols_trac[i]
if (!is.na(src) && src %in% names(x25_aug)) {
x25_aug[[dst]] <- dplyr::coalesce(x25_aug[[dst]], x25_aug[[src]])
}
}
is_resist <- function(x){
x <- toupper(as.character(x))
grepl("^(R|NS)$", x)
}
sus_cols <- names(x25_aug)[grepl("(IMIPENEM|MEROPENEM|ERTAPENEM).+_sus$", names(x25_aug), ignore.case = TRUE)]
x25_cre <- x25_aug %>%
mutate(
Notes_upper = toupper(Notes),
carb_any = case_when(
carbapenem_res == "Carbapenem-resistant" ~ "Carbapenem-resistant",
str_detect(Notes_upper, "CRE|KPC|NDM|OXA|IMP|VIM|CARBA") ~ "Carbapenem-resistant",
length(sus_cols) > 0 & rowSums(as.data.frame(lapply(across(all_of(sus_cols)), is_resist))) > 0 ~ "Carbapenem-resistant",
TRUE ~ NA_character_
)
)
x25_cre %>%
mutate(m = month(Date_collection_MDR_fixed, label = TRUE, abbr = TRUE),
carb = if_else(is.na(carb_any), "Not flagged", carb_any)) %>%
count(m, carb) %>%
arrange(m, carb) %>%
print()
###############################################################################
## Step 2: pipeline
###############################################################################
source("/Users/heekukpark/cumc.columbia.edu/Uhlemann Lab - Microbiome Core/1_Projects/MAPS_TRAC_MDR/4_Source_code/Go_trac_tool_set2_V1.R")
if(!is.null(dev.list())) dev.off()
rm(list=ls())
library(dplyr)
library(stringr)
library(readxl)
library(openxlsx)
library(tidyr)
library(lubridate)
setwd("/Volumes/DOM_ID$/LOWY_LAB/1_Current Lab Members/Dwayne/TRAC_MDR_New/7_Intermediates/")
MDR_all_newest <- readRDS("MDR_all_newest.rds")
#--- Read TRAC data (versions appear multiple times in the original code) ---
setwd("/Volumes/DOM_ID$/LOWY_LAB/1_Current Lab Members/Dwayne/Track_MDR/")
list.files("Monthly cleaned TRAC data",pattern = "\\.rds$")
Track_file <-"Monthly cleaned TRAC data/TRAC all susceptibility 2009.01.01 - 2025.08.05 WIDE.rds"
TRAC_data <- readRDS(Track_file) %>%
mutate(
organism_cleaned = toupper(organism_cleaned),
Date_collection_TRAC = as.Date(Date_collection_TRAC)
)
tail(TRAC_data$primary_time)
dim(TRAC_data)
colnames(TRAC_data)
tail(TRAC_data$ACCNO_2)
dim(TRAC_data)
#--- Read site crosswalk ---
Site_data <- read.xlsx("NEW_MDR_Merging/MDR Collection sites crosswalk.xlsx") %>%
mutate(Collection_site = toupper(Collection_site))
#--- Read POS data (positive cultures) ---
Pos_data <- readRDS("Monthly cleaned TRAC data/Positive cultures with encounter_id, demographics & susceptibility 2020-2025.rds")
tail(Pos_data$primary_time)
#--- Read Illumina Sequencing record ---
seq_data <- read.xlsx("NEW_MDR_merging/Sequencing_Record_Illumina_WGS.xlsx", sheet = 1, detectDates = TRUE) %>%
select(Isolate:`Notes.2`) %>%
distinct()
###############################################################################
## Step 2: pipeline
###############################################################################
source("/Users/heekukpark/cumc.columbia.edu/Uhlemann Lab - Microbiome Core/1_Projects/MAPS_TRAC_MDR/4_Source_code/Go_trac_tool_set2_V1.R")
###############################################################################
## Step 2: pipeline
###############################################################################
source("/Users/heekukpark/cumc.columbia.edu/Uhlemann Lab - Microbiome Core/1_Projects/MAPS_TRAC_MDR/4_Source_code/Go_trac_tool_set2_V2.R")
# Step 2 바로 전
MDR_all_newest <- MDR_all_newest %>%
mutate(
MRN = as.character(MRN),
ACCNO = as.character(ACCNO),
`MAPS#Organism Name` = toupper(`MAPS#Organism Name`),
`Collection Event#Date and Time` = suppressWarnings(as.Date(as.character(`Collection Event#Date and Time`))) %>%
coalesce(suppressWarnings(ymd(as.character(`Collection Event#Date and Time`)))) %>%
coalesce(suppressWarnings(mdy(as.character(`Collection Event#Date and Time`))))
)
TRAC_data <- TRAC_data %>%
mutate(
MRN_TRAC = as.character(MRN_TRAC),
ACCNO_TRAC = as.character(ACCNO_TRAC),
organism_cleaned = toupper(organism_cleaned),
Date_collection_TRAC = as.Date(Date_collection_TRAC)
)
# Use TRAC_data for the step2 merges, matching original code:
MDR_all_newest_fixed1 <- MDR_all_newest %>%
dplyr::rename(MRN_MDR = MRN, ACCNO_MDR = ACCNO) %>%
mutate(
`MAPS#Organism Name` = toupper(`MAPS#Organism Name`),
`Collection Event#Date and Time` = as.Date(`Collection Event#Date and Time`)
) %>%
full_join(
TRAC_data,
by = c("MRN_MDR" = "MRN_TRAC",
"ACCNO_MDR" = "ACCNO_TRAC",
"MAPS#Organism Name" = "organism_cleaned"),
relationship = "many-to-many"
) %>%
distinct() %>%
mutate(
`MAPS#Organism Name` = if_else(
!is.na(`MAPS#Organism Name`),
paste(
substr(`MAPS#Organism Name`, 1, 1),
tolower(substr(`MAPS#Organism Name`, 2, nchar(`MAPS#Organism Name`))),
sep = ""
),
NA_character_
),
Date_collection_MDR_fixed = case_when(
`Collection Event#Date and Time` != Date_collection_TRAC |
(is.na(`Collection Event#Date and Time`) & !is.na(Date_collection_TRAC) & !is.na(ID)) ~ Date_collection_TRAC,
!is.na(`Collection Event#Date and Time`) & is.na(Date_collection_TRAC) ~ `Collection Event#Date and Time`,
`Collection Event#Date and Time` == Date_collection_TRAC ~ Date_collection_TRAC,
TRUE ~ as.Date(NA)
)
) %>%
select(
`CP Short Title`:MRN_MDR, ACCNO_MDR, `Collection Event#Date and Time`,
Date_collection_MDR_fixed, Organism_name_common:`MAPS#Organism Name`,
CUIMC_clinical_isolate:`MAPS#Participant ID`,
Hospital_location, Collection_site, `Location#Position`,Notes,`MAPS#PI Name`
) %>%
filter(!is.na(ID))
MDR_all_newest_fixed2 <- MDR_all_newest_fixed1 %>%
full_join(
TRAC_data,
by = c(
"ACCNO_MDR" = "ACCNO_TRAC",
"MAPS#Organism Name" = "organism_cleaned",
"Date_collection_MDR_fixed" = "Date_collection_TRAC"
),
keep = TRUE
) %>%
select(
`CP Short Title`:`MAPS#Technician`,
contains("MRN_"),
contains("ACCNO"),
`Collection Event#Date and Time`,
contains("Date_collection_"),
Organism_name_common:`MAPS#Organism Name`,
organism_cleaned,
CUIMC_clinical_isolate,
`MAPS#Study Name`:`MAPS#Participant ID`,
Hospital_location,
Collection_site,
`Location#Position`,
Notes,
`MAPS#PI Name`,
Unifier_TRAC = Unifier
) %>%
distinct() %>%
mutate(
`MAPS#Organism Name` = if_else(
!is.na(`MAPS#Organism Name`),
paste(
substr(`MAPS#Organism Name`, 1, 1),
tolower(substr(`MAPS#Organism Name`, 2, nchar(`MAPS#Organism Name`))),
sep = ""
),
NA_character_
),
MRN_MDR_fixed = case_when(
MRN_MDR != MRN_TRAC |
(is.na(MRN_MDR) & !is.na(MRN_TRAC) & !is.na(ID)) ~ MRN_TRAC,
!is.na(MRN_MDR) & is.na(MRN_TRAC) ~ MRN_MDR,
MRN_MDR == MRN_TRAC ~ MRN_TRAC,
TRUE ~ NA_real_
)
) %>%
select(
`CP Short Title`:MRN_MDR,
MRN_MDR_fixed,
ACCNO_MDR,
`Collection Event#Date and Time`,
Date_collection_MDR_fixed,
Organism_name_common:`MAPS#Organism Name`,
CUIMC_clinical_isolate:`MAPS#Participant ID`,
Hospital_location,
Collection_site,
`Location#Position`,
Notes,
`MAPS#PI Name`
) %>%
distinct() %>%
filter(!is.na(ID))
MDR_all_newest_fixed2 <- MDR_all_newest_fixed1 %>%
full_join(
TRAC_data,
by = c(
"ACCNO_MDR" = "ACCNO_TRAC",
"MAPS#Organism Name" = "organism_cleaned",
"Date_collection_MDR_fixed" = "Date_collection_TRAC"
),
keep = TRUE
) %>%
select(
`CP Short Title`:`MAPS#Technician`,
contains("MRN_"),
contains("ACCNO"),
`Collection Event#Date and Time`,
contains("Date_collection_"),
Organism_name_common:`MAPS#Organism Name`,
organism_cleaned,
CUIMC_clinical_isolate,
`MAPS#Study Name`:`MAPS#Participant ID`,
Hospital_location,
Collection_site,
`Location#Position`,
Notes,
`MAPS#PI Name`,
Unifier_TRAC = Unifier
) %>%
distinct() %>%
mutate(
`MAPS#Organism Name` = if_else(
!is.na(`MAPS#Organism Name`),
paste(
substr(`MAPS#Organism Name`, 1, 1),
tolower(substr(`MAPS#Organism Name`, 2, nchar(`MAPS#Organism Name`))),
sep = ""
),
NA_character_
),
MRN_MDR_fixed = case_when(
MRN_MDR != MRN_TRAC |
(is.na(MRN_MDR) & !is.na(MRN_TRAC) & !is.na(ID)) ~ MRN_TRAC,
!is.na(MRN_MDR) & is.na(MRN_TRAC) ~ MRN_MDR,
MRN_MDR == MRN_TRAC ~ MRN_TRAC,
TRUE ~ NA_real_
)
) %>%
select(
`CP Short Title`:MRN_MDR,
MRN_MDR_fixed,
ACCNO_MDR,
`Collection Event#Date and Time`,
Date_collection_MDR_fixed,
Organism_name_common:`MAPS#Organism Name`,
CUIMC_clinical_isolate:`MAPS#Participant ID`,
Hospital_location,
Collection_site,
`Location#Position`,
Notes,
`MAPS#PI Name`
) %>%
distinct() %>%
filter(!is.na(ID))
MDR_all_newest_fixed2 <- MDR_all_newest_fixed1 %>%
full_join(
TRAC_data,
by = c(
"ACCNO_MDR" = "ACCNO_TRAC",
"MAPS#Organism Name" = "organism_cleaned",
"Date_collection_MDR_fixed" = "Date_collection_TRAC"
),
keep = TRUE
) %>%
select(
`CP Short Title`:`MAPS#Technician`,
contains("MRN_"),
contains("ACCNO"),
`Collection Event#Date and Time`,
contains("Date_collection_"),
Organism_name_common:`MAPS#Organism Name`,
organism_cleaned,
CUIMC_clinical_isolate,
`MAPS#Study Name`:`MAPS#Participant ID`,
Hospital_location,
Collection_site,
`Location#Position`,
Notes,
`MAPS#PI Name`,
Unifier_TRAC = Unifier
) %>%
distinct() %>%
mutate(
`MAPS#Organism Name` = if_else(
!is.na(`MAPS#Organism Name`),
paste(substr(`MAPS#Organism Name`, 1, 1),
tolower(substr(`MAPS#Organism Name`, 2, nchar(`MAPS#Organism Name`))),
sep = ""),
NA_character_
),
# >>> 추가: MRN 타입 통일 <<<
MRN_MDR  = as.character(MRN_MDR),
MRN_TRAC = as.character(MRN_TRAC),
# >>> NA는 character로, 타입 섞이지 않게 <<<
MRN_MDR_fixed = case_when(
MRN_MDR != MRN_TRAC |
(is.na(MRN_MDR) & !is.na(MRN_TRAC) & !is.na(ID)) ~ MRN_TRAC,
!is.na(MRN_MDR) & is.na(MRN_TRAC) ~ MRN_MDR,
MRN_MDR == MRN_TRAC ~ MRN_TRAC,
TRUE ~ NA_character_          # <- 여기 중요!
)
) %>%
select(
`CP Short Title`:MRN_MDR,
MRN_MDR_fixed,
ACCNO_MDR,
`Collection Event#Date and Time`,
Date_collection_MDR_fixed,
Organism_name_common:`MAPS#Organism Name`,
CUIMC_clinical_isolate:`MAPS#Participant ID`,
Hospital_location,
Collection_site,
`Location#Position`,
Notes,
`MAPS#PI Name`
) %>%
distinct() %>%
filter(!is.na(ID))
MDR_all_newest_add_source_loc <- MDR_all_newest_fixed2 %>%
dplyr::mutate(`MAPS#Organism Name` = toupper(`MAPS#Organism Name`)) %>%
dplyr::left_join(Site_data, by = "Collection_site") %>%
dplyr::left_join(
TRAC_data %>%
select(`Patient EMPI`, primary_time, ACCNO_TRAC, `Specimen Source`,
Specimen_group, clinical_location, organism_cleaned) %>%
mutate(Date_collection_TRAC = as.Date(primary_time)) %>%
distinct(),
by = c(
"MRN_MDR_fixed" = "Patient EMPI",
"ACCNO_MDR"     = "ACCNO_TRAC",
"Date_collection_MDR_fixed" = "Date_collection_TRAC",
"MAPS#Organism Name"        = "organism_cleaned"
)
) %>%
dplyr::rename(
Collection_site_MDR       = Collection_site,
Collection_site_group_MDR = Collection_site_group,
Collection_site_TRAC      = `Specimen Source`,
Collection_site_group_TRAC= Specimen_group,
Hospital_location_MDR     = Hospital_location,
Hospital_location_TRAC    = clinical_location
) %>%
mutate(
Collection_site_MDR = if_else(is.na(Collection_site_MDR), Collection_site_TRAC, Collection_site_MDR),
Collection_site_group_MDR = if_else(is.na(Collection_site_group_MDR), Collection_site_group_TRAC, Collection_site_group_MDR),
Hospital_location_TRAC = str_replace(Hospital_location_TRAC, "\\^\\^", ""),
`MAPS#Organism Name` = if_else(
!is.na(`MAPS#Organism Name`),
paste(
substr(`MAPS#Organism Name`, 1, 1),
tolower(substr(`MAPS#Organism Name`, 2, nchar(`MAPS#Organism Name`))),
sep = ""
),
NA_character_
)
) %>%
select(
`CP Short Title`:`Location#Position`,
Collection_site_MDR, Collection_site_group_MDR,
Hospital_location_MDR, Notes:`MAPS#Participant ID`, `MAPS#PI Name`
) %>%
distinct()
###############################################################################
## Step 2: pipeline
###############################################################################
source("/Users/heekukpark/cumc.columbia.edu/Uhlemann Lab - Microbiome Core/1_Projects/MAPS_TRAC_MDR/4_Source_code/Go_trac_tool_set2_V2.R")
if(!is.null(dev.list())) dev.off()
rm(list=ls())
library(dplyr)
library(stringr)
library(readxl)
library(openxlsx)
library(tidyr)
library(lubridate)
setwd("/Volumes/DOM_ID$/LOWY_LAB/1_Current Lab Members/Dwayne/TRAC_MDR_New/7_Intermediates/")
MDR_all_newest <- readRDS("MDR_all_newest.rds")
#--- Read TRAC data (versions appear multiple times in the original code) ---
setwd("/Volumes/DOM_ID$/LOWY_LAB/1_Current Lab Members/Dwayne/Track_MDR/")
list.files("Monthly cleaned TRAC data",pattern = "\\.rds$")
Track_file <-"Monthly cleaned TRAC data/TRAC all susceptibility 2009.01.01 - 2025.08.05 WIDE.rds"
TRAC_data <- readRDS(Track_file) %>%
mutate(
organism_cleaned = toupper(organism_cleaned),
Date_collection_TRAC = as.Date(Date_collection_TRAC)
)
tail(TRAC_data$primary_time)
dim(TRAC_data)
colnames(TRAC_data)
tail(TRAC_data$ACCNO_2)
dim(TRAC_data)
#--- Read site crosswalk ---
Site_data <- read.xlsx("NEW_MDR_Merging/MDR Collection sites crosswalk.xlsx") %>%
mutate(Collection_site = toupper(Collection_site))
#--- Read POS data (positive cultures) ---
Pos_data <- readRDS("Monthly cleaned TRAC data/Positive cultures with encounter_id, demographics & susceptibility 2020-2025.rds")
tail(Pos_data$primary_time)
#--- Read Illumina Sequencing record ---
seq_data <- read.xlsx("NEW_MDR_merging/Sequencing_Record_Illumina_WGS.xlsx", sheet = 1, detectDates = TRUE) %>%
select(Isolate:`Notes.2`) %>%
distinct()
###############################################################################
## Step 2: pipeline
###############################################################################
source("/Users/heekukpark/cumc.columbia.edu/Uhlemann Lab - Microbiome Core/1_Projects/MAPS_TRAC_MDR/4_Source_code/Go_trac_tool_set2_V2.R")
dim(MDR_TRAC_merged_fixed2)
dim(MDR_with_CRE)
normalize_acc <- function(s){
s <- toupper(as.character(s))
gsub("[^A-Z0-9]", "", s)   # 공백/하이픈 등 제거
}
TRAC_sus <- TRAC_data %>%
mutate(
ACC_merge = coalesce(as.character(ACCNO_TRAC), as.character(ACCNO), as.character(ACCNO_2)),
ACC_merge = normalize_acc(ACC_merge)
) %>%
select(
ACC_merge,
matches("(IMIPENEM|MEROPENEM|ERTAPENEM).+_sus", ignore.case = TRUE)
) %>%
distinct()
x <- MDR_TRAC_merged_fixed2 %>%
mutate(
ACC_merge = normalize_acc(ACCNO_MDR),
y = year(Date_collection_MDR_fixed)
)
x_aug <- x %>%
left_join(TRAC_sus, by = "ACC_merge", suffix = c("", "_TRACACC"))
sus_cols_trac <- paste0(sus_cols_now, "_TRACACC"); sus_cols_trac <- sus_cols_trac[sus_cols_trac %in% names(x_aug)]
for (i in seq_along(sus_cols_now)) {
dst <- sus_cols_now[i]; src <- sus_cols_trac[i]
if (!is.na(src) && src %in% names(x_aug)) {
x_aug[[dst]] <- dplyr::coalesce(x_aug[[dst]], x_aug[[src]])
}
}
is_resist <- function(x){
x <- toupper(as.character(x))
grepl("^(R|NS)$", x)
}
sus_cols <- names(x_aug)[grepl("(IMIPENEM|MEROPENEM|ERTAPENEM).+_sus$", names(x_aug), ignore.case = TRUE)]
devtools::install_github("bbagy/Gotools", force=T)
library("magick")
library("Gotools")
Gotool_dependency()
# ----- Input ------#
project<-"Yael_Rejection"
setwd("~/cumc.columbia.edu/Uhlemann Lab - Microbiome Core/1_Projects/MAPS_Yae_PLT/2_Analysis/20230626_Yael_merged/")
#===== Input blast
# Go_psTotab(psIN =ps1, project="fillered")
# Go_blastASVs(project, asvsTable="1_out/fillered.250810.psTotab.asvTable.csv", blastDB="/Users/heekukpark/DB/blastDB/16S_ribosomal_RNA")
ps.asv <- Go_tabTops(csv ="1_out/Yael_Rejection.updated_sequences_with_blast_results.250810_cleaned.csv" ,project)
# for general
sampledata <- read.csv("3_map/Rejection/20250808_updatedmap16s.csv",row.names=1,check.names=FALSE)
tree <- read_tree("1_out/Yael.PLT.230626.psTotab.seqs.fna_tree/exported-tree/tree.nwk", errorIfNULL = T)
new_tre <- ape::multi2di(tree)
ps2 <- merge_phyloseq(ps.asv, phy_tree(tree),sample_data(data.frame(sampledata)));ps2
#==========================================#
#=========         Kaplan–Meier      ==========#
#==========================================#
adiv <- Go_adiv(psIN = ps2,  project = project, alpha_metrics = c("Chao1","Shannon","PD"));dim(adiv)
Go_kmplot(df = adiv,project = project,
event_col = "caselabel",event_positive = "Case",time_col = "sample_days_post_tx",feature_col = "Shannon",
n_group = 3, group_labels = c("Low", "Middle", "High"),
name = NULL,height = 5,width = 6)
ps2.sel <- Go_filter(ps2, cutoff = 0.0005)# 271
# 예시
res_xgb <- Go_xgboost(
psIN = ps2.sel,
project = "Yael_Rejection",
outcome = "caselabel",
testSet = T,                # TRUE면 75/25 holdout + inner-CV
clinical_vari = NULL,            # 임상 변수 있으면 넣기
StudyID_col = "StudyID",
taxrank = "ASV",                # 또는 "Genus"
prev_min = 0.01,
relab_min = 1e-4,
n_folds = 5,
seed = 123,
n_candidates = 40,
num.trees = 1000,               # XGB에서는 최대 nrounds (조기중단으로 best_iter 선택)
orders = c("Control","Case")
)
clin <- c("age","sex","raceeth","ctp_class", #ctp_cond
"dxltd","Living_Donor","RecipCMV", "DonorCMV", "ColdIschemicTime", "WarmIschemicTime", "PeriOpAbx_Adj", "HCC")
ps2.sel <- Go_filter(ps2, cutoff = 0.0005)# 271
out <- Go_randomforest(
psIN = ps2.sel,
project = "Yael_Rejection",
outcome = "caselabel",       # 이진 factor (예: Control/Case)
testSet = T,             # CV-only
clinical_vari = NULL,         # 임상 변수 없으면 빈 벡터
StudyID_col = "StudyID",
orders  = c("Control","Case"), # 반복측정 ID 컬럼명
taxrank = "ASV",             # ASV 레벨
prev_min = 0.01,
relab_min = 1e-4,
n_folds = 5,
seed = 123,
n_candidates = 40,
num.trees = 1000
)
# build package
setwd("~/Dropbox/04_Scripts/R_source/Gotools")
devtools::build() # generate Gotools_0.0.0.9000.tar.gz
devtools::document()

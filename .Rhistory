project_name <- "Prebiotic (Inuline) 16S microbiome – Dr. Daniel Freedberg"
samples <- "344 (94 Participants)"
Sequencing.date <- "12/28/2023"
platform <- "Illumina MiSeq 2x300"
contact_email<-"hp2523@cumc.columbia.edu"
expInfo <- Go_expInfo(kit_number = 6, prep_number = 1, spikein_number = 2, authorName1="Heekuk Park",authorName2="Dwayne Seeram");expInfo
expInfo$contact_email
# Read the external HTML file content
html_content <- readLines("/Users/heekukpark/Dropbox/04_scripts/R_source/Gotool_html/email_form.html", warn = FALSE)
# Replace placeholders with actual R variables
contact_email <- expInfo$contact_email
html_content <- gsub("\\{\\{project_name\\}\\}", project_name, html_content)
html_content <- gsub("\\{\\{contact_email\\}\\}", contact_email, html_content)
# Print the modified HTML content into the R Markdown document
cat(html_content, sep = "\n")
contact_email<- expInfo$contact_email
# Read the external HTML file content
html_content <- readLines("/Users/heekukpark/Dropbox/04_scripts/R_source/Gotool_html/email_form.html", warn = FALSE)
# Replace placeholders with actual R variables
contact_email <- expInfo$contact_email
html_content <- gsub("\\{\\{project_name\\}\\}", project_name, html_content)
html_content <- gsub("\\{\\{contact_email\\}\\}", contact_email, html_content)
# Print the modified HTML content into the R Markdown document
cat(html_content, sep = "\n")
contact_email<- expInfo$contact_email
contact_email
contact_email<-c("hp2523@cumc.columbia.edu", "ds4057@cumc.columbia.edu")
# Read the external HTML file content
html_content <- readLines("/Users/heekukpark/Dropbox/04_scripts/R_source/Gotool_html/email_form.html", warn = FALSE)
# Replace placeholders with actual R variables
contact_email <- contact_email
html_content <- gsub("\\{\\{project_name\\}\\}", project_name, html_content)
html_content <- gsub("\\{\\{contact_email\\}\\}", contact_email, html_content)
# Print the modified HTML content into the R Markdown document
cat(html_content, sep = "\n")
contact_email<-c("ds4057@cumc.columbia.edu")
# Read the external HTML file content
html_content <- readLines("/Users/heekukpark/Dropbox/04_scripts/R_source/Gotool_html/email_form.html", warn = FALSE)
# Replace placeholders with actual R variables
contact_email <- contact_email
html_content <- gsub("\\{\\{project_name\\}\\}", project_name, html_content)
html_content <- gsub("\\{\\{contact_email\\}\\}", contact_email, html_content)
# Print the modified HTML content into the R Markdown document
cat(html_content, sep = "\n")
# Join the email addresses with a comma if there are two
contact_email_joined <- paste(contact_email, collapse = ",")
contact_email_joined
expInfo <- Go_expInfo(kit_number = 6, prep_number = 1, spikein_number = 2, authorName1="Heekuk Park",authorName2="Dwayne Seeram");expInfo
contact_email<- expInfo$contact_email
# Join the email addresses with a comma if there are two
contact_email_joined <- paste(contact_email, collapse = ",")
contact_email_joined
# Your existing code to replace placeholders
html_content <- readLines("/Users/heekukpark/Dropbox/04_scripts/R_source/Gotool_html/email_form.html", warn = FALSE)
html_content <- gsub("\\{\\{project_name\\}\\}", project_name, html_content)
html_content <- gsub("\\{\\{contact_email\\}\\}", contact_email_joined, html_content)
# Print the modified HTML content
cat(html_content, sep = "\n")
expInfo <- Go_expInfo(kit_number = 6, prep_number = 1, spikein_number = 2, authorName1="Heekuk Park",authorName2=NULL);expInfo
contact_email<- expInfo$contact_email
# Join the email addresses with a comma if there are two
contact_email_joined <- paste(contact_email, collapse = ",")
# Your existing code to replace placeholders
html_content <- readLines("/Users/heekukpark/Dropbox/04_scripts/R_source/Gotool_html/email_form.html", warn = FALSE)
html_content <- gsub("\\{\\{project_name\\}\\}", project_name, html_content)
html_content <- gsub("\\{\\{contact_email\\}\\}", contact_email_joined, html_content)
# Print the modified HTML content
cat(html_content, sep = "\n")
library(rmarkdown)
# Path to your R Markdown template
rmd_template_path <- "/Users/heekukpark/Dropbox/04_scripts/R_source/R_storage/1_R_History/2024/FB_Inuline/20240410_Summary_report_tem_v1.Rmd"
# Render the Rmd file to an HTML output
render(input = rmd_template_path, output_format = "html_document")
library(rmarkdown)
# Path to your R Markdown template
rmd_template_path <- "/Users/heekukpark/Dropbox/04_scripts/R_source/R_storage/1_R_History/2024/FB_Inuline/20240410_Summary_report_tem_v1.Rmd"
# Render the Rmd file to an HTML output
render(input = rmd_template_path, output_format = "html_document")
# Path to your R Markdown template
rmd_template_path <- "/Users/heekukpark/Dropbox/04_scripts/R_source/R_storage/1_R_History/2024/FB_Inuline/20240410_Summary_report_tem_v1.Rmd"
# Render the Rmd file to an HTML output
render(input = rmd_template_path, output_format = "html_document")
#######################################################
#---------     Core general Rmd starter      ---------#
#######################################################
# rm(list=ls())
# list.files()
#===== Read Go_tools
# devtools::install_github("bbagy/Gotools", force=T)
library("Gotools")
Gotool_dependency()
devtools::install_github("bbagy/Gotools", force=T)
library("Gotools")
#######################################################
#---------     Core general Rmd starter      ---------#
#######################################################
# rm(list=ls())
# list.files()
#===== Read Go_tools
# devtools::install_github("bbagy/Gotools", force=T)
library("Gotools")
devtools::install_github("bbagy/Gotools", force=T)
library("Gotools")
devtools::install_github("bbagy/Gotools", force=T)
library("Gotools")
Gotool_dependency()
# alpha diversity 측정시, 필터 한 값과 안한 값의 차이가 크게 나타난다.
# 필터 하지 않은 것으로 alpha diversity 측정 하는것이 맞는거 같다.
dev.off()
rm(list=ls())
# ----- Libraries and functions ------#
#===== Read Go_tools
# devtools::install_github("bbagy/Gotools",force = TRUE)
library("Gotools")
Gotool_dependency()
q()
# 환경 설정
#install.packages("keras")
#install.packages("reticulate")
library(keras)
# 환경 설정
install.packages("keras")
install.packages("reticulate")
# 환경 설정
#install.packages("keras")
#install.packages("reticulate")
library(keras)
library(reticulate)
use_condaenv("r-tf-arm", required = TRUE)
use_python("/opt/homebrew/anaconda3/envs/r-tf-arm/bin/python", required = TRUE)
use_condaenv("r-tf-arm", conda = "/Users/heekukpark/miniconda3/bin/conda", required = TRUE)
py_config()
version$platform
# 환경 설정
#install.packages("keras")
#install.packages("reticulate")
library(keras)
library(reticulate)
use_condaenv("r-tf-arm", conda = "/Users/heekukpark/miniconda3/bin/conda", required = TRUE)
py_config()
# 환경 설정
#install.packages("keras")
#install.packages("reticulate")
library(keras)
library(reticulate)
use_condaenv("r-tf-arm", conda = "/Users/heekukpark/miniconda3/bin/conda", required = TRUE)
py_config()
devtools::install_github("bbagy/Gotools", force=T)
install_load_bioc <- function(package) {
if (!require(package, character.only = TRUE, quietly = TRUE)) {
if (!requireNamespace("BiocManager", quietly = TRUE)) {
install.packages("BiocManager")
}
BiocManager::install(package, force = TRUE, ask = FALSE)
}
library(package, character.only = TRUE, quietly = TRUE)
}
# Installing and loading required Bioconductor packages
bioconductor_packages <- c("phyloseq", "microbiome", "Rhtslib", "dada2", "dplyr",
"ggpubr", "ggfortify", "genefilter", "ggpmisc", "S4Vectors",
"ShortRead", "illuminaio", "rstatix", "useful", "DECIPHER",
"ComplexHeatmap", "DESeq2", "ALDEx2", "scater", "ANCOMBC")
for (package in bioconductor_packages) {
install_load_bioc(package)
}
# 환경 설정
#install.packages("keras")
#install.packages("reticulate")
library(keras)
# 환경 설정
#install.packages("keras")
#install.packages("reticulate")
library(keras)
library(reticulate)
use_condaenv("r-tf-arm", conda = "/Users/heekukpark/miniconda3/bin/conda", required = TRUE)
py_config()
library(reticulate)
use_virtualenv("~/.virtualenvs/r-keras-env-py310", required = TRUE)
library(keras)
# 간단한 Keras 모델 정의
model <- keras_model_sequential() %>%
layer_dense(units = 10, input_shape = 5)
# 간단한 Keras 모델 정의
model <- keras_model_sequential() %>%
layer_dense(units = 10, input_shape = 5)
library(keras)
# 간단한 Keras 모델 정의
model <- keras_model_sequential() %>%
layer_dense(units = 10, input_shape = 5)
library(keras)
# 간단한 Keras 모델 정의
model <- keras_model_sequential() %>%
layer_dense(units = 10, input_shape = 5)
library(keras)
# 간단한 Keras 모델 정의
model <- keras_model_sequential() %>%
layer_dense(units = 10, input_shape = 5)
# 환경 설정
#install.packages("keras")
#install.packages("reticulate")
library(keras)
library(reticulate)
use_condaenv("r-tf-arm", conda = "/Users/heekukpark/miniconda3/bin/conda", required = TRUE)
py_config()
version$platform
# 간단한 Keras 모델 정의
model <- keras_model_sequential() %>%
layer_dense(units = 10, input_shape = 5)
# 모델 구조 요약
summary(model)
install.packages("devtools")
install.packages(c("usethis", "pkgdown", "roxygen2", "rversions", "urlchecker"))
install.packages("leaflet")
install.packages("sf")
install.packages("sf")
install.packages("units", type = "source")
install.packages("terra", type = "source")
install.packages("leaflet", type = "source")
install.packages("units", type = "source")
install.packages("terra", type = "source")
install.packages(
"units",
configure.args = c(
"--with-udunits2-lib=/usr/local/opt/udunits/lib",
"--with-udunits2-include=/usr/local/opt/udunits/include"
),
type = "source"
)
Sys.setenv(UDUNITS2_INCLUDE = "/usr/local/opt/udunits/include")
Sys.setenv(UDUNITS2_LIBS = "/usr/local/opt/udunits/lib")
install.packages("units", type = "source")
install.packages("units", type = "source", verbose = TRUE)
Sys.setenv(UDUNITS2_INCLUDE = "/usr/local/opt/udunits/include")
Sys.setenv(UDUNITS2_LIBS = "/usr/local/opt/udunits/lib")
install.packages("units", type = "source")
install.packages("units", type = "source", verbose = TRUE)
Sys.setenv(
PKG_CONFIG_PATH = "/usr/local/opt/udunits/lib/pkgconfig",
UDUNITS2_INCLUDE = "/usr/local/opt/udunits/include",
UDUNITS2_LIBS = "/usr/local/opt/udunits/lib"
)
install.packages("units", type = "source")
install.packages(
"units",
configure.vars = "CPPFLAGS='-I/usr/local/opt/udunits/include' LDFLAGS='-L/usr/local/opt/udunits/lib'",
type = "source"
)
Sys.setenv(
PKG_CONFIG_PATH = "/usr/local/opt/udunits/lib/pkgconfig",
UDUNITS2_INCLUDE = "/usr/local/opt/udunits/include",
UDUNITS2_LIBS = "/usr/local/opt/udunits/lib"
)
install.packages(
"units",
configure.vars = "CPPFLAGS='-I/usr/local/opt/udunits/include' LDFLAGS='-L/usr/local/opt/udunits/lib'",
type = "source"
)
Sys.setenv(
PKG_CONFIG_PATH = "/opt/homebrew/opt/udunits/lib/pkgconfig",
UDUNITS2_INCLUDE = "/opt/homebrew/opt/udunits/include",
UDUNITS2_LIBS = "/opt/homebrew/opt/udunits/lib"
)
install.packages(
"units",
configure.vars = "CPPFLAGS='-I/opt/homebrew/opt/udunits/include' LDFLAGS='-L/opt/homebrew/opt/udunits/lib'",
type = "source"
)
library(leaflet)
install.packages("units", type = "source")
install.packages("sf")
install.packages("leaflet")
library(units)
install.packages("leaflet")
install.packages("sf")
install.packages("sf", type = "source")
# 환경 설정
#install.packages("keras")
#install.packages("reticulate")
library(keras)
library(reticulate)
Sys.setenv(
PKG_CONFIG_PATH = "/opt/homebrew/opt/gdal/lib/pkgconfig",
LDFLAGS = "-L/opt/homebrew/opt/gdal/lib -L/opt/homebrew/opt/libomp/lib",
CPPFLAGS = "-I/opt/homebrew/opt/gdal/include -I/opt/homebrew/opt/libomp/include"
)
install.packages(
"sf",
configure.vars = "CXX11FLAGS='-fopenmp'",
type = "source"
)
Sys.setenv(
CC = "/opt/homebrew/opt/llvm/bin/clang",
CXX = "/opt/homebrew/opt/llvm/bin/clang++",
PKG_CONFIG_PATH = "/opt/homebrew/opt/gdal/lib/pkgconfig",
LDFLAGS = "-L/opt/homebrew/opt/gdal/lib -L/opt/homebrew/opt/llvm/lib",
CPPFLAGS = "-I/opt/homebrew/opt/gdal/include -I/opt/homebrew/opt/llvm/include"
)
install.packages(
"sf",
configure.vars = "CXX11FLAGS='-fopenmp'",
type = "source"
)
Sys.setenv(
CC = "/opt/homebrew/opt/llvm/bin/clang",
CXX = "/opt/homebrew/opt/llvm/bin/clang++",
PKG_CONFIG_PATH = "/opt/homebrew/opt/gdal/lib/pkgconfig",
LDFLAGS = "-L/opt/homebrew/opt/gdal/lib -L/opt/homebrew/opt/llvm/lib",
CPPFLAGS = "-I/opt/homebrew/opt/gdal/include -I/opt/homebrew/opt/llvm/include"
)
install.packages(
"sf",
configure.vars = "CXX11FLAGS='-fopenmp'",
type = "source"
)
Sys.setenv(
CC = "/opt/homebrew/opt/llvm/bin/clang",
CXX = "/opt/homebrew/opt/llvm/bin/clang++",
PKG_CONFIG_PATH = "/opt/homebrew/opt/gdal/lib/pkgconfig",
LDFLAGS = "-L/opt/homebrew/opt/gdal/lib",
CPPFLAGS = "-I/opt/homebrew/opt/gdal/include"
)
install.packages("sf", type = "source")
Sys.setenv(
CC = "/opt/homebrew/opt/llvm/bin/clang",
CXX = "/opt/homebrew/opt/llvm/bin/clang++",
LDFLAGS = "-L/opt/homebrew/opt/gdal/lib -L/opt/homebrew/opt/libomp/lib",
CPPFLAGS = "-I/opt/homebrew/opt/gdal/include -I/opt/homebrew/opt/libomp/include"
)
install.packages("sf", type = "source")
Sys.setenv(
CC = "/opt/homebrew/opt/llvm/bin/clang",
CXX = "/opt/homebrew/opt/llvm/bin/clang++",
PKG_CONFIG_PATH = "/opt/homebrew/opt/gdal/lib/pkgconfig",
LDFLAGS = "-L/opt/homebrew/opt/gdal/lib",
CPPFLAGS = "-I/opt/homebrew/opt/gdal/include",
CXX11FLAGS = ""
)
install.packages("sf", type = "source")
Sys.setenv(
CC = "/opt/homebrew/opt/llvm/bin/clang",
CXX = "/opt/homebrew/opt/llvm/bin/clang++",
PKG_CONFIG_PATH = "/opt/homebrew/opt/gdal/lib/pkgconfig",
LDFLAGS = "-L/opt/homebrew/opt/gdal/lib",
CPPFLAGS = "-I/opt/homebrew/opt/gdal/include",
CXX11FLAGS = ""
)
install.packages("sf", type = "source")
Sys.setenv(
CC = "/usr/bin/clang",
CXX = "/usr/bin/clang++",
PKG_CONFIG_PATH = "/opt/homebrew/opt/gdal/lib/pkgconfig",
LDFLAGS = "-L/opt/homebrew/opt/gdal/lib",
CPPFLAGS = "-I/opt/homebrew/opt/gdal/include",
CXX11FLAGS = ""
)
install.packages("sf", type = "source")
rm(list=ls())
# ----- Libraries and functions ------#
# devtools::install_github("bbagy/Gotools", force=T)
library("magick")
library("Gotools")
devtools::install_github("bbagy/Gotools", force=T)
paths <- list.files("R", pattern="\\.R$", full.names=TRUE)
pat1 <- "@import base|@importFrom base"
pat2 <- "@import read\\.csv|@import setNames"
for (p in paths) {
x <- readLines(p, warn=FALSE)
if (any(grepl(pat1, x)) || any(grepl(pat2, x))) {
cat(">>> ", p, "\n")
cat(paste(which(grepl(pat1, x) | grepl(pat2, x)), x[grepl(pat1, x) | grepl(pat2, x)], sep=": "), sep="\n")
cat("\n")
}
}
devtools::install(upgrade = "never", build_vignettes = FALSE)
devtools::document()
# build package
setwd("~/Dropbox/04_Scripts/R_source/Gotools")
devtools::build() # generate Gotools_0.0.0.9000.tar.gz
devtools::document()
devtools::install(upgrade = "never", build_vignettes = FALSE)
paths <- list.files("R", pattern="\\.R$", full.names=TRUE)
pat_bad <- c(
"@import base",                      # 절대 금지
"@importFrom base",                  # 절대 금지
"@import read\\.csv\\b",             # 잘못된 import (함수명)
"@import setNames\\b"                # 잘못된 import (함수명)
)
for (p in paths) {
x <- readLines(p, warn = FALSE)
bad_lines <- which(Reduce(`|`, lapply(pat_bad, \(pat) grepl(pat, x))))
if (length(bad_lines)) {
cat(">>> FIX NEEDED:", p, "\n")
cat(paste0("  line ", bad_lines, ": ", x[bad_lines], "\n"), sep = "")
}
}
devtools::document()
devtools::install(upgrade = "never", build_vignettes = FALSE)
for (p in paths) {
x <- readLines(p, warn = FALSE)
bad_lines <- which(Reduce(`|`, lapply(pat_bad, \(pat) grepl(pat, x))))
if (length(bad_lines)) {
cat(">>> FIX NEEDED:", p, "\n")
cat(paste0("  line ", bad_lines, ": ", x[bad_lines], "\n"), sep = "")
}
}
paths <- list.files("R", pattern="\\.R$", full.names=TRUE)
pat_bad <- c(
"@import base",                      # 절대 금지
"@importFrom base",                  # 절대 금지
"@import read\\.csv\\b",             # 잘못된 import (함수명)
"@import setNames\\b"                # 잘못된 import (함수명)
)
for (p in paths) {
x <- readLines(p, warn = FALSE)
bad_lines <- which(Reduce(`|`, lapply(pat_bad, \(pat) grepl(pat, x))))
if (length(bad_lines)) {
cat(">>> FIX NEEDED:", p, "\n")
cat(paste0("  line ", bad_lines, ": ", x[bad_lines], "\n"), sep = "")
}
}
paths <- list.files("R", pattern="\\.R$", full.names=TRUE)
pat_bad <- c(
"@import base",                      # 절대 금지
"@importFrom base",                  # 절대 금지
"@import read\\.csv\\b",             # 잘못된 import (함수명)
"@import setNames\\b"                # 잘못된 import (함수명)
)
for (p in paths) {
x <- readLines(p, warn = FALSE)
bad_lines <- which(Reduce(`|`, lapply(pat_bad, \(pat) grepl(pat, x))))
if (length(bad_lines)) {
cat(">>> FIX NEEDED:", p, "\n")
cat(paste0("  line ", bad_lines, ": ", x[bad_lines], "\n"), sep = "")
}
}
devtools::document()
# build package
setwd("~/Dropbox/04_Scripts/R_source/Gotools")
devtools::build() # generate Gotools_0.0.0.9000.tar.gz
# build package
setwd("~/Dropbox/04_Scripts/R_source/Gotools")
devtools::build() # generate Gotools_0.0.0.9000.tar.gz
# build package
setwd("~/Dropbox/04_Scripts/R_source/Gotools")
devtools::build() # generate Gotools_0.0.0.9000.tar.gz
devtools::document()
# build package
setwd("~/Dropbox/04_Scripts/R_source/Gotools")
devtools::build() # generate Gotools_0.0.0.9000.tar.gz
# check package ready to make namespace
paths <- list.files("R", pattern="\\.R$", full.names=TRUE)
pat_bad <- c(
"@import base",                      # 절대 금지
"@importFrom base",                  # 절대 금지
"@import read\\.csv\\b",             # 잘못된 import (함수명)
"@import setNames\\b"                # 잘못된 import (함수명)
)
for (p in paths) {
x <- readLines(p, warn = FALSE)
bad_lines <- which(Reduce(`|`, lapply(pat_bad, \(pat) grepl(pat, x))))
if (length(bad_lines)) {
cat(">>> FIX NEEDED:", p, "\n")
cat(paste0("  line ", bad_lines, ": ", x[bad_lines], "\n"), sep = "")
}
}
devtools::document()
devtools::install(upgrade = "never", build_vignettes = FALSE)
# ----- Libraries and functions ------#
# devtools::install_github("bbagy/Gotools", force=T)
library("magick")
library("Gotools")
Gotool_dependency()
# ----- Input ------#
project<-"CAU_MG"
currentwd <- "~/Documents/05_CAU/20250723_MG_CAU/4_kraken2//"
setwd(sprintf("%s",currentwd))
# 8. Load as ps
ps.bracken <- Go_tabTops(csv ="1_out/20250724_bracken_with_taxonomy_modi.csv",project);ps.bracken
# Go_emptyMap(ps.bracken, project)
sampledata <- read.csv("3_map/250724.CAU_MG.mapping.csv",row.names=1,check.names=FALSE)
ps1 <- merge_phyloseq(ps.bracken,sample_data(data.frame(sampledata)));ps1
ps2 <- Go_filter(ps1,cutoff = 0.00001) #  0.00001
project<-"CAU_MG"
unique(sampledata$StudyID)
ps2 <- Go_filter(ps1,cutoff = 0.00001)
adiv <- Go_adiv(psIN = ps2,  project = project, alpha_metrics = c("Chao1","Shannon"));colnames(adiv)
boxcol <- Go_myCols(piratepal = "info");boxcol
boxcol <- c("#E7695DFF", "#6B8993FF", "#95CE8AFF")
unique(sampledata$TreatmentGroup2)
orders <- c("V1","V2","V3","Baseline","Dr.Lac","Cellulose",unique(sampledata$StudyID))
mvars <- c("Set1","Set2")
for(mvar in mvars){
adiv.sel <- subset(adiv, adiv[,"Sets"] == mvar)
if (mvar== "Set1"){
ordersset <- c("Baseline","Dr.Lac","Cellulose")
boxcolset <- c("#E7695DFF", "#6B8993FF", "#95CE8AFF")
}else if(mvar == "Set2"){
ordersset <- c("Baseline","Cellulose","Dr.Lac")
boxcolset <- c("#E7695DFF", "#95CE8AFF", "#6B8993FF")
}
Go_boxplot(df=adiv.sel, project = project, title = mvar, xangle = 90,  mycols = boxcol,combination = NULL,
cate.vars = c("TreatmentGroup1"), outcomes = c("Chao1","Shannon"), addnumber = T, paired = "StudyID",
orders = ordersset, star= F, facet = NULL, name = mvar, cutoff = 0.3,
height = 3, width = 5, plotCols=2, plotRows=1, standardsize = F)
}
Go_boxplot()
setwd("~/Dropbox/04_Scripts/R_source/Gotools")
devtools::build()
devtools::document()
setwd("~/Dropbox/04_Scripts/R_source/Gotools")
devtools::build()
devtools::document()

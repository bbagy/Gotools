if (is.null(project)) stop("Project name is required.")
df.sel <- df  # 입력 데이터 그대로 사용
# colors and orders 처리
if (is.null(mycols)) {
print("mycols is not defined. Default colors will be used.")
}
if (is.null(orders)) {
print("orders is not defined.")
}
# height, width 기본값 설정
if (is.null(height)) height <- 3.5
if (is.null(width)) width <- 5
# 변수 반복 처리
for (variable in outcomes) {
if (!is.null(dev.list())) dev.off()
# 평균 데이터 계산
average_data <- df.sel %>%
group_by(!!sym(timepoint), !!sym(maingroup)) %>%
summarise(
!!paste0("mean_", variable) := mean(!!sym(variable), na.rm = TRUE), # 동적 요약 변수
.groups = "drop"
) %>%
ungroup()
# Orders 업데이트
if (!is.null(orders)) {
df.sel[, timepoint] <- factor(df.sel[, timepoint], levels = intersect(orders, df.sel[, timepoint]))
df.sel[, maingroup] <- factor(df.sel[, maingroup], levels = intersect(orders, df.sel[, maingroup]))
}
# max 값 안전 처리
max_label_y <- if (all(is.na(df.sel[[variable]]))) 1 else max(df.sel[[variable]], na.rm = TRUE) + 0.2
# 플롯 생성
p <- ggplot(df.sel, aes_string(x = timepoint, y = variable, fill = maingroup)) +
geom_boxplot(outlier.shape = NA, lwd = 0.3) +
geom_line(data = average_data, aes_string(x = timepoint, y = sprintf("mean_%s", variable), group = maingroup, colour = maingroup), size = 1, alpha = 0.4) +
geom_point(aes_string(colour = maingroup), position = position_dodge(width = 0.75), size = 1.5, alpha = 0.8) +
theme_bw() +
theme(legend.position = "bottom", legend.title = element_blank()) +
labs(y = variable, x = NULL) +
stat_compare_means(method = "wilcox.test", label = "p.format",
aes_string(group = maingroup),
label.y = max_label_y)
# 색상 적용
if (!is.null(mycols)) {
p <- p + scale_fill_manual(values = mycols, labels = fill_labels) +
scale_colour_manual(values = mycols, labels = fill_labels)
}
if (!is.null(title)) {
p <- p + ggtitle(sprintf("%s (%s)", title,"wilcox.test")
} else{
Go_groupBoxTimepoint(df = adiv,project,maingroup = "Groups2",timepoint = "DPI",outcomes =  c("Chao1","Shannon"),
fill_labels = c("MIIST305", "Vehicle"), x.axis = c("0DPI","6DPI","12DPI","21DPI","30DPI"),
mycols = adiv.col,orders = orders, name = NULL,height =3.5 , width = 5)
Go_groupBoxTimepoint(df = adiv,project,maingroup = "Groups2",timepoint = "DPI",outcomes =  c("Chao1","Shannon"),
fill_labels = c("MIIST305", "Vehicle"), x.axis = c("0DPI","6DPI","12DPI","21DPI","30DPI"),
mycols = adiv.col,orders = orders, name = NULL,height =3.5 , width = 5)
Go_groupBoxTimepoint <- function(df = NULL,
project = NULL,
name = NULL,
maingroup = NULL,
timepoint = NULL,
outcomes = NULL,
mycols = NULL,
orders = NULL,
fill_labels = NULL,
title=NULL,
x.axis = NULL,
height = NULL,
width = NULL) {
library(dplyr)
library(ggplot2)
library(ggpubr)
# 데이터 초기화 및 기본값 설정
if (is.null(df)) stop("Input dataframe (df) is required.")
if (is.null(project)) stop("Project name is required.")
df.sel <- df  # 입력 데이터 그대로 사용
# colors and orders 처리
if (is.null(mycols)) {
print("mycols is not defined. Default colors will be used.")
}
if (is.null(orders)) {
print("orders is not defined.")
}
# height, width 기본값 설정
if (is.null(height)) height <- 3.5
if (is.null(width)) width <- 5
# 변수 반복 처리
for (variable in outcomes) {
if (!is.null(dev.list())) dev.off()
# 평균 데이터 계산
average_data <- df.sel %>%
group_by(!!sym(timepoint), !!sym(maingroup)) %>%
summarise(
!!paste0("mean_", variable) := mean(!!sym(variable), na.rm = TRUE), # 동적 요약 변수
.groups = "drop"
) %>%
ungroup()
# Orders 업데이트
if (!is.null(orders)) {
df.sel[, timepoint] <- factor(df.sel[, timepoint], levels = intersect(orders, df.sel[, timepoint]))
df.sel[, maingroup] <- factor(df.sel[, maingroup], levels = intersect(orders, df.sel[, maingroup]))
}
# max 값 안전 처리
max_label_y <- if (all(is.na(df.sel[[variable]]))) 1 else max(df.sel[[variable]], na.rm = TRUE) + 0.2
# 플롯 생성
p <- ggplot(df.sel, aes_string(x = timepoint, y = variable, fill = maingroup)) +
geom_boxplot(outlier.shape = NA, lwd = 0.3) +
geom_line(data = average_data, aes_string(x = timepoint, y = sprintf("mean_%s", variable), group = maingroup, colour = maingroup), size = 1, alpha = 0.4) +
geom_point(aes_string(colour = maingroup), position = position_dodge(width = 0.75), size = 1.5, alpha = 0.8) +
theme_bw() +
theme(legend.position = "bottom", legend.title = element_blank()) +
labs(y = variable, x = NULL) +
stat_compare_means(method = "wilcox.test", label = "p.format",
aes_string(group = maingroup),
label.y = max_label_y)
# 색상 적용
if (!is.null(mycols)) {
p <- p + scale_fill_manual(values = mycols, labels = fill_labels) +
scale_colour_manual(values = mycols, labels = fill_labels)
}
if (!is.null(title)) {
p <- p + ggtitle(sprintf("%s (%s)", title,"wilcox.test")
} else{
Go_groupBoxTimepoint <- function(df = NULL,
project = NULL,
name = NULL,
maingroup = NULL,
timepoint = NULL,
outcomes = NULL,
mycols = NULL,
orders = NULL,
fill_labels = NULL,
title=NULL,
x.axis = NULL,
height = NULL,
width = NULL) {
library(dplyr)
library(ggplot2)
library(ggpubr)
# 데이터 초기화 및 기본값 설정
if (is.null(df)) stop("Input dataframe (df) is required.")
if (is.null(project)) stop("Project name is required.")
df.sel <- df  # 입력 데이터 그대로 사용
# colors and orders 처리
if (is.null(mycols)) {
print("mycols is not defined. Default colors will be used.")
}
if (is.null(orders)) {
print("orders is not defined.")
}
# height, width 기본값 설정
if (is.null(height)) height <- 3.5
if (is.null(width)) width <- 5
# 변수 반복 처리
for (variable in outcomes) {
if (!is.null(dev.list())) dev.off()
# 평균 데이터 계산
average_data <- df.sel %>%
group_by(!!sym(timepoint), !!sym(maingroup)) %>%
summarise(
!!paste0("mean_", variable) := mean(!!sym(variable), na.rm = TRUE), # 동적 요약 변수
.groups = "drop"
) %>%
ungroup()
# Orders 업데이트
if (!is.null(orders)) {
df.sel[, timepoint] <- factor(df.sel[, timepoint], levels = intersect(orders, df.sel[, timepoint]))
df.sel[, maingroup] <- factor(df.sel[, maingroup], levels = intersect(orders, df.sel[, maingroup]))
}
# max 값 안전 처리
max_label_y <- if (all(is.na(df.sel[[variable]]))) 1 else max(df.sel[[variable]], na.rm = TRUE) + 0.2
# 플롯 생성
p <- ggplot(df.sel, aes_string(x = timepoint, y = variable, fill = maingroup)) +
geom_boxplot(outlier.shape = NA, lwd = 0.3) +
geom_line(data = average_data, aes_string(x = timepoint, y = sprintf("mean_%s", variable), group = maingroup, colour = maingroup), size = 1, alpha = 0.4) +
geom_point(aes_string(colour = maingroup), position = position_dodge(width = 0.75), size = 1.5, alpha = 0.8) +
theme_bw() +
theme(legend.position = "bottom", legend.title = element_blank()) +
labs(y = variable, x = NULL) +
stat_compare_means(method = "wilcox.test", label = "p.format",
aes_string(group = maingroup),
label.y = max_label_y)
# 색상 적용
if (!is.null(mycols)) {
p <- p + scale_fill_manual(values = mycols, labels = fill_labels) +
scale_colour_manual(values = mycols, labels = fill_labels)
}
if (!is.null(title)) {
p <- p + ggtitle(sprintf("%s (%s)", title,"wilcox.test"))
} else{
p <- p + ggtitle(sprintf("%s (%s)", variable))
}
# 출력 경로 설정 및 저장
dir <- Go_path(project, pdf = "yes", table = "no", path = NULL)
pdf(sprintf("%s/groupBox3.%s.%s.%s%s%s.pdf", dir$pdf,
project,
maingroup,
ifelse(is.null(variable), "", paste(variable, ".", sep = "")),
ifelse(is.null(name), "", paste(name, ".", sep = "")),
format(Sys.Date(), "%y%m%d")), height = height, width = width)
print(p)
dev.off()
}
}
Go_groupBoxTimepoint(df = adiv,project,maingroup = "Groups2",timepoint = "DPI",outcomes =  c("Chao1","Shannon"),
fill_labels = c("MIIST305", "Vehicle"), x.axis = c("0DPI","6DPI","12DPI","21DPI","30DPI"),
mycols = adiv.col,orders = orders, name = NULL,height =3.5 , width = 5)
Go_groupBoxTimepoint <- function(df = NULL,
project = NULL,
name = NULL,
maingroup = NULL,
timepoint = NULL,
outcomes = NULL,
mycols = NULL,
orders = NULL,
fill_labels = NULL,
title=NULL,
x.axis = NULL,
height = NULL,
width = NULL) {
library(dplyr)
library(ggplot2)
library(ggpubr)
# 데이터 초기화 및 기본값 설정
if (is.null(df)) stop("Input dataframe (df) is required.")
if (is.null(project)) stop("Project name is required.")
df.sel <- df  # 입력 데이터 그대로 사용
# colors and orders 처리
if (is.null(mycols)) {
print("mycols is not defined. Default colors will be used.")
}
if (is.null(orders)) {
print("orders is not defined.")
}
# height, width 기본값 설정
if (is.null(height)) height <- 3.5
if (is.null(width)) width <- 5
# 변수 반복 처리
for (variable in outcomes) {
if (!is.null(dev.list())) dev.off()
# 평균 데이터 계산
average_data <- df.sel %>%
group_by(!!sym(timepoint), !!sym(maingroup)) %>%
summarise(
!!paste0("mean_", variable) := mean(!!sym(variable), na.rm = TRUE), # 동적 요약 변수
.groups = "drop"
) %>%
ungroup()
# Orders 업데이트
if (!is.null(orders)) {
df.sel[, timepoint] <- factor(df.sel[, timepoint], levels = intersect(orders, df.sel[, timepoint]))
df.sel[, maingroup] <- factor(df.sel[, maingroup], levels = intersect(orders, df.sel[, maingroup]))
}
# max 값 안전 처리
max_label_y <- if (all(is.na(df.sel[[variable]]))) 1 else max(df.sel[[variable]], na.rm = TRUE) + 0.2
# 플롯 생성
p <- ggplot(df.sel, aes_string(x = timepoint, y = variable, fill = maingroup)) +
geom_boxplot(outlier.shape = NA, lwd = 0.3) +
geom_line(data = average_data, aes_string(x = timepoint, y = sprintf("mean_%s", variable), group = maingroup, colour = maingroup), size = 1, alpha = 0.4) +
geom_point(aes_string(colour = maingroup), position = position_dodge(width = 0.75), size = 1.5, alpha = 0.8) +
theme_bw() +
theme(legend.position = "bottom", legend.title = element_blank()) +
labs(y = variable, x = NULL) +
stat_compare_means(method = "wilcox.test", label = "p.format",
aes_string(group = maingroup),
label.y = max_label_y)
# 색상 적용
if (!is.null(mycols)) {
p <- p + scale_fill_manual(values = mycols, labels = fill_labels) +
scale_colour_manual(values = mycols, labels = fill_labels)
}
if (!is.null(title)) {
p <- p + ggtitle(sprintf("%s (%s)", title,"wilcox.test"))
} else{
p <- p + ggtitle(sprintf("%s (%s)", variable, "wilcox.test"))
}
# 출력 경로 설정 및 저장
dir <- Go_path(project, pdf = "yes", table = "no", path = NULL)
pdf(sprintf("%s/groupBox3.%s.%s.%s%s%s.pdf", dir$pdf,
project,
maingroup,
ifelse(is.null(variable), "", paste(variable, ".", sep = "")),
ifelse(is.null(name), "", paste(name, ".", sep = "")),
format(Sys.Date(), "%y%m%d")), height = height, width = width)
print(p)
dev.off()
}
}
Go_groupBoxTimepoint(df = adiv,project,maingroup = "Groups2",timepoint = "DPI",outcomes =  c("Chao1","Shannon"),
fill_labels = c("MIIST305", "Vehicle"), x.axis = c("0DPI","6DPI","12DPI","21DPI","30DPI"),
mycols = adiv.col,orders = orders, name = NULL,height =3.5 , width = 5)
Go_groupBoxTimepoint <- function(df = NULL,
project = NULL,
name = NULL,
maingroup = NULL,
timepoint = NULL,
outcomes = NULL,
mycols = NULL,
orders = NULL,
fill_labels = NULL,
title=NULL,
x.axis = NULL,
height = NULL,
width = NULL) {
library(dplyr)
library(ggplot2)
library(ggpubr)
# 데이터 초기화 및 기본값 설정
if (is.null(df)) stop("Input dataframe (df) is required.")
if (is.null(project)) stop("Project name is required.")
df.sel <- df  # 입력 데이터 그대로 사용
# colors and orders 처리
if (is.null(mycols)) {
print("mycols is not defined. Default colors will be used.")
}
if (is.null(orders)) {
print("orders is not defined.")
}
# height, width 기본값 설정
if (is.null(height)) height <- 3.5
if (is.null(width)) width <- 5
# 변수 반복 처리
for (variable in outcomes) {
if (!is.null(dev.list())) dev.off()
# 평균 데이터 계산
average_data <- df.sel %>%
group_by(!!sym(timepoint), !!sym(maingroup)) %>%
summarise(
!!paste0("mean_", variable) := mean(!!sym(variable), na.rm = TRUE), # 동적 요약 변수
.groups = "drop"
) %>%
ungroup()
# Orders 업데이트
if (!is.null(orders)) {
df.sel[, timepoint] <- factor(df.sel[, timepoint], levels = intersect(orders, df.sel[, timepoint]))
df.sel[, maingroup] <- factor(df.sel[, maingroup], levels = intersect(orders, df.sel[, maingroup]))
}
# max 값 안전 처리
max_label_y <- if (all(is.na(df.sel[[variable]]))) 1 else max(df.sel[[variable]], na.rm = TRUE) + 0.2
# 플롯 생성
p <- ggplot(df.sel, aes_string(x = timepoint, y = variable, fill = maingroup)) +
geom_boxplot(outlier.shape = NA, lwd = 0.3) +
geom_line(data = average_data, aes_string(x = timepoint, y = sprintf("mean_%s", variable), group = maingroup, colour = maingroup), size = 1, alpha = 0.4) +
geom_point(aes_string(colour = maingroup), position = position_dodge(width = 0.75), size = 1.5, alpha = 0.8) +
theme_bw() +
theme(legend.position = "bottom", legend.title = element_blank()) +
labs(y = variable, x = NULL) +
stat_compare_means(method = "wilcox.test", label = "p.format",
aes_string(group = maingroup),
label.y = max_label_y)
# 색상 적용
if (!is.null(mycols)) {
p <- p + scale_fill_manual(values = mycols, labels = fill_labels) +
scale_colour_manual(values = mycols, labels = fill_labels)
}
if (!is.null(title)) {
p <- p + ggtitle(sprintf("%s (%s)", title,"wilcox.test"))
} else{
p <- p + ggtitle(sprintf("%s (%s)", maingroup, "wilcox.test"))
}
# 출력 경로 설정 및 저장
dir <- Go_path(project, pdf = "yes", table = "no", path = NULL)
pdf(sprintf("%s/groupBox3.%s.%s.%s%s%s.pdf", dir$pdf,
project,
maingroup,
ifelse(is.null(variable), "", paste(variable, ".", sep = "")),
ifelse(is.null(name), "", paste(name, ".", sep = "")),
format(Sys.Date(), "%y%m%d")), height = height, width = width)
print(p)
dev.off()
}
}
Go_groupBoxTimepoint <- function(df = NULL,
project = NULL,
name = NULL,
maingroup = NULL,
timepoint = NULL,
outcomes = NULL,
mycols = NULL,
orders = NULL,
fill_labels = NULL,
title=NULL,
x.axis = NULL,
height = NULL,
width = NULL) {
library(dplyr)
library(ggplot2)
library(ggpubr)
# 데이터 초기화 및 기본값 설정
if (is.null(df)) stop("Input dataframe (df) is required.")
if (is.null(project)) stop("Project name is required.")
df.sel <- df  # 입력 데이터 그대로 사용
# colors and orders 처리
if (is.null(mycols)) {
print("mycols is not defined. Default colors will be used.")
}
if (is.null(orders)) {
print("orders is not defined.")
}
# height, width 기본값 설정
if (is.null(height)) height <- 3.5
if (is.null(width)) width <- 5
# 변수 반복 처리
for (variable in outcomes) {
if (!is.null(dev.list())) dev.off()
# 평균 데이터 계산
average_data <- df.sel %>%
group_by(!!sym(timepoint), !!sym(maingroup)) %>%
summarise(
!!paste0("mean_", variable) := mean(!!sym(variable), na.rm = TRUE), # 동적 요약 변수
.groups = "drop"
) %>%
ungroup()
# Orders 업데이트
if (!is.null(orders)) {
df.sel[, timepoint] <- factor(df.sel[, timepoint], levels = intersect(orders, df.sel[, timepoint]))
df.sel[, maingroup] <- factor(df.sel[, maingroup], levels = intersect(orders, df.sel[, maingroup]))
}
# max 값 안전 처리
max_label_y <- if (all(is.na(df.sel[[variable]]))) 1 else max(df.sel[[variable]], na.rm = TRUE) + 0.2
# 플롯 생성
p <- ggplot(df.sel, aes_string(x = timepoint, y = variable, fill = maingroup)) +
geom_boxplot(outlier.shape = NA, lwd = 0.3) +
geom_line(data = average_data, aes_string(x = timepoint, y = sprintf("mean_%s", variable), group = maingroup, colour = maingroup), size = 1, alpha = 0.4) +
geom_point(aes_string(colour = maingroup), position = position_dodge(width = 0.75), size = 1.5, alpha = 0.8) +
theme_bw() +
theme(legend.position = "bottom", legend.title = element_blank()) +
labs(y = variable, x = NULL) +
stat_compare_means(method = "wilcox.test", label = "p.format",
aes_string(group = maingroup),
label.y = max_label_y)
# 색상 적용
if (!is.null(mycols)) {
p <- p + scale_fill_manual(values = mycols, labels = fill_labels) +
scale_colour_manual(values = mycols, labels = fill_labels)
}
if (!is.null(title)) {
p <- p + ggtitle(sprintf("%s (%s)", title,"wilcox.test"))
} else{
p <- p + ggtitle(sprintf("%s (%s)", maingroup, "wilcox.test"))
}
# 출력 경로 설정 및 저장
dir <- Go_path(project, pdf = "yes", table = "no", path = NULL)
pdf(sprintf("%s/groupBox3.%s.%s.%s%s%s.pdf", dir$pdf,
project,
maingroup,
ifelse(is.null(variable), "", paste(variable, ".", sep = "")),
ifelse(is.null(name), "", paste(name, ".", sep = "")),
format(Sys.Date(), "%y%m%d")), height = height, width = width)
print(p)
dev.off()
}
}
Go_groupBoxTimepoint(df = adiv,project,maingroup = "Groups2",timepoint = "DPI",outcomes =  c("Chao1","Shannon"),
fill_labels = c("MIIST305", "Vehicle"), x.axis = c("0DPI","6DPI","12DPI","21DPI","30DPI"),
mycols = adiv.col,orders = orders, name = NULL,height =3.5 , width = 5)
for(g3 in  c("Luminal", "Mucosal")){
adiv.sel <- subset(adiv, Groups3 == g3)
Go_groupBoxTimepoint(df = adiv.sel,project, maingroup = "Groups2",timepoint = "DPI",outcomes =  c("Chao1","Shannon"),
fill_labels = c("MIIST305", "Vehicle"), x.axis = c("0DPI","6DPI","12DPI","21DPI","30DPI"),
mycols = adiv.col, orders = orders, title= sprinf("%s in %s","Groups2",g3),name = NULL,
height =3.5 , width = 5)
}
for(g3 in  c("Luminal", "Mucosal")){
adiv.sel <- subset(adiv, Groups3 == g3)
Go_groupBoxTimepoint(df = adiv.sel,project, maingroup = "Groups2",timepoint = "DPI",outcomes =  c("Chao1","Shannon"),
fill_labels = c("MIIST305", "Vehicle"), x.axis = c("0DPI","6DPI","12DPI","21DPI","30DPI"),
mycols = adiv.col, orders = orders, title= sprintf("%s in %s","Groups2",g3),name = NULL,
height =3.5 , width = 5)
}
for(g3 in  c("Luminal", "Mucosal")){
adiv.sel <- subset(adiv, Groups3 == g3)
Go_groupBoxTimepoint(df = adiv.sel,project, maingroup = "Groups2",timepoint = "DPI",outcomes =  c("Chao1","Shannon"),
fill_labels = c("MIIST305", "Vehicle"), x.axis = c("0DPI","6DPI","12DPI","21DPI","30DPI"),
mycols = adiv.col, orders = orders, title= sprintf("%s in %s","Groups2",g3),name = g3,
height =3.5 , width = 5)
}
Go_boxplot(df=adiv, project = project, title = NULL, xangle = 90,  mycols = adiv.col, combination = 5,
cate.vars = "DPI", statistics = T,
outcomes = c("Chao1","Shannon"), addnumber = F, cutoff = 0.1,
orders = orders, star= F, facet = "Groups2", name = NULL,
height = 3.5, width = 5, plotCols=2, plotRows=1, standardsize = F)
Go_boxplot(df=adiv, project = project, title = NULL, xangle = 90,  mycols = adiv.col, combination = 5,
cate.vars = "DPI", statistics = T,
outcomes = c("Chao1","Shannon"), addnumber = F, cutoff = 0.1,
orders = orders, star= F, facet = "Groups3", name = NULL,
height = 3.5, width = 5, plotCols=2, plotRows=1, standardsize = F)
Go_boxplot(df=adiv, project = project, title = NULL, xangle = 90,  mycols = adiv.col, combination = 5,
cate.vars = "DPI", statistics = T,
outcomes = c("Chao1","Shannon"), addnumber = F, cutoff = 0.1,
orders = orders, star= F, facet = "Groups2", name = NULL,
height = 3.5, width = 5, plotCols=2, plotRows=1, standardsize = T)
Go_boxplot(df=adiv, project = project, title = NULL, xangle = 90,  mycols = adiv.col, combination = 5,
cate.vars = "DPI", statistics = T,
outcomes = c("Chao1","Shannon"), addnumber = F, cutoff = 0.1,
orders = orders, star= F, facet = "Groups3", name = NULL,
height = 3.5, width = 5, plotCols=2, plotRows=1, standardsize = T)
# build package
setwd("~/Dropbox/04_Scripts/R_source/Gotools")
devtools::build()
#===========================#
# upload to Gibhub on bash  #
#===========================#
# Step1 create repositiry if you need ( don't add "Readme" yet)
cd ~/Dropbox/04_Scripts/R_source/Gotools
devtools::document()
#===========================#
# upload to Gibhub on bash  #
#===========================#
# Step1 create repositiry if you need ( don't add "Readme" yet)
cd ~/Dropbox/04_Scripts/R_source/Gotools
hgit init
git add .

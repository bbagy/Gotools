return(invisible())
}
# Using safely read.csv to handle potential read errors or empty paths
safely_read_csv <- function(path) {
if (!is.na(path) && nzchar(path)) {
tryCatch({
read.csv(path, row.names=1, check.names=FALSE)
}, error = function(e) {
NULL  # return NULL if there's an error reading the file
})
} else {
NULL  # return NULL if path is NA or an empty string
}
}
return(list(
asvs = safely_read_csv(ASVs_Tab),
track = safely_read_csv(Tract_Tab),
adiv = Alpha_divTab,
lmer.tab = Alpha_div_LmerTab,
Permanova = PermanovaTab
))
}
library(rmarkdown)
#=====  Define project
Go_expInfo()
expInfo <- Go_expInfo(Project_name = "Mouse 16S microbiome â€“ Dr. Nickolas Steers",
Samples = "Mouse stool 53 samples, 53 intestine washing samples, and 10 PBS controls",
Sequencing_date = "02/02/2024",
Sequencing_platform = "Illumina MiSeq 2x300",
kit_number = 6, prep_number = 1, spikein_number = 2, authorName1="Heekuk Park",authorName2=NULL);expInfo
#===== Set directory
dirInfo <- Go_dirInfo(Current_working_dir = "~/cumc.columbia.edu/Uhlemann Lab - Microbiome Core/1_Projects/MAPS_Nic_Mic/2_Analysis/Nick_merged_240206/",
Image_locations = "/Nick_240415/pdf",
DA_image_location = "Nick_240415/pdf/DA_plot/")
#===== Set table
tabInfo <- Go_tabInfo(ASVs_Tab="1_out/updated_sequences_with_blast_results_cleaned.csv",
Tract_Tab="1_out/20240202_16S_Nick_merged.240205.track.csv",
Alpha_divTab=adiv,
Alpha_div_LmerTab=NULL,
PermanovaTab=NULL)
imgInfo <-Go_imgInfo(Rarefaction=c("rarefaction"),
Barchart=c("Genus", "Species") ,
Bac.heatmap=c("heatmap"),
Adivplot=c("adiv1","adiv2","adiv3"),
Foreplot=c("Adjusted_gender1", "Adjusted_gender2", "Adjusted_gender3", "Adjusted_gender4"),
Bdivplot=c("wunifrac","unifrac", "bray"),
DAplot=NULL)
#===== Set work directory
project<-"Nick"
currentwd <- "~/cumc.columbia.edu/Uhlemann Lab - Microbiome Core/1_Projects/MAPS_Nic_Mic/2_Analysis/Nick_merged_240206/"
setwd(sprintf("%s",currentwd))
sampledata <- read.csv("3_map/240207.Nick_merged.mapping.csv",row.names=1,check.names=F);dim(sampledata)
#===== Input 2
# Go_blastASVs(project, asvsTable="1_out/Nick.240412.psTotab.asvTable.csv", blastDB="/Users/heekukpark/DB/blastDB/16S_ribosomal_RNA")
asvs <- read.csv("1_out/updated_sequences_with_blast_results_cleaned.csv",row.names=1,check.names=FALSE);dim(asvs)
sampledata <- read.csv("3_map/240207.Nick_merged.mapping.csv",row.names=1,check.names=F);dim(sampledata)
# read tree file
files <- list.files(path = sprintf("%s/1_out/", currentwd), recursive = TRUE, full.names = TRUE)
nwk_file <- grep(".*\\.seqs\\.fna_tree/exported-tree/tree\\.nwk$", files, value = TRUE)
tree <- read_tree(nwk_file, errorIfNULL = T)
# table to ps
numberOFsample <- dim(asvs)[2]-7 ; a <- dim(asvs)[2]-6; b <-  dim(asvs)[2]
otu <- as.matrix(asvs[,1:numberOFsample])
tax <- as.matrix(asvs[,a:b])
ps.asvs <- phyloseq(otu_table(otu, taxa_are_rows=T), phy_tree(tree), tax_table(tax),sample_data(sampledata));ps.asvs
map <- data.frame(sample_data(ps.asvs))
#===== alpha diversity
adiv <- Go_adiv(psIN = ps.asvs,  project = project, alpha_metrics = c("Chao1","Shannon"));dim(adiv)
#===== html rendering
# Path to your R Markdown template
rmd_template_path <- "~/Dropbox/04_scripts/R_source/Gotool_html/20240411_Summary_report_tem_v2.Rmd"
# Specify the output file name and location
onedrive <- "~/Library/CloudStorage/OneDrive-SharedLibraries-cumc.columbia.edu/Uhlemann Lab - Microbiome Core/1_Projects/MAPS_Nic_Mic/3_Summary report/"
dropbox <- "~/Dropbox/06_Shared_CUMC/Microbiome_Core/5_Summary_Reports/3_Summary_report/2024"
output_file_path <- sprintf("%s/%s_Summary_report_%s.html", onedrive,
format(Sys.Date(), "%y%m%d"),
"Nick_16S")
# Render the Rmd file to an HTML output with a custom name and location
render(input = rmd_template_path,
output_format = "html_document",
output_file = output_file_path)
# Render the Rmd file to an HTML output with a custom name and location
render(input = rmd_template_path,
output_format = "html_document",
output_file = output_file_path)
# Check combination for the comparison
subgroup <- NULL # c("Fecal_Pellet")
# Check combination for the comparison
subgroup <- NULL # c("Fecal_Pellet")
#===== html rendering
# Path to your R Markdown template
rmd_template_path <- "~/Dropbox/04_scripts/R_source/Gotool_html/20240411_Summary_report_tem_v2.Rmd"
# Specify the output file name and location
onedrive <- "~/Library/CloudStorage/OneDrive-SharedLibraries-cumc.columbia.edu/Uhlemann Lab - Microbiome Core/1_Projects/MAPS_Nic_Mic/3_Summary report/"
dropbox <- "~/Dropbox/06_Shared_CUMC/Microbiome_Core/5_Summary_Reports/3_Summary_report/2024"
output_file_path <- sprintf("%s/%s_Summary_report_%s.html", onedrive,
format(Sys.Date(), "%y%m%d"),
"Nick_16S")
# Specify the output file name and location
onedrive <- "~/Library/CloudStorage/OneDrive-SharedLibraries-cumc.columbia.edu/Uhlemann Lab - Microbiome Core/1_Projects/MAPS_Nic_Mic/3_Summary report/"
# Render the Rmd file to an HTML output with a custom name and location
render(input = rmd_template_path,
output_format = "html_document",
output_file = output_file_path)
imgInfo <-Go_imgInfo(Rarefaction=c("rarefaction"),
Barchart=c("Genus", "Species") ,
Bac.heatmap=c("heatmap"),
Adivplot=c("adiv1","adiv2","adiv3"),
Foreplot=c("Adjusted_gender1", "Adjusted_gender2", "Adjusted_gender3", "Adjusted_gender4"),
Bdivplot=c("wunifrac","unifrac", "bray"),
DAplot=NULL)
imgInfo
# Check combination for the comparison
subgroup <- NULL # c("Fecal_Pellet")
variation <- "TreatmentGroup"
map[,variation] <- factor(map[,variation], levels = intersect(orders, map[,variation]))
cbn <- combn(x = levels(map[,variation]), m = 2)
my_comparisons <- list()
for (i in 1:ncol(cbn)) {
x <- cbn[, i]
my_comparisons[[i]] <- paste(x[1], ".vs.", x[2], sep ="")
};my_comparisons
#===== html rendering
# Path to your R Markdown template
rmd_template_path <- "~/Dropbox/04_scripts/R_source/Gotool_html/20240411_Summary_report_tem_v2.Rmd"
# Specify the output file name and location
onedrive <- "~/Library/CloudStorage/OneDrive-SharedLibraries-cumc.columbia.edu/Uhlemann Lab - Microbiome Core/1_Projects/MAPS_Nic_Mic/3_Summary report/"
dropbox <- "~/Dropbox/06_Shared_CUMC/Microbiome_Core/5_Summary_Reports/3_Summary_report/2024"
output_file_path <- sprintf("%s/%s_Summary_report_%s.html", onedrive,
format(Sys.Date(), "%y%m%d"),
"Nick_16S")
# Render the Rmd file to an HTML output with a custom name and location
render(input = rmd_template_path,
output_format = "html_document",
output_file = output_file_path)
tabInfo
#===== Set table
tabInfo <- Go_tabInfo(ASVs_Tab="1_out/updated_sequences_with_blast_results_cleaned.csv",
Tract_Tab="1_out/20240202_16S_Nick_merged.240205.track.csv",
Alpha_divTab=adiv,
Alpha_div_LmerTab=NULL,
PermanovaTab=NULL)
#===== html rendering
# Path to your R Markdown template
rmd_template_path <- "~/Dropbox/04_scripts/R_source/Gotool_html/20240411_Summary_report_tem_v2.Rmd"
# Specify the output file name and location
onedrive <- "~/Library/CloudStorage/OneDrive-SharedLibraries-cumc.columbia.edu/Uhlemann Lab - Microbiome Core/1_Projects/MAPS_Nic_Mic/3_Summary report/"
dropbox <- "~/Dropbox/06_Shared_CUMC/Microbiome_Core/5_Summary_Reports/3_Summary_report/2024"
output_file_path <- sprintf("%s/%s_Summary_report_%s.html", onedrive,
format(Sys.Date(), "%y%m%d"),
"Nick_16S")
# Render the Rmd file to an HTML output with a custom name and location
render(input = rmd_template_path,
output_format = "html_document",
output_file = output_file_path)
imgInfo
# Render the Rmd file to an HTML output with a custom name and location
render(input = rmd_template_path,
output_format = "html_document",
output_file = output_file_path)
imgInfo
#===== html rendering
# Path to your R Markdown template
rmd_template_path <- "~/Dropbox/04_scripts/R_source/Gotool_html/20240411_Summary_report_tem_v2.Rmd"
# Specify the output file name and location
onedrive <- "~/Library/CloudStorage/OneDrive-SharedLibraries-cumc.columbia.edu/Uhlemann Lab - Microbiome Core/1_Projects/MAPS_Nic_Mic/3_Summary report/"
# Render the Rmd file to an HTML output with a custom name and location
render(input = rmd_template_path,
output_format = "html_document",
output_file = output_file_path)
imgInfo <-Go_imgInfo(Rarefaction=c("rarefaction"),
Barchart=c("Genus", "Species") ,
Bac.heatmap=c("heatmap"),
Adivplot=c("adiv1","adiv2","adiv3"),
Foreplot=c("Adjusted_gender1", "Adjusted_gender2", "Adjusted_gender3", "Adjusted_gender4"),
Bdivplot=c("wunifrac","unifrac", "bray"),
DAplot= c(da.com[1], da.com[2], da.com[3]))
# Check combination for the comparison
subgroup <- NULL # c("Fecal_Pellet")
variation <- "TreatmentGroup"
map[,variation] <- factor(map[,variation], levels = intersect(orders, map[,variation]))
cbn <- combn(x = levels(map[,variation]), m = 2)
my_comparisons <- list()
for (i in 1:ncol(cbn)) {
x <- cbn[, i]
my_comparisons[[i]] <- paste(x[1], ".vs.", x[2], sep ="")
};my_comparisons
cbn <- combn(x = levels(map[,variation]), m = 2)
map[,variation] <- factor(map[,variation], levels = intersect(orders, map[,variation]))
# table to ps
numberOFsample <- dim(asvs)[2]-7 ; a <- dim(asvs)[2]-6; b <-  dim(asvs)[2]
otu <- as.matrix(asvs[,1:numberOFsample])
tax <- as.matrix(asvs[,a:b])
ps.asvs <- phyloseq(otu_table(otu, taxa_are_rows=T), phy_tree(tree), tax_table(tax),sample_data(sampledata));ps.asvs
map <- data.frame(sample_data(ps.asvs))
imgInfo <-Go_imgInfo(Rarefaction=c("rarefaction"),
Barchart=c("Genus", "Species") ,
Bac.heatmap=c("heatmap"),
Adivplot=c("adiv1","adiv2","adiv3"),
Foreplot=c("Adjusted_gender1", "Adjusted_gender2", "Adjusted_gender3", "Adjusted_gender4"),
Bdivplot=c("wunifrac","unifrac", "bray"),
DAplot= c(da.com[1], da.com[2], da.com[3]))
# Check combination for the comparison
subgroup <- NULL # c("Fecal_Pellet")
variation <- "TreatmentGroup"
map[,variation] <- factor(map[,variation], levels = intersect(orders, map[,variation]))
cbn <- combn(x = levels(map[,variation]), m = 2)
my_comparisons <- list()
for (i in 1:ncol(cbn)) {
x <- cbn[, i]
my_comparisons[[i]] <- paste(x[1], ".vs.", x[2], sep ="")
};my_comparisons
# selet for comparision
da.com <- character()
for (i in c(1,2,3)) {
da.com <- c(da.com, as.character(my_comparisons[[i]]))
};length(da.com)
map
variation <- "TreatmentGroup"
map[,variation] <- factor(map[,variation], levels = intersect(orders, map[,variation]))
orders <- unique(c("WT","KO","HT","WT_F", "KO_F", "WT_M", "KO_M", "HT_F", "HT_M", "Control", "PBS_Control", "Female_mouse", "Male_mouse", "Fecal_Pellet", "Small_Intestine_Pellet", unique(sampledata$StudyID), unique(sampledata$Description)))
#===== Orders
unique(sampledata$Description)
orders <- unique(c("WT","KO","HT","WT_F", "KO_F", "WT_M", "KO_M", "HT_F", "HT_M", "Control", "PBS_Control", "Female_mouse", "Male_mouse", "Fecal_Pellet", "Small_Intestine_Pellet", unique(sampledata$StudyID), unique(sampledata$Description)))
# Check combination for the comparison
subgroup <- NULL # c("Fecal_Pellet")
variation <- "TreatmentGroup"
map[,variation] <- factor(map[,variation], levels = intersect(orders, map[,variation]))
cbn <- combn(x = levels(map[,variation]), m = 2)
my_comparisons <- list()
for (i in 1:ncol(cbn)) {
x <- cbn[, i]
my_comparisons[[i]] <- paste(x[1], ".vs.", x[2], sep ="")
};my_comparisons
# selet for comparision
da.com <- character()
for (i in c(1,2,3)) {
da.com <- c(da.com, as.character(my_comparisons[[i]]))
};length(da.com)
da.com[1]
da.com[2]
da.com[3]
imgInfo <-Go_imgInfo(Rarefaction=c("rarefaction"),
Barchart=c("Genus", "Species") ,
Bac.heatmap=c("heatmap"),
Adivplot=c("adiv1","adiv2","adiv3"),
Foreplot=c("Adjusted_gender1", "Adjusted_gender2", "Adjusted_gender3", "Adjusted_gender4"),
Bdivplot=c("wunifrac","unifrac", "bray"),
DAplot= c(da.com[1], da.com[2], da.com[3]))
imgInfo <-Go_imgInfo(Rarefaction=c("rarefaction"),
Barchart=c("Genus", "Species") ,
Bac.heatmap=c("heatmap"),
Adivplot=c("adiv1","adiv2","adiv3"),
Foreplot=c("Adjusted_gender1", "Adjusted_gender2", "Adjusted_gender3", "Adjusted_gender4"),
Bdivplot=c("wunifrac","unifrac", "bray"),
DAplot= c(da.com[1], da.com[2], da.com[3]))
imgInfo
# Render the Rmd file to an HTML output with a custom name and location
render(input = rmd_template_path,
output_format = "html_document",
output_file = output_file_path)
# Render the Rmd file to an HTML output with a custom name and location
render(input = rmd_template_path,
output_format = "html_document",
output_file = output_file_path)
# Define a list of analysis types for looping
analysis_types <- list(
list(name = "Deseq2", prefix = "deseq2"),
list(name = "Aldex2", prefix = "aldex2"),
list(name = "ANCOMBC", prefix = "ancom2")
)
for (i in seq_along(imgInfo$daplot)) {
plot_path <- imgInfo$daplot[i]
if (!is.na(plot_path)) {
# Print the section title with tabset if the plot exists
cat("##### ", plot_path, " {.tabset}", "\n\n")
# Loop through each analysis type and generate plots
for (analysis in analysis_types) {
cat("##### ", analysis$name, "\n")
cat(sprintf("```{r %s_%d, echo=FALSE, fig.align='center', message=FALSE, warning=FALSE, out.width='70%%', eval=TRUE}\nconvert_and_include_pdf('%s', %d, subgroup, dirInfo$da.wd, '%s')\n```\n\n",
tolower(analysis$name), i, analysis$prefix, i, plot_path))
}
# Add space after the section
cat("***\n\n")
}
}
# Define a list of analysis types for looping
analysis_types <- list(
list(name = "Deseq2", prefix = "deseq2"),
list(name = "Aldex2", prefix = "aldex2"),
list(name = "ANCOMBC", prefix = "ancom2")
)
for (i in seq_along(imgInfo$daplot)) {
plot_path <- imgInfo$daplot[i]
if (!is.na(plot_path)) {
# Print the section title with tabset if the plot exists
cat("##### ", plot_path, " {.tabset}", "\n\n")
# Loop through each analysis type and generate plots
for (analysis in analysis_types) {
cat("###### ", analysis$name, "\n")
cat(sprintf("```{r %s_%d, echo=FALSE, fig.align='center', message=FALSE, warning=FALSE, out.width='70%%', eval=TRUE}\nconvert_and_include_pdf('%s', %d, subgroup, dirInfo$da.wd, '%s')\n```\n\n",
tolower(analysis$name), i, analysis$prefix, i, plot_path))
}
# Add space after the section
cat("***\n\n")
}
}
#===== html rendering
# Path to your R Markdown template
rmd_template_path <- "~/Dropbox/04_scripts/R_source/Gotool_html/20240415_Summary_report_tem_v3.Rmd"
# Render the Rmd file to an HTML output with a custom name and location
render(input = rmd_template_path,
output_format = "html_document",
output_file = output_file_path)
# Define a list of analysis types for looping
analysis_types <- list(
list(name = "Deseq2", prefix = "deseq2"),
list(name = "Aldex2", prefix = "aldex2"),
list(name = "ANCOMBC", prefix = "ancom2")
)
for (i in seq_along(imgInfo$daplot)) {
plot_path <- imgInfo$daplot[i]
if (!is.na(plot_path)) {
# Print the section title with tabset if the plot exists
cat("##### ", plot_path, " {.tabset}", "\n\n")
# Loop through each analysis type and generate plots
for (analysis in analysis_types) {
cat("###### ", analysis$name, "\n")
cat(sprintf("```{r %s_%d, echo=FALSE, fig.align='center', message=FALSE, warning=FALSE, out.width='70%%', eval=TRUE}\nconvert_and_include_pdf('%s', %d, subgroup, dirInfo$da.wd, '%s')\n```\n\n",
tolower(analysis$name), i, analysis$prefix, i, plot_path))
}
# Add space after the section
cat("***\n\n")
}
}
# Render the Rmd file to an HTML output with a custom name and location
render(input = rmd_template_path,
output_format = "html_document",
output_file = output_file_path)
# Define a list of analysis types for looping
analysis_types <- list(
list(name = "Deseq2", prefix = "deseq2"),
list(name = "Aldex2", prefix = "aldex2"),
list(name = "ANCOMBC", prefix = "ancom2")
)
for (i in seq_along(imgInfo$daplot)) {
plot_path <- imgInfo$daplot[i]
if (!is.na(plot_path)) {
# Print the section title with tabset if the plot exists
cat("#### ", plot_path, " {.tabset}", "\n\n")
# Loop through each analysis type and generate plots
for (analysis in analysis_types) {
cat("##### ", analysis$name, "\n")
cat(sprintf("```{r %s_%d, echo=FALSE, fig.align='center', message=FALSE, warning=FALSE, out.width='70%%', eval=TRUE}\nconvert_and_include_pdf('%s', %d, subgroup, dirInfo$da.wd, '%s')\n```\n\n",
tolower(analysis$name), i, analysis$prefix, i, plot_path))
}
# Add space after the section
cat("***\n\n")
}
}
# Define a list of analysis types for looping
analysis_types <- list(
list(name = "Deseq2", prefix = "deseq2"),
list(name = "Aldex2", prefix = "aldex2"),
list(name = "ANCOMBC", prefix = "ancom2")
)
for (i in seq_along(imgInfo$daplot)) {
plot_path <- imgInfo$daplot[i]
if (!is.na(plot_path)) {
# Print the section title with tabset if the plot exists
cat("#### ", plot_path, " {.tabset}", "\n\n")
# Loop through each analysis type and generate plots
for (analysis in analysis_types) {
cat("##### ", analysis$name, "\n")
cat(sprintf("```{r %s_%d, echo=FALSE, fig.align='center', message=FALSE, warning=FALSE, out.width='70%%', eval=TRUE}\nconvert_and_include_pdf('%s', %d, subgroup, dirInfo$da.wd, '%s')\n```\n\n",
tolower(analysis$name), i, analysis$prefix, i, plot_path))
}
# Add space after the section
cat("***\n\n")
}
}
convert_and_include_pdf("ancom2",3, subgroup,dirInfo$da.wd, imgInfo$daplot[3])
imgInfo <-Go_imgInfo(Rarefaction=c("rarefaction"),
Barchart=c("Genus", "Species") ,
Bac.heatmap=c("heatmap"),
Adivplot=c("adiv1","adiv2","adiv3"),
Foreplot=c("Adjusted_gender1", "Adjusted_gender2", "Adjusted_gender3", "Adjusted_gender4"),
Bdivplot=c("wunifrac","unifrac", "bray"),
DAplot= c("aldex2.volcano.TreatmentGroup.KO.vs.HT", da.com[2], da.com[3]))
imgInfo
if(!is.na(imgInfo$daplot[1])) {
cat("##### ", imgInfo$daplot[1], " {.tabset}", "\n", sep="")
}
if(!is.na(imgInfo$daplot[1])) {
cat("#### ", imgInfo$daplot[1], " {.tabset}", "\n", sep="")
}
convert_and_include_pdf("deseq2",1, subgroup,dirInfo$da.wd, imgInfo$daplot[1])
imgInfo <-Go_imgInfo(Rarefaction=c("rarefaction"),
Barchart=c("Genus", "Species") ,
Bac.heatmap=c("heatmap"),
Adivplot=c("adiv1","adiv2","adiv3"),
Foreplot=c("Adjusted_gender1", "Adjusted_gender2", "Adjusted_gender3", "Adjusted_gender4"),
Bdivplot=c("wunifrac","unifrac", "bray"),
DAplot= c("KO.vs.HT.Nick.GLM.confounder.Fecal_Pellet", da.com[2], da.com[3]))
imgInfo
convert_and_include_pdf("deseq2",1, subgroup,dirInfo$da.wd, imgInfo$daplot[1])
if(!is.na(imgInfo$daplot[1])) {
cat("#### ", imgInfo$daplot[1], " {.tabset}", "\n", sep="")
}
imgInfo <-Go_imgInfo(Rarefaction=c("rarefaction"),
Barchart=c("Genus", "Species") ,
Bac.heatmap=c("heatmap"),
Adivplot=c("adiv1","adiv2","adiv3"),
Foreplot=c("Adjusted_gender1", "Adjusted_gender2", "Adjusted_gender3", "Adjusted_gender4"),
Bdivplot=c("wunifrac","unifrac", "bray"),
DAplot= c("daplot1", da.com[2], da.com[3]))
if(!is.na(imgInfo$daplot[1])) {
cat("#### ", imgInfo$daplot[1], " {.tabset}", "\n", sep="")
}
convert_and_include_pdf("aldex2",1, subgroup, dirInfo$da.wd, imgInfo$daplot[1])
# Define a list of analysis types for looping
analysis_types <- list(
list(name = "Deseq2", prefix = "deseq2"),
list(name = "Aldex2", prefix = "aldex2"),
list(name = "ANCOMBC", prefix = "ancom2")
)
for (i in seq_along(imgInfo$daplot)) {
plot_path <- imgInfo$daplot[i]
if (!is.na(plot_path)) {
# Print the section title with tabset if the plot exists
cat("#### ", plot_path, " {.tabset}", "\n\n")
# Loop through each analysis type and generate plots
for (analysis in analysis_types) {
cat("##### ", analysis$name, "\n")
cat(sprintf("```{r %s_%d, echo=FALSE, fig.align='center', message=FALSE, warning=FALSE, out.width='70%%', eval=TRUE}\nconvert_and_include_pdf('%s', %d, subgroup, dirInfo$da.wd, '%s')\n```\n\n",
tolower(analysis$name), i, analysis$prefix, i, plot_path))
}
# Add space after the section
cat("***\n\n")
}
}
imgInfo <-Go_imgInfo(Rarefaction=c("rarefaction"),
Barchart=c("Genus", "Species") ,
Bac.heatmap=c("heatmap"),
Adivplot=c("adiv1","adiv2","adiv3"),
Foreplot=c("Adjusted_gender1", "Adjusted_gender2", "Adjusted_gender3", "Adjusted_gender4"),
Bdivplot=c("wunifrac","unifrac", "bray"),
DAplot= c("daplot1", da.com[2], da.com[3]))
# Render the Rmd file to an HTML output with a custom name and location
render(input = rmd_template_path,
output_format = "html_document",
output_file = output_file_path)
# Define a list of analysis types for looping
analysis_types <- list(
list(name = "Deseq2", prefix = "deseq2"),
list(name = "Aldex2", prefix = "aldex2"),
list(name = "ANCOMBC", prefix = "ancom2")
)
for (i in seq_along(imgInfo$daplot)) {
plot_path <- imgInfo$daplot[i]
if (!is.na(plot_path)) {
# Print the section title with tabset if the plot exists
cat("#### ", plot_path, " {.tabset}", "\n\n")
# Loop through each analysis type and generate plots
for (analysis in analysis_types) {
cat("##### ", analysis$name, "\n")
cat(sprintf("```{r %s_%d, echo=FALSE, fig.align='center', message=FALSE, warning=FALSE, out.width='70%%', eval=TRUE}\nconvert_and_include_pdf('%s', %d, subgroup, dirInfo$da.wd, '%s')\n```\n\n",
tolower(analysis$name), i, analysis$prefix, i, plot_path))
}
# Add space after the section
cat("***\n\n")
}
}
# Example data setup for demonstration in case it's not defined
imgInfo <- list(daplot = c("aldex2.volcano.Description.(Fecal_Pellet.vs.Small_Intestine_Pellet).Nick.GLM.confounder.(cutoff=1).(daplot1).240412.pdf", "aldex2.volcano.TreatmentGroup.(KO.vs.HT).Nick.GLM.confounder.Fecal_Pellet.(cutoff=1).240412.pdf", NA))
# Check and generate sections
for (i in seq_along(imgInfo$daplot)) {
if (!is.na(imgInfo$daplot[[i]])) {
plot_path <- imgInfo$daplot[[i]]
cat(sprintf("#### Plot %d: %s {.tabset}\n\n", i, plot_path))
# Example of embedding a hypothetical plot, replace with your actual function call
cat(sprintf("![Plot %d](%s)\n\n", i, plot_path))
# Separator for clarity
cat("***\n\n")
}
}
if(!is.na(imgInfo$daplot[1])) {
cat("#### ", imgInfo$daplot[1], " {.tabset}", "\n", sep="")
}
imgInfo <-Go_imgInfo(Rarefaction=c("rarefaction"),
Barchart=c("Genus", "Species") ,
Bac.heatmap=c("heatmap"),
Adivplot=c("adiv1","adiv2","adiv3"),
Foreplot=c("Adjusted_gender1", "Adjusted_gender2", "Adjusted_gender3", "Adjusted_gender4"),
Bdivplot=c("wunifrac","unifrac", "bray"),
DAplot= c("Fecal_Pellet.vs.Small_Intestine_Pellet.Nick.confounder", da.com[2], da.com[3]))
imgInfo
convert_and_include_pdf("deseq2",1, subgroup,dirInfo$da.wd, imgInfo$daplot[1])
# Render the Rmd file to an HTML output with a custom name and location
render(input = rmd_template_path,
output_format = "html_document",
output_file = output_file_path)
if(!is.na(imgInfo$daplot[2])) {
cat("##### ", imgInfo$daplot[2], " {.tabset}", "\n", sep="")
}
convert_and_include_pdf("deseq2",2, subgroup,dirInfo$da.wd, imgInfo$daplot[2])
if(!is.na(imgInfo$daplot[1])) {
cat("##### Deseq2")
}
setwd("~/Dropbox/04_Scripts/R_source/Gotools")
devtools::build()
devtools::document()

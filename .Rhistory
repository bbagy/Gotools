_HiStOrY_V2_
q()
install.package(‘cli’)\040
install.packages(‘cli’)
install.packages(‘car’)
install.packages("cli")
library(cli)
q()
###########################################
#---------     Core general     ---------#
###########################################
#-----------------------------------------#
#---------     reading R_source  ---------#
#-----------------------------------------#
dev.off()
rm(list=ls())
# ----- Libraries and functions ------#
source("~/Dropbox/04_Scripts/R_source/microbiome2/Go_tools/Go_tools.2.6.6.R")
df <- data.frame(height = c(63, 60, 65, 71, 85),
group = c("s", "s", "m", "m", "t"),
size = c("s", "s", "m", "s", "l"))
aggregate(df, by = list(df$group, df$size), FUN = length)
View(df)
options(needs.promptUser = FALSE)
if (!require("BiocManager", quietly = TRUE)) install.packages("BiocManager")
bioconductors <- c("phyloseq","microbiome","Rhtslib","dada2", "dplyr","ggpubr","ggfortify","genefilter", "ggpmisc", "msa",  "DESeq2", "ANCOMBC",
"illuminaio","rstatix","useful","DECIPHER","ComplexHeatmap")
for (bioconductor in bioconductors){
if(!bioconductor %in% installed.packages()){
library(BiocManager)
BiocManager::install(bioconductor, force = TRUE)
}else{library(bioconductor, character.only = TRUE)}
}
# ----- Libraries and functions ------#
source("~/Dropbox/04_Scripts/R_source/microbiome2/Go_tools/Go_tools.3.6.2.R")
# ----- Libraries and functions ------#
source("~/Dropbox/04_Scripts/R_source/microbiome2/Go_tools/Go_tools.3.6.2.R")
bioconductors <- c("phyloseq","microbiome","Rhtslib","dada2", "dplyr","ggpubr","ggfortify","genefilter", "ggpmisc",   "DESeq2", "ANCOMBC",  # "msa",
"illuminaio","rstatix","useful","DECIPHER","ComplexHeatmap")
for (bioconductor in bioconductors){
if(!bioconductor %in% installed.packages()){
library(BiocManager)
BiocManager::install(bioconductor, force = TRUE)
}else{library(bioconductor, character.only = TRUE)}
}
bioconductors <- c("phyloseq","microbiome","Rhtslib","dada2", "dplyr","ggpubr","ggfortify","genefilter", "ggpmisc", "DESeq2", "ANCOMBC",  "msa",
"illuminaio","rstatix","useful","DECIPHER","ComplexHeatmap")
for (bioconductor in bioconductors){
if(!bioconductor %in% installed.packages()){
library(BiocManager)
BiocManager::install(bioconductor, force = TRUE)
}else{library(bioconductor, character.only = TRUE)}
}
packages <- c("ape", "car","cluster","CLME","compositions","cowplot","crayon", "caret","colorspace",
"digest","data.table", "devtools","doParallel","ellipse", "emmeans","e1071",
"gplots","ggplot2","grid","gridExtra","gplots","ggrepel","doRNG",
"Hmisc","huge","irlba","igraph","irr","lme4","lmerTest","nnet",
"Matrix","magrittr","MASS","missForest","nlme","phangorn",#"plot3D",
"pheatmap","pkgconfig","plyr","parallel","pscl","plotly","rfUtilities",
"rlang","randomForest","readxl","RColorBrewer","ROCR","reshape","reshape2","yarrr",
"stringi","S4Vectors","tidyverse","vegan","VGAM","ShortRead") #"venneuler",
# version 1
#for (pack in packs){install.packages(sprintf("%s",pack))}
# version 2 (better version)
for (package in packages){
if(!package %in% installed.packages()){
install.packages(package)
}else{library(package, character.only = TRUE)}
}
packages <- c("ape", "car","cluster","CLME","compositions","cowplot","crayon", "caret","colorspace",
"digest","data.table", "devtools","doParallel","ellipse", "emmeans","e1071",
"gplots","ggplot2","grid","gridExtra","gplots","ggrepel","doRNG",
"Hmisc","huge","irlba","igraph","irr","lme4","lmerTest","nnet",
"Matrix","magrittr","MASS","missForest","nlme","phangorn",#"plot3D",
"pheatmap","pkgconfig","plyr","parallel","pscl","plotly","rfUtilities",
"rlang","randomForest","readxl","RColorBrewer","ROCR","reshape","reshape2","yarrr",
"stringi","S4Vectors","tidyverse","vegan","VGAM","ShortRead") #"venneuler",
# version 1
#for (pack in packs){install.packages(sprintf("%s",pack))}
# version 2 (better version)
for (package in packages){
if(!package %in% installed.packages()){
install.packages(package)
}else{library(package, character.only = TRUE)}
}
bioconductors <- c("phyloseq","microbiome","Rhtslib","dada2", "dplyr","ggpubr","ggfortify","genefilter", "ggpmisc", "DESeq2", "ANCOMBC",  "msa",
"illuminaio","rstatix","useful","DECIPHER","ComplexHeatmap")
for (bioconductor in bioconductors){
if(!bioconductor %in% installed.packages()){
library(BiocManager)
BiocManager::install(bioconductor, force = TRUE)
}else{library(bioconductor, character.only = TRUE)}
}
# ----- Libraries and functions ------#
source("~/Dropbox/04_Scripts/R_source/microbiome2/Go_tools/Go_tools.3.6.2.R")
source("~/Documents/25_Elliot/20230805_Elliott_Gotool.R", echo=TRUE)
rm(list=ls())
library("Gotools")
Gotool_dependency()
# install.packages( c('glmnet', 'torch', 'tidyverse') )
# devtools::install_github("shenhav-and-korem-labs/SCRuB")
library(SCRuB)
install.packages( c('glmnet', 'torch', 'tidyverse') )
install.packages(c("glmnet", "torch", "tidyverse"))
devtools::install_github("shenhav-and-korem-labs/SCRuB")
# install.packages( c('glmnet', 'torch', 'tidyverse') )
# devtools::install_github("shenhav-and-korem-labs/SCRuB")
library(SCRuB)
# install.packages( c('glmnet', 'torch', 'tidyverse') )
# devtools::install_github("shenhav-and-korem-labs/SCRuB")
library(SCRuB)
Gotool_dependency()
# install.packages( c('glmnet', 'torch', 'tidyverse') )
# devtools::install_github("shenhav-and-korem-labs/SCRuB")
library(SCRuB)
# install.packages( c('glmnet', 'torch', 'tidyverse') )
# devtools::install_github("shenhav-and-korem-labs/SCRuB")
library(SCRuB)
# install.packages( c('glmnet', 'torch', 'tidyverse') )
# devtools::install_github("shenhav-and-korem-labs/SCRuB")
library(SCRuB)
# ----- Input ------#
project<-"FB_merged"
setwd("~/cumc.columbia.edu/Uhlemann Lab - Microbiome Core/1_Projects/MAPS_FB_Inu/2_Analysis/")
list.files()
# -----  Run Scrub ------#
# Plate1
data1 <- read.csv('20231228_16S_Plate_1_dada2/1_out/20231228_16S_Plate_1.231231.asv.csv', row.names=1) %>% as.matrix()
data1.t <- t(data)
metadata1 <- read.csv('20231228_16S_Plate_1_dada2/3_map/20231228_16S_Plate_1_scrub.csv', row.names=1)
tax1 <- read.csv('20231228_16S_Plate_1_dada2/1_out/20231228_16S_Plate_1.231231.tax.csv', row.names=1)  %>% as.matrix()
# -----  Run Scrub ------#
# Plate1
data1 <- read.csv('20231228_16S_Plate_1_dada2/1_out/20231228_16S_Plate_1.231231.asv.csv', row.names=1) %>% as.matrix()
data1.t <- t(data1)
metadata1 <- read.csv('20231228_16S_Plate_1_dada2/3_map/20231228_16S_Plate_1_scrub.csv', row.names=1)
tax1 <- read.csv('20231228_16S_Plate_1_dada2/1_out/20231228_16S_Plate_1.231231.tax.csv', row.names=1)  %>% as.matrix()
scr_out1 <- SCRuB(input_data = data1.t,
metadata = metadata1,
control_order = c("control blank DNA extraction"))
scr_out1 <- SCRuB(input_data = data1.t,
metadata = metadata1,
control_order = c("control blank DNA extraction",
"control PCR netative",
"control positive DNA extraction"))
scr_out1 <- SCRuB(input_data = data1.t,
metadata = metadata1,
control_order = c("control blank DNA extraction","control PCR netative", "control positive DNA extraction"))
scr_out1 <- SCRuB(input_data = data1.t,
metadata = metadata1,
control_order = c("control blank DNA extraction","control PCR netative", "control positive DNA extraction"))
View(data1.t)
View(metadata1)
rownames(data1.t)
data1.t <- t(data1)
rownames(data1.t) <- gsub(".","-",rownames(data1.t))
metadata1 <- read.csv('20231228_16S_Plate_1_dada2/3_map/20231228_16S_Plate_1_scrub.csv', row.names=1)
tax1 <- read.csv('20231228_16S_Plate_1_dada2/1_out/20231228_16S_Plate_1.231231.tax.csv', row.names=1)  %>% as.matrix()
scr_out1 <- SCRuB(input_data = data1.t,
metadata = metadata1,
control_order = c("control blank DNA extraction","control PCR netative", "control positive DNA extraction"))
rownames(data1.t)
# -----  Run Scrub ------#
# Plate1
data1 <- read.csv('20231228_16S_Plate_1_dada2/1_out/20231228_16S_Plate_1.231231.asv.csv', row.names=1) %>% as.matrix()
data1.t <- t(data1)
rownames(data1.t) <- gsub(".","-",rownames(data1.t))
# -----  Run Scrub ------#
# Plate1
data1 <- read.csv('20231228_16S_Plate_1_dada2/1_out/20231228_16S_Plate_1.231231.asv.csv', row.names=1) %>% as.matrix()
data1.t <- t(data1)
rownames(data1.t) <- gsub("\\.","-",rownames(data1.t))
rownames(data1.t)
metadata1 <- read.csv('20231228_16S_Plate_1_dada2/3_map/20231228_16S_Plate_1_scrub.csv', row.names=1)
tax1 <- read.csv('20231228_16S_Plate_1_dada2/1_out/20231228_16S_Plate_1.231231.tax.csv', row.names=1)  %>% as.matrix()
scr_out1 <- SCRuB(input_data = data1.t,
metadata = metadata1,
control_order = c("control blank DNA extraction","control PCR netative", "control positive DNA extraction"))
rownames(metadata1)
rownames(data1.t) <- gsub("\\.","-",gsub("X","",rownames(data1.t)))
metadata1 <- read.csv('20231228_16S_Plate_1_dada2/3_map/20231228_16S_Plate_1_scrub.csv', row.names=1)
rownames(metadata1)
tax1 <- read.csv('20231228_16S_Plate_1_dada2/1_out/20231228_16S_Plate_1.231231.tax.csv', row.names=1)  %>% as.matrix()
scr_out1 <- SCRuB(input_data = data1.t,
metadata = metadata1,
control_order = c("control blank DNA extraction","control PCR netative", "control positive DNA extraction"))
# -----  Run Scrub ------#
# Plate1
data1 <- read.csv('20231228_16S_Plate_1_dada2/1_out/20231228_16S_Plate_1.231231.asv.csv', row.names=1) %>% as.matrix()
data1.t <- t(data1)
rownames(data1.t) <- gsub("\\.","-",gsub("X","",rownames(data1.t)))
metadata1 <- read.csv('20231228_16S_Plate_1_dada2/3_map/20231228_16S_Plate_1_scrub.csv', row.names=1)
rownames(metadata1)
tax1 <- read.csv('20231228_16S_Plate_1_dada2/1_out/20231228_16S_Plate_1.231231.tax.csv', row.names=1)  %>% as.matrix()
scr_out1 <- SCRuB(input_data = data1.t,
metadata = metadata1,
control_order = c("control blank DNA extraction","control PCR netative", "control positive DNA extraction"))
# -----  Run Scrub ------#
# Plate1
data1 <- read.csv('20231228_16S_Plate_1_dada2/1_out/20231228_16S_Plate_1.231231.asv.csv', row.names=1) %>% as.matrix()
data1.t <- t(data1)
rownames(data1.t) <- gsub("\\.","-",gsub("X","",rownames(data1.t)))
metadata1 <- read.csv('20231228_16S_Plate_1_dada2/3_map/20231228_16S_Plate_1_scrub.csv', row.names=1)
# -----  Run Scrub ------#
# Plate1
data1 <- read.csv('20231228_16S_Plate_1_dada2/1_out/20231228_16S_Plate_1.231231.asv.csv', row.names=1) %>% as.matrix()
data1.t <- t(data1)
rownames(data1.t) <- gsub("\\.","-",gsub("X","",rownames(data1.t)))
metadata1 <- read.csv('20231228_16S_Plate_1_dada2/3_map/20231228_16S_Plate_1_scrub.csv', row.names=1)
rownames(metadata1)
tax1 <- read.csv('20231228_16S_Plate_1_dada2/1_out/20231228_16S_Plate_1.231231.tax.csv', row.names=1)  %>% as.matrix()
scr_out1 <- SCRuB(input_data = data1.t,
metadata = metadata1,
control_order = c("control blank DNA extraction","control PCR netative", "control positive DNA extraction"))
rm(list=ls())
# ----- Libraries and functions ------#
source("~/Dropbox/04_Scripts/R_source/microbiome2/Go_tools/Go_tools.3.6.3.R")
# ----- Input ------#
project<-"May"
setwd("~/cumc.columbia.edu/Uhlemann Lab - Microbiome Core/1_Projects/MAPS_May_Pan/Unshared/2_Analysis/20221202_May_again/")
setwd("~/cumc.columbia.edu/Uhlemann Lab - Microbiome Core/1_Projects/MAPS_May_Pan/2_Analysis/20221202_May_again/")
setwd("~/cumc.columbia.edu/Uhlemann Lab - Microbiome Core/1_Projects/MAPS_May_Pan/2_Analysis/20221202_May_again_SCRuB/")
ps <- readRDS("2_rds/ps.fastq.221202.rds");ps
rm(list=ls())
# ----- Libraries and functions ------#
# install.packages("devtools")
# devtools::install_github("bbagy/Gotools")
library("Gotools")
Gotool_dependency()
library(SCRuB)
data <- read.csv('1_out/fastq.221202.asv.csv', row.names=1) %>% as.matrix()
data.t <- t(data)
metadata <- read.csv('3_map/20221205_SCRub.csv', row.names=1)
scr_out <- SCRuB(input_data = data.t,
metadata = metadata,
control_order = c("control blank DNA extraction"))
View(metadata)
rm(list=ls())
# ----- Libraries and functions ------#
# install.packages("devtools")
# devtools::install_github("bbagy/Gotools")
library("Gotools")
Gotool_dependency()
# install.packages( c('glmnet', 'torch', 'tidyverse') )
# devtools::install_github("shenhav-and-korem-labs/SCRuB")
library(SCRuB)
# ----- Input ------#
project<-"FB_merged"
setwd("~/cumc.columbia.edu/Uhlemann Lab - Microbiome Core/1_Projects/MAPS_FB_Inu/2_Analysis/")
list.files()
# -----  Run Scrub ------#
# Plate1
data1 <- read.csv('20231228_16S_Plate_1_dada2/1_out/20231228_16S_Plate_1.231231.asv.csv', row.names=1) %>% as.matrix()
data1.t <- t(data1)
rownames(data1.t) <- gsub("\\.","-",gsub("X","",rownames(data1.t)))
metadata1 <- read.csv('20231228_16S_Plate_1_dada2/3_map/20231228_16S_Plate_1_scrub.csv', row.names=1)
rownames(metadata1)
tax1 <- read.csv('20231228_16S_Plate_1_dada2/1_out/20231228_16S_Plate_1.231231.tax.csv', row.names=1)  %>% as.matrix()
scr_out1 <- SCRuB(input_data = data1.t,
metadata = metadata1,
control_order = c("control blank DNA extraction","control PCR netative", "control positive DNA extraction"))
scr_out1 <- SCRuB(input_data = data1.t,
metadata = metadata1,
control_order = c("control blank DNA extraction"))
# -----  Run Scrub ------#
# Plate1
data1 <- read.csv('20231228_16S_Plate_1_dada2/1_out/20231228_16S_Plate_1.231231.asv.csv', row.names=1) %>% as.matrix()
data1.t <- t(data1)
rownames(data1.t) <- gsub("\\.","-",gsub("X","",rownames(data1.t)))
metadata1 <- read.csv('20231228_16S_Plate_1_dada2/3_map/20231228_16S_Plate_1_scrub.csv', row.names=1)
rownames(metadata1)
tax1 <- read.csv('20231228_16S_Plate_1_dada2/1_out/20231228_16S_Plate_1.231231.tax.csv', row.names=1)  %>% as.matrix()
scr_out1 <- SCRuB(input_data = data1.t,
metadata = metadata1,
control_order = c("control blank DNA extraction","control PCR netative", "control positive DNA extraction"))
otu1 <- t(scr_out1$decontaminated_samples)  %>% as.matrix()
ps1 <- phyloseq(otu_table(otu1, taxa_are_rows=T), tax_table(tax1));ps
write.csv(otu1, sprintf("20231228_16S_Plate_1_dada2/1_out/%s.%s.SCRuB.ASVs.p1.csv", format(Sys.Date(), "%y%m%d"), project))
ps1 <- phyloseq(otu_table(otu1, taxa_are_rows=T), tax_table(tax1));ps1
# Plate2
data2 <- read.csv('20231228_16S_Plate_2_dada2/1_out/20231228_16S_Plate_2.231231.asv.csv', row.names=1) %>% as.matrix()
data2.t <- t(data2)
rownames(data2.t) <- gsub("\\.","-",gsub("X","",rownames(data2.t)))
metadata2 <- read.csv('20231228_16S_Plate_2_dada2/3_map/20231228_16S_Plate_2_scrub.csv', row.names=1)
tax2 <- read.csv('20231228_16S_Plate_2_dada2/1_out/20231228_16S_Plate_2.231231.tax.csv', row.names=1)  %>% as.matrix()
scr_out2 <- SCRuB(input_data = data2.t,
metadata = metadata2,
control_order = c("control blank DNA extraction"))
otu2 <- t(scr_out2$decontaminated_samples)  %>% as.matrix()
ps2 <- phyloseq(otu_table(otu2, taxa_are_rows=T), tax_table(tax2));ps2
write.csv(otu2, sprintf("20231228_16S_Plate_2_dada2/1_out/%s.%s.SCRuB.ASVs.p2.csv", format(Sys.Date(), "%y%m%d"), project))
# Plate3
data3 <- read.csv('20231228_16S_Plate_3_dada2/1_out/20231228_16S_Plate_3.231231.asv.csv', row.names=1) %>% as.matrix()
data3.t <- t(data3)
rownames(data3.t) <- gsub("\\.","-",gsub("X","",rownames(data3.t)))
metadata3 <- read.csv('20231228_16S_Plate_2_dada2/3_map/20231228_16S_Plate_3_scrub.csv', row.names=1)
metadata3 <- read.csv('20231228_16S_Plate_3_dada2/3_map/20231228_16S_Plate_3_scrub.csv', row.names=1)
# Plate3
data3 <- read.csv('20231228_16S_Plate_3_dada2/1_out/20231228_16S_Plate_3.231231.asv.csv', row.names=1) %>% as.matrix()
data3.t <- t(data3)
rownames(data3.t) <- gsub("\\.","-",gsub("X","",rownames(data3.t)))
metadata3 <- read.csv('20231228_16S_Plate_3_dada2/3_map/20231228_16S_Plate_3_scrub.csv', row.names=1)
tax3 <- read.csv('20231228_16S_Plate_3_dada2/1_out/20231228_16S_Plate_3.231231.tax.csv', row.names=1)  %>% as.matrix()
scr_out3 <- SCRuB(input_data = data3.t,
metadata = metadata3,
control_order = c("control blank DNA extraction"))
# Plate3
data3 <- read.csv('20231228_16S_Plate_3_dada2/1_out/20231228_16S_Plate_3.231231.asv.csv', row.names=1) %>% as.matrix()
data3.t <- t(data3)
rownames(data3.t) <- gsub("\\.","-",gsub("X","",rownames(data3.t)))
metadata3 <- read.csv('20231228_16S_Plate_3_dada2/3_map/20231228_16S_Plate_3_scrub.csv', row.names=1)
tax3 <- read.csv('20231228_16S_Plate_3_dada2/1_out/20231228_16S_Plate_3.231231.tax.csv', row.names=1)  %>% as.matrix()
scr_out3 <- SCRuB(input_data = data3.t,
metadata = metadata3,
control_order = c("control blank DNA extraction"))
otu3 <- t(scr_out3$decontaminated_samples)  %>% as.matrix()
ps3 <- phyloseq(otu_table(otu3, taxa_are_rows=T), tax_table(tax3));ps3
write.csv(otu, sprintf("20231228_16S_Plate_1_dada2/1_out/%s.%s.SCRuB.ASVs.p1.csv", format(Sys.Date(), "%y%m%d"), project))
write.csv(otu3, sprintf("20231228_16S_Plate_1_dada2/1_out/%s.%s.SCRuB.ASVs.p1.csv", format(Sys.Date(), "%y%m%d"), project))
devtools::install_github("bbagy/Gotools")
# ----- Libraries and functions ------#
# install.packages("devtools")
# devtools::install_github("bbagy/Gotools")
library("Gotools")
Gotool_dependency()
# Go_emptyMap(ps,project)
# install.packages( c('glmnet', 'torch', 'tidyverse') )
# devtools::install_github("shenhav-and-korem-labs/SCRuB")
library(SCRuB)
# ----- Input ------#
project<-"FB_merged"
setwd("~/cumc.columbia.edu/Uhlemann Lab - Microbiome Core/1_Projects/MAPS_FB_Inu/2_Analysis/")
Go_emptyMap(ps,project)
# ----- Input ------#
project<-"FB_merged"
setwd("~/cumc.columbia.edu/Uhlemann Lab - Microbiome Core/1_Projects/MAPS_FB_Inu/2_Analysis/")
list.files()
# -----  Run Scrub ------#
# Plate1
data1 <- read.csv('20231228_16S_Plate_1_dada2/1_out/20231228_16S_Plate_1.231231.asv.csv', row.names=1) %>% as.matrix()
data1.t <- t(data1)
rownames(data1.t) <- gsub("\\.","-",gsub("X","",rownames(data1.t)))
metadata1 <- read.csv('20231228_16S_Plate_1_dada2/3_map/20231228_16S_Plate_1_scrub.csv', row.names=1)
rownames(metadata1)
tax1 <- read.csv('20231228_16S_Plate_1_dada2/1_out/20231228_16S_Plate_1.231231.tax.csv', row.names=1)  %>% as.matrix()
scr_out1 <- SCRuB(input_data = data1.t,
metadata = metadata1,
control_order = c("control blank DNA extraction","control PCR netative", "control positive DNA extraction"))
otu1 <- t(scr_out1$decontaminated_samples)  %>% as.matrix()
ps1 <- phyloseq(otu_table(otu1, taxa_are_rows=T), tax_table(tax1));ps1
Go_emptyMap(ps1,project)
devtools::install_github("bbagy/Gotools")
Go_emptyMap(ps1,project)
project
Go_emptyMap(ps1,project)
devtools::install_github("bbagy/Gotools")
library("Gotools")
Gotool_dependency()
Go_emptyMap(ps1,project)
project
# ----- Input ------#
project<-"FB_merged"
setwd("~/cumc.columbia.edu/Uhlemann Lab - Microbiome Core/1_Projects/MAPS_FB_Inu/2_Analysis/")
list.files()
# -----  Run Scrub ------#
# Plate1
data1 <- read.csv('20231228_16S_Plate_1_dada2/1_out/20231228_16S_Plate_1.231231.asv.csv', row.names=1) %>% as.matrix()
data1.t <- t(data1)
rownames(data1.t) <- gsub("\\.","-",gsub("X","",rownames(data1.t)))
metadata1 <- read.csv('20231228_16S_Plate_1_dada2/3_map/20231228_16S_Plate_1_scrub.csv', row.names=1)
rownames(metadata1)
tax1 <- read.csv('20231228_16S_Plate_1_dada2/1_out/20231228_16S_Plate_1.231231.tax.csv', row.names=1)  %>% as.matrix()
scr_out1 <- SCRuB(input_data = data1.t,
metadata = metadata1,
control_order = c("control blank DNA extraction","control PCR netative", "control positive DNA extraction"))
otu1 <- t(scr_out1$decontaminated_samples)  %>% as.matrix()
ps1 <- phyloseq(otu_table(otu1, taxa_are_rows=T), tax_table(tax1));ps1
write.csv(otu1, sprintf("20231228_16S_Plate_1_dada2/1_out/%s.%s.SCRuB.ASVs.p1.csv", format(Sys.Date(), "%y%m%d"), project))
# Plate2
data2 <- read.csv('20231228_16S_Plate_2_dada2/1_out/20231228_16S_Plate_2.231231.asv.csv', row.names=1) %>% as.matrix()
data2.t <- t(data2)
rownames(data2.t) <- gsub("\\.","-",gsub("X","",rownames(data2.t)))
metadata2 <- read.csv('20231228_16S_Plate_2_dada2/3_map/20231228_16S_Plate_2_scrub.csv', row.names=1)
tax2 <- read.csv('20231228_16S_Plate_2_dada2/1_out/20231228_16S_Plate_2.231231.tax.csv', row.names=1)  %>% as.matrix()
scr_out2 <- SCRuB(input_data = data2.t,
metadata = metadata2,
control_order = c("control blank DNA extraction"))
otu2 <- t(scr_out2$decontaminated_samples)  %>% as.matrix()
ps2 <- phyloseq(otu_table(otu2, taxa_are_rows=T), tax_table(tax2));ps2
write.csv(otu2, sprintf("20231228_16S_Plate_2_dada2/1_out/%s.%s.SCRuB.ASVs.p2.csv", format(Sys.Date(), "%y%m%d"), project))
# Plate3
data3 <- read.csv('20231228_16S_Plate_3_dada2/1_out/20231228_16S_Plate_3.231231.asv.csv', row.names=1) %>% as.matrix()
data3.t <- t(data3)
rownames(data3.t) <- gsub("\\.","-",gsub("X","",rownames(data3.t)))
metadata3 <- read.csv('20231228_16S_Plate_3_dada2/3_map/20231228_16S_Plate_3_scrub.csv', row.names=1)
tax3 <- read.csv('20231228_16S_Plate_3_dada2/1_out/20231228_16S_Plate_3.231231.tax.csv', row.names=1)  %>% as.matrix()
scr_out3 <- SCRuB(input_data = data3.t,
metadata = metadata3,
control_order = c("control blank DNA extraction"))
otu3 <- t(scr_out3$decontaminated_samples)  %>% as.matrix()
ps3 <- phyloseq(otu_table(otu3, taxa_are_rows=T), tax_table(tax3));ps3
write.csv(otu3, sprintf("20231228_16S_Plate_1_dada2/1_out/%s.%s.SCRuB.ASVs.p1.csv", format(Sys.Date(), "%y%m%d"), project))
# Plate4
data4 <- read.csv('20231228_16S_Plate_4_dada2/1_out/20231228_16S_Plate_4.231231.asv.csv', row.names=1) %>% as.matrix()
rownames(data4.t) <- gsub("\\.","-",gsub("X","",rownames(data4.t)))
# Plate4
data4 <- read.csv('20231228_16S_Plate_4_dada2/1_out/20231228_16S_Plate_4.231231.asv.csv', row.names=1) %>% as.matrix()
data4.t <- t(data4)
rownames(data4.t) <- gsub("\\.","-",gsub("X","",rownames(data4.t)))
metadata4 <- read.csv('20231228_16S_Plate_4_dada2/3_map/20231228_16S_Plate_4_scrub.csv', row.names=1)
metadata4 <- read.csv('20231228_16S_Plate_4_dada2/3_map/20231228_16S_Plate_4_scrub_needtoheck.csv', row.names=1)
tax4 <- read.csv('20231228_16S_Plate_4_dada2/1_out/20231228_16S_Plate_4.231231.tax.csv', row.names=1)  %>% as.matrix()
scr_out4 <- SCRuB(input_data = data4.t,
metadata = metadata4,
control_order = c("control blank DNA extraction"))
otu4 <- t(scr_out4$decontaminated_samples)  %>% as.matrix()
ps4 <- phyloseq(otu_table(otu4, taxa_are_rows=T), tax_table(tax4));ps
# merge all phyloseq object
ps <- merge_phyloseq(ps1, ps2, ps3, ps4);ps
dir <- Go_path(project, pdf="no", table="no", path="2_rds")
dir <- Go_path(project, pdf="no", table="no", path="1_out")
# ----- Libraries and functions ------#
# install.packages("devtools")
# devtools::install_github("bbagy/Gotools")
library("Gotools")
# merge all phyloseq object
ps <- merge_phyloseq(ps1, ps2, ps3, ps4);ps
dir <- Go_path(project, pdf="no", table="no", path="2_rds")
dir <- Go_path(project, pdf="no", table="no", path="1_out")
saveRDS(ps, sprintf("%s/ps.merged.%s.%s.rds", dir,project, format(Sys.Date(), "%y%m%d")))
# merge all phyloseq object
ps <- merge_phyloseq(ps1, ps2, ps3, ps4);ps
Go_path()
# ----- Libraries and functions ------#
# install.packages("devtools")
# devtools::install_github("bbagy/Gotools")
source("~/Dropbox/04_Scripts/R_source/microbiome3/Go_tools/Go_tools.5.0.1.R")
# merge all phyloseq object
ps <- merge_phyloseq(ps1, ps2, ps3, ps4);ps
dir <- Go_path(project, pdf="no", table="no", path="2_rds")
dir <- Go_path(project, pdf="no", table="no", path="1_out")
saveRDS(ps, sprintf("%s/ps.merged.%s.%s.rds", dir,project, format(Sys.Date(), "%y%m%d")))
saveRDS(ps, sprintf("%s/ps.merged.%s.%s.rds", dirRDS ,project, format(Sys.Date(), "%y%m%d")))
dirRDS <- Go_path(project, pdf="no", table="no", path="2_rds")
dirOUT <- Go_path(project, pdf="no", table="no", path="1_out")
saveRDS(ps, sprintf("%s/ps.merged.%s.%s.rds", dirRDS ,project, format(Sys.Date(), "%y%m%d")))
rm(list=ls())
devtools::install_github("bbagy/Gotools")
devtools::install_github("bbagy/Gotools")
devtools::install_github("bbagy/Gotools",force = TRUE)
devtools::install_github("bbagy/Gotools",force = TRUE)
library("Gotools")
Go_path()
?Go_path()
# ----- Input ------#
project<-"FB_merged"
setwd("~/cumc.columbia.edu/Uhlemann Lab - Microbiome Core/1_Projects/MAPS_FB_Inu/2_Analysis/")
dirRDS <- Go_path(project, pdf="no", table="no", path="2_rds")
?Go_path()
Go_path(project, pdf="no", table="no", path="2_rds")
source("Go_path.r")
devtools::install_github("bbagy/Gotools",force = TRUE)
devtools::install_github("bbagy/Gotools",force = TRUE)
# ----- Libraries and functions ------#
# install.packages("devtools")
# devtools::install_github("bbagy/Gotools",force = TRUE)
# source("~/Dropbox/04_Scripts/R_source/microbiome3/Go_tools/Go_tools.5.0.1.R")
library("Gotools")
Go_path()
?Go_path()
cd ~/Dropbox/04_Scripts/R_source/Gotools
devtools::install_github("bbagy/Gotools",force = TRUE)
# ----- Libraries and functions ------#
# install.packages("devtools")
# devtools::install_github("bbagy/Gotools",force = TRUE)
# source("~/Dropbox/04_Scripts/R_source/microbiome3/Go_tools/Go_tools.5.0.1.R")
library("Gotools")
?Go_path()
?Go_adiv()
?Go_path()
?Go_adiv()
# build package
setwd("~/Dropbox/04_Scripts/R_source/Gotools")
devtools::build()
devtools::document()
create_package(path = "~/Dropbox/04_Scripts/R_source/Gotools")
# build package
setwd("~/Dropbox/04_Scripts/R_source/Gotools")
devtools::build()
devtools::document()
# build package
setwd("~/Dropbox/04_Scripts/R_source/Gotools")
devtools::build()
# build package
setwd("~/Dropbox/04_Scripts/R_source/Gotools")
devtools::build()
devtools::build()
devtools::document()

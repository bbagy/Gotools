cols3 <- Go_myCols(custumCols = "cols3")
# colors
mycols <- Go_myCols(piratepal = "info2")
barplot <- Go_myCols(custum = "cols3")
# setting
overview <- read.csv("1_out/sample_overview.csv",row.names=1,check.names=F);head(overview)
orders <- c(unique(rownames(overview)), all_samples)
variation <- c("Timepoint")
facet <- NULL
track <- suppressWarnings(
list.files(path = sprintf("%s/1_out/",curretwd), pattern = "\\_counts\\.csv$", full.names = TRUE) %>%
map_dfr(function(file) {
suppressMessages(read_csv(file, col_names = TRUE, show_col_types = FALSE))
})
)
datatable(track, extensions = 'Buttons', options = list(
dom = 'frtipB',
buttons = c('excel','csv'),
pageLength = 20,
scrollX = TRUE,
scrollY = "300px"
))
BiocManager::install("scater")
# ----- Libraries and functions ------#
# source("~/Dropbox/04_Scripts/R_source/microbiome3/Go_tools/Go_tools.5.0.R")
library("Gotools")
install.packages("scater")
BiocManager::install("scater")
BiocManager::install("densvis")
library(densvis)
BiocManager::install("gfortran")
Gotool_dependency()
BiocManager::install("ANCOMBC")
library(ANCOMBC)
BiocManager::install("scater")
BiocManager::install("scater")
BiocManager::install("scater")
library(ANCOMBC)
# ----- Libraries and functions ------#
# source("~/Dropbox/04_Scripts/R_source/microbiome3/Go_tools/Go_tools.5.0.R")
library("Gotools")
devtools::install_github("bbagy/Gotools") # or install.packages("Gomarkdown_0.0.0.9000.tar.gz", repos = NULL, type="source")
devtools::install_github("bbagy/Gotools")
install.packages("devtools")
devtools::install_github("bbagy/Gotools")
library("Gotools")
Gotool_dependency()
# ----- Libraries and functions ------#
#source("~/Dropbox/04_Scripts/R_source/microbiome3/Go_tools/Go_tools.4.0.8.R")
#install.packages("devtools")
devtools::install_github("bbagy/Gotools")
# ----- Libraries and functions ------#
#source("~/Dropbox/04_Scripts/R_source/microbiome3/Go_tools/Go_tools.4.0.8.R")
#install.packages("devtools")
library(devtools)
devtools::install_github("bbagy/Gotools")
#install.packages("devtools")
library(devtools)
devtools::install_github("bbagy/Gotools") # or install.packages("Gomarkdown_0.0.0.9000.tar.gz", repos = NULL, type="source")
#install.packages("devtools")
library(devtools)
devtools::install_github("bbagy/Gotools") # or install.packages("Gomarkdown_0.0.0.9000.tar.gz", repos = NULL, type="source")
#install.packages("devtools")
library(devtools)
devtools::install_github("bbagy/Gotools") # or install.packages("Gomarkdown_0.0.0.9000.tar.gz", repos = NULL, type="source")
for (package in bioconductor_packages) {
install_load_bioc(package)
}
bioconductor_packages <- c("phyloseq", "microbiome", "Rhtslib", "dada2", "dplyr",
"ggpubr", "ggfortify", "genefilter", "ggpmisc", "S4Vectors",
"ShortRead", "illuminaio", "rstatix", "useful", "DECIPHER",
"ComplexHeatmap", "DESeq2", "ALDEx2","scater")
for (package in bioconductor_packages) {
install_load_bioc(package)
}
install_load_bioc <- function(package) {
if (!require(package, character.only = TRUE, quietly = TRUE)) {
if (!require("BiocManager", quietly = TRUE)) {
install.packages("BiocManager")
}
BiocManager::install(package, force = TRUE, ask = FALSE, type = "source")
}
library(package, character.only = TRUE, quietly = TRUE)
}
# Installing and loading CRAN packages
for (package in cran_packages) {
install_load_cran(package)
}
bioconductor_packages <- c("phyloseq", "microbiome", "Rhtslib", "dada2", "dplyr",
"ggpubr", "ggfortify", "genefilter", "ggpmisc", "S4Vectors",
"ShortRead", "illuminaio", "rstatix", "useful", "DECIPHER",
"ComplexHeatmap", "DESeq2", "ALDEx2","scater")
for (package in bioconductor_packages) {
install_load_bioc(package)
}
library(dada2)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("dada2", version = "3.11")
BiocManager::install("dada2")
BiocManager::install("dada2")
BiocManager::install("Rsamtools", verbose = TRUE)
BiocManager::install("Rsamtools", verbose = TRUE)
BiocManager::install("Rsamtools", verbose = TRUE)
BiocManager::install("Rsamtools", verbose = TRUE)
BiocManager::install("Rsamtools", verbose = TRUE)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("dada2")
BiocManager::install("Rsamtools", verbose = TRUE)
library(Rsamtools)
# Function to install and load Bioconductor packages
install_load_bioc <- function(package) {
if (!require(package, character.only = TRUE, quietly = TRUE)) {
if (!require("BiocManager", quietly = TRUE)) {
install.packages("BiocManager")
}
BiocManager::install(package, force = TRUE, ask = FALSE, type = "source")
}
library(package, character.only = TRUE, quietly = TRUE)
}
# Installing and loading CRAN packages
bioconductor_packages <- c("phyloseq", "microbiome", "Rhtslib", "dada2", "dplyr",
"ggpubr", "ggfortify", "genefilter", "ggpmisc", "S4Vectors",
"ShortRead", "illuminaio", "rstatix", "useful", "DECIPHER",
"ComplexHeatmap", "DESeq2", "ALDEx2","scater")
for (package in bioconductor_packages) {
install_load_bioc(package)
}
# Function to install and load Bioconductor packages
install_load_bioc <- function(package) {
if (!require(package, character.only = TRUE, quietly = TRUE)) {
if (!require("BiocManager", quietly = TRUE)) {
install.packages("BiocManager")
}
BiocManager::install(package, force = TRUE, ask = FALSE, type = "source")
}
library(package, character.only = TRUE, quietly = TRUE)
}
# Installing and loading CRAN packages
bioconductor_packages <- c("phyloseq", "microbiome", "Rhtslib", "dada2", "dplyr",
"ggpubr", "ggfortify", "genefilter", "ggpmisc", "S4Vectors",
"ShortRead", "illuminaio", "rstatix", "useful", "DECIPHER",
"ComplexHeatmap", "DESeq2", "ALDEx2")#,"scater"
for (package in bioconductor_packages) {
install_load_bioc(package)
}
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("dada2")
library(dada2)
library(dada2)
BiocManager::install("Rsamtools", verbose = TRUE)
# Function to install and load Bioconductor packages
install_load_bioc <- function(package) {
if (!require(package, character.only = TRUE, quietly = TRUE)) {
if (!require("BiocManager", quietly = TRUE)) {
install.packages("BiocManager")
}
BiocManager::install(package, force = TRUE, ask = FALSE, type = "source")
}
library(package, character.only = TRUE, quietly = TRUE)
}
# Installing and loading CRAN packages
bioconductor_packages <- c("phyloseq", "microbiome", "Rhtslib", "dada2", "dplyr",
"ggpubr", "ggfortify", "genefilter", "ggpmisc", "S4Vectors",
"ShortRead", "illuminaio", "rstatix", "useful", "DECIPHER",
"ComplexHeatmap", "DESeq2", "ALDEx2")#,"scater"
for (package in bioconductor_packages) {
install_load_bioc(package)
}
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("dada2")
library(dada2)
BiocManager::install("scater", verbose = TRUE)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("scater", verbose = TRUE)
BiocManager::install("scater", verbose = TRUE,force = TRUE`)
BiocManager::install("scater", verbose = TRUE,force = TRUE)
# Installing and loading CRAN packages
bioconductor_packages <- c("phyloseq", "microbiome", "Rhtslib", "dada2", "dplyr",
"ggpubr", "ggfortify", "genefilter", "ggpmisc", "S4Vectors",
"ShortRead", "illuminaio", "rstatix", "useful", "DECIPHER",
"ComplexHeatmap", "DESeq2", "ALDEx2","scater")
for (package in bioconductor_packages) {
install_load_bioc(package)
}
# Function to install and load Bioconductor packages
install_load_bioc <- function(package) {
if (!require(package, character.only = TRUE, quietly = TRUE)) {
if (!require("BiocManager", quietly = TRUE)) {
install.packages("BiocManager")
}
BiocManager::install(package, force = TRUE, ask = FALSE, type = "source")
}
library(package, character.only = TRUE, quietly = TRUE)
}
# Installing and loading CRAN packages
bioconductor_packages <- c("phyloseq", "microbiome", "Rhtslib", "dada2", "dplyr",
"ggpubr", "ggfortify", "genefilter", "ggpmisc", "S4Vectors",
"ShortRead", "illuminaio", "rstatix", "useful", "DECIPHER",
"ComplexHeatmap", "DESeq2", "ALDEx2","scater")
for (package in bioconductor_packages) {
install_load_bioc(package)
}
Gotool_dependency <- function() {
# Packages to install from CRAN
cran_packages <- c("ape", "Boruta", "car", "cluster", "CLME", "compositions",
"cowplot", "crayon", "caret", "colorspace", "digest",
"data.table", "devtools", "doParallel", "ellipse", "emmeans",
"e1071", "gplots", "ggplot2", "grid", "gridExtra", "ggrepel",
"doRNG", "ggalluvial", "ggforce", "Hmisc", "irlba", "huge",  "igraph",
"irr", "lme4", "lmerTest", "nnet", "MLmetrics",
"Matrix", "magrittr", "MASS", "missForest", "magick", "nlme",
"phangorn", "pheatmap", "pkgconfig", "dplyr", "parallel", "pscl",
"plotly", "pdftools", "rfUtilities", "rlang", "randomForest",
"readxl", "RColorBrewer", "ROCR", "reshape", "reshape2", "yarrr",
"stringi", "tidyverse", "vegan", "VGAM", "picante", "zoo",
"RcppZiggurat", "Rfast", "survival", "withr", "knitr", "kableExtra", "DT")
# Packages to install from Bioconductor
bioconductor_packages <- c("phyloseq", "microbiome", "Rhtslib", "dada2", "dplyr",
"ggpubr", "ggfortify", "genefilter", "ggpmisc", "S4Vectors",
"ShortRead", "illuminaio", "rstatix", "useful", "DECIPHER",
"ComplexHeatmap", "DESeq2", "ALDEx2","scater")
# Function to install and load CRAN packages
install_load_cran <- function(package) {
if (!require(package, character.only = TRUE, quietly = TRUE)) {
install.packages(package)
}
library(package, character.only = TRUE, quietly = TRUE)
}
# Function to install and load Bioconductor packages
install_load_bioc <- function(package) {
if (!require(package, character.only = TRUE, quietly = TRUE)) {
if (!require("BiocManager", quietly = TRUE)) {
install.packages("BiocManager")
}
BiocManager::install(package, force = TRUE, ask = FALSE, type = "source")
}
library(package, character.only = TRUE, quietly = TRUE)
}
# Installing and loading CRAN packages
for (package in cran_packages) {
install_load_cran(package)
}
# Installing and loading Bioconductor packages
for (package in bioconductor_packages) {
install_load_bioc(package)
}
# Print success message
if (require("crayon", quietly = TRUE)) {
cat(crayon::blue("#--------------------------------------------------------------# \n"))
cat(crayon::blue("#------       General analysis Of microbiome (Go)        ------# \n"))
cat(crayon::blue("#------    Quick statistics and visualization tools      ------# \n"))
cat(crayon::blue("#------                (with R markdown)                 ------# \n"))
cat(crayon::blue("#--------------------------------------------------------------# \n"))
cat(crayon::yellow("All the required packages were installed and loaded.\n"))
cat(crayon::blue("#--------------------------------------------------------------# \n"))
} else {
cat("#--------------------------------------------------------------# \n")
cat("All the required packages were installed and loaded.\n")
cat("#--------------------------------------------------------------# \n")
}
}
Gotool_dependency()
Gotool_dependency <- function() {
# Packages to install from CRAN
cran_packages <- c("ape", "Boruta", "car", "cluster", "CLME", "compositions",
"cowplot", "crayon", "caret", "colorspace", "digest",
"data.table", "devtools", "doParallel", "ellipse", "emmeans",
"e1071", "gplots", "ggplot2", "grid", "gridExtra", "ggrepel",
"doRNG", "ggalluvial", "ggforce", "Hmisc", "irlba", "huge",  "igraph",
"irr", "lme4", "lmerTest", "nnet", "MLmetrics",
"Matrix", "magrittr", "MASS", "missForest", "magick", "nlme",
"phangorn", "pheatmap", "pkgconfig", "dplyr", "parallel", "pscl",
"plotly", "pdftools", "rfUtilities", "rlang", "randomForest",
"readxl", "RColorBrewer", "ROCR", "reshape", "reshape2", "yarrr",
"stringi", "tidyverse", "vegan", "VGAM", "picante", "zoo",
"RcppZiggurat", "Rfast", "survival", "withr", "knitr", "kableExtra", "DT","shiny")
# Packages to install from Bioconductor
bioconductor_packages <- c("phyloseq", "microbiome", "Rhtslib", "dada2", "dplyr",
"ggpubr", "ggfortify", "genefilter", "ggpmisc", "S4Vectors",
"ShortRead", "illuminaio", "rstatix", "useful", "DECIPHER",
"ComplexHeatmap", "DESeq2", "ALDEx2","scater")
# Function to install and load CRAN packages
install_load_cran <- function(package) {
if (!require(package, character.only = TRUE, quietly = TRUE)) {
install.packages(package)
}
library(package, character.only = TRUE, quietly = TRUE)
}
# Function to install and load Bioconductor packages
install_load_bioc <- function(package) {
if (!require(package, character.only = TRUE, quietly = TRUE)) {
if (!require("BiocManager", quietly = TRUE)) {
install.packages("BiocManager")
}
BiocManager::install(package, force = TRUE, ask = FALSE, type = "source")
}
library(package, character.only = TRUE, quietly = TRUE)
}
# Installing and loading CRAN packages
for (package in cran_packages) {
install_load_cran(package)
}
# Installing and loading Bioconductor packages
for (package in bioconductor_packages) {
install_load_bioc(package)
}
# Print success message
if (require("crayon", quietly = TRUE)) {
cat(crayon::blue("#--------------------------------------------------------------# \n"))
cat(crayon::blue("#------       General analysis Of microbiome (Go)        ------# \n"))
cat(crayon::blue("#------    Quick statistics and visualization tools      ------# \n"))
cat(crayon::blue("#------                (with R markdown)                 ------# \n"))
cat(crayon::blue("#--------------------------------------------------------------# \n"))
cat(crayon::yellow("All the required packages were installed and loaded.\n"))
cat(crayon::blue("#--------------------------------------------------------------# \n"))
} else {
cat("#--------------------------------------------------------------# \n")
cat("All the required packages were installed and loaded.\n")
cat("#--------------------------------------------------------------# \n")
}
}
# ----- Libraries and functions ------#
# source("~/Dropbox/04_Scripts/R_source/microbiome3/Go_tools/Go_tools.5.0.1.R")
# devtools::install_github("bbagy/Gotools")
library("Gotools")
Gotool_dependency()
tools::package_dependencies("shiny", which = c("Depends", "Imports"), recursive = TRUE)
devtools::install_github("bbagy/Gotools")
#install.packages("devtools")
library(devtools)
devtools::install_github("bbagy/Gotools") # or install.packages("Gomarkdown_0.0.0.9000.tar.gz", repos = NULL, type="source")
#install.packages("devtools")
library(devtools)
devtools::install_github("bbagy/Gotools") # or install.packages("Gomarkdown_0.0.0.9000.tar.gz", repos = NULL, type="source")
library("Gotools")
#install.packages("devtools")
library(devtools)
devtools::install_github("bbagy/Gotools") # or install.packages("Gomarkdown_0.0.0.9000.tar.gz", repos = NULL, type="source")
library("Gotools")
Gotool_dependency()
devtools::install_github("bbagy/Gotools",force = TRUE)
install.packages("devtools")
#install.packages("devtools")
library(devtools)
devtools::install_github("bbagy/Gotools") # or install.packages("Gomarkdown_0.0.0.9000.tar.gz", repos = NULL, type="source")
#install.packages("devtools")
library(devtools)
install.packages(c("usethis", "pkgdown"))
install.packages("devtools")
install.packages(c("openssl", "systemfonts", "credentials", "httr", "httr2", "gert", "gh", "usethis", "pkgdown"))
install.packages("devtools")
install.packages("devtools")
# install.packages("devtools")
library(devtools)
devtools::install_github("bbagy/Gotools") # or install.packages("Gomarkdown_0.0.0.9000.tar.gz", repos = NULL, type="source")
library("Gotools")
library("Gotools")
Gotool_dependency()
#===== Read Go_tools
# devtools::install_github("bbagy/Gotools")
library("Gotools")
rm(list=ls())
# ----- Libraries and functions ------#
# devtools::install_github("bbagy/Gotools", force=T)
library("Gotools")
#=============================#
#----    Set analysis    -----#
#=============================#
source("/Users/heekukpark/Dropbox/04_scripts/R_source/R_storage/1_R_History/2024/FB_Inuline/20240410_FB_Rmd_starter.R")
#===== Read Go_tools
# devtools::install_github("bbagy/Gotools", force=T)
library("Gotools")
Gotool_dependency()
project_name <- "Prebiotic (Inuline) 16S microbiome – Dr. Daniel Freedberg"
samples <- "344 (94 Participants)"
Sequencing.date <- "12/28/2023"
platform <- "Illumina MiSeq 2x300"
contact_email <- "hp2523@cumc.columbia.edu"
expInfo <- Go_expInfo(kit_number = 6,prep_number = 1, spikein_number = 2)
devtools::install_github("bbagy/Gotools", force=T)
#===== Read Go_tools
# devtools::install_github("bbagy/Gotools", force=T)
library("Gotools")
Gotool_dependency()
project_name <- "Prebiotic (Inuline) 16S microbiome – Dr. Daniel Freedberg"
samples <- "344 (94 Participants)"
Sequencing.date <- "12/28/2023"
platform <- "Illumina MiSeq 2x300"
contact_email <- "hp2523@cumc.columbia.edu"
expInfo <- Go_expInfo(kit_number = 6,prep_number = 1, spikein_number = 2)
devtools::install_github("bbagy/Gotools", force=T)
#===== Read Go_tools
# devtools::install_github("bbagy/Gotools", force=T)
library("Gotools")
Gotool_dependency()
project_name <- "Prebiotic (Inuline) 16S microbiome – Dr. Daniel Freedberg"
samples <- "344 (94 Participants)"
Sequencing.date <- "12/28/2023"
platform <- "Illumina MiSeq 2x300"
contact_email <- "hp2523@cumc.columbia.edu"
expInfo <- Go_expInfo(kit_number = 6,prep_number = 1, spikein_number = 2)
expInfo <- Go_expInfo(kit_number = 6, prep_number = 1, spikein_number = 2, authorName1="Heekuk Park",authorName2="Dwayne Seeram");expInfo
#===== Read Go_tools
# devtools::install_github("bbagy/Gotools", force=T)
library("Gotools")
Gotool_dependency()
#=====  Define project
project_name <- "Prebiotic (Inuline) 16S microbiome – Dr. Daniel Freedberg"
samples <- "344 (94 Participants)"
Sequencing.date <- "12/28/2023"
platform <- "Illumina MiSeq 2x300"
contact_email<-"hp2523@cumc.columbia.edu"
expInfo <- Go_expInfo(kit_number = 6, prep_number = 1, spikein_number = 2, authorName1="Heekuk Park",authorName2="Dwayne Seeram");expInfo
expInfo$contact_email
# Read the external HTML file content
html_content <- readLines("/Users/heekukpark/Dropbox/04_scripts/R_source/Gotool_html/email_form.html", warn = FALSE)
# Replace placeholders with actual R variables
contact_email <- expInfo$contact_email
html_content <- gsub("\\{\\{project_name\\}\\}", project_name, html_content)
html_content <- gsub("\\{\\{contact_email\\}\\}", contact_email, html_content)
# Print the modified HTML content into the R Markdown document
cat(html_content, sep = "\n")
contact_email<- expInfo$contact_email
# Read the external HTML file content
html_content <- readLines("/Users/heekukpark/Dropbox/04_scripts/R_source/Gotool_html/email_form.html", warn = FALSE)
# Replace placeholders with actual R variables
contact_email <- expInfo$contact_email
html_content <- gsub("\\{\\{project_name\\}\\}", project_name, html_content)
html_content <- gsub("\\{\\{contact_email\\}\\}", contact_email, html_content)
# Print the modified HTML content into the R Markdown document
cat(html_content, sep = "\n")
contact_email<- expInfo$contact_email
contact_email
contact_email<-c("hp2523@cumc.columbia.edu", "ds4057@cumc.columbia.edu")
# Read the external HTML file content
html_content <- readLines("/Users/heekukpark/Dropbox/04_scripts/R_source/Gotool_html/email_form.html", warn = FALSE)
# Replace placeholders with actual R variables
contact_email <- contact_email
html_content <- gsub("\\{\\{project_name\\}\\}", project_name, html_content)
html_content <- gsub("\\{\\{contact_email\\}\\}", contact_email, html_content)
# Print the modified HTML content into the R Markdown document
cat(html_content, sep = "\n")
contact_email<-c("ds4057@cumc.columbia.edu")
# Read the external HTML file content
html_content <- readLines("/Users/heekukpark/Dropbox/04_scripts/R_source/Gotool_html/email_form.html", warn = FALSE)
# Replace placeholders with actual R variables
contact_email <- contact_email
html_content <- gsub("\\{\\{project_name\\}\\}", project_name, html_content)
html_content <- gsub("\\{\\{contact_email\\}\\}", contact_email, html_content)
# Print the modified HTML content into the R Markdown document
cat(html_content, sep = "\n")
# Join the email addresses with a comma if there are two
contact_email_joined <- paste(contact_email, collapse = ",")
contact_email_joined
expInfo <- Go_expInfo(kit_number = 6, prep_number = 1, spikein_number = 2, authorName1="Heekuk Park",authorName2="Dwayne Seeram");expInfo
contact_email<- expInfo$contact_email
# Join the email addresses with a comma if there are two
contact_email_joined <- paste(contact_email, collapse = ",")
contact_email_joined
# Your existing code to replace placeholders
html_content <- readLines("/Users/heekukpark/Dropbox/04_scripts/R_source/Gotool_html/email_form.html", warn = FALSE)
html_content <- gsub("\\{\\{project_name\\}\\}", project_name, html_content)
html_content <- gsub("\\{\\{contact_email\\}\\}", contact_email_joined, html_content)
# Print the modified HTML content
cat(html_content, sep = "\n")
expInfo <- Go_expInfo(kit_number = 6, prep_number = 1, spikein_number = 2, authorName1="Heekuk Park",authorName2=NULL);expInfo
contact_email<- expInfo$contact_email
# Join the email addresses with a comma if there are two
contact_email_joined <- paste(contact_email, collapse = ",")
# Your existing code to replace placeholders
html_content <- readLines("/Users/heekukpark/Dropbox/04_scripts/R_source/Gotool_html/email_form.html", warn = FALSE)
html_content <- gsub("\\{\\{project_name\\}\\}", project_name, html_content)
html_content <- gsub("\\{\\{contact_email\\}\\}", contact_email_joined, html_content)
# Print the modified HTML content
cat(html_content, sep = "\n")
library(rmarkdown)
# Path to your R Markdown template
rmd_template_path <- "/Users/heekukpark/Dropbox/04_scripts/R_source/R_storage/1_R_History/2024/FB_Inuline/20240410_Summary_report_tem_v1.Rmd"
# Render the Rmd file to an HTML output
render(input = rmd_template_path, output_format = "html_document")
library(rmarkdown)
# Path to your R Markdown template
rmd_template_path <- "/Users/heekukpark/Dropbox/04_scripts/R_source/R_storage/1_R_History/2024/FB_Inuline/20240410_Summary_report_tem_v1.Rmd"
# Render the Rmd file to an HTML output
render(input = rmd_template_path, output_format = "html_document")
# Path to your R Markdown template
rmd_template_path <- "/Users/heekukpark/Dropbox/04_scripts/R_source/R_storage/1_R_History/2024/FB_Inuline/20240410_Summary_report_tem_v1.Rmd"
# Render the Rmd file to an HTML output
render(input = rmd_template_path, output_format = "html_document")
#######################################################
#---------     Core general Rmd starter      ---------#
#######################################################
# rm(list=ls())
# list.files()
#===== Read Go_tools
# devtools::install_github("bbagy/Gotools", force=T)
library("Gotools")
Gotool_dependency()
devtools::install_github("bbagy/Gotools", force=T)
library("Gotools")
devtools::install_github("bbagy/Gotools", force = T)  # or install.packages("Gomarkdown_0.0.0.9000.tar.gz", repos = NULL, type="source")
library("Gotools")
Gotool_dependency()
devtools::install_github("bbagy/Gotools", force = T)  # or install.packages("Gomarkdown_0.0.0.9000.tar.gz", repos = NULL, type="source")
setwd("~/Dropbox/04_Scripts/R_source/Gotools")
devtools::build()
devtools::document()

# `t__`가 없을 경우 `s__` 값을 복사하고, `s__`도 없으면 `NA`
for (i in seq_len(nrow(taxa))) {
if (is.na(taxa[i, "Strain"]) && !is.na(taxa[i, "Species"])) {
taxa[i, "Strain"] <- taxa[i, "Species"]
} else if (is.na(taxa[i, "Strain"])) {
taxa[i, "Strain"] <- NA
}
}
# phyloseq을 위해 데이터 프레임을 matrix로 변환
taxa_matrix <- as.matrix(taxa)
# phyloseq 객체 생성
tt <- tax_table(taxa_matrix)
rownames(tt) <- rownames(data)
ps <- phyloseq(otu_table(data, taxa_are_rows=T), tt)
print(ps)
return(ps)
}
ps.mpa <- Go_krakenTops(project, mpa = "1_out/20250218_merged_MetaPhlAn_bug_list_cleaned.txt", kingdom = "k__Bacteria")
ps.mpa <- Go_krakenTops(project, mpa = "1_out/20250218_merged_MetaPhlAn_bug_list_cleaned.txt", kingdom = "k__Bacteria")
sampledata <- read.csv("3_map/250218.Thomas_kraken2.mapping.csv",row.names=1,check.names=F);head(sampledata)
table(sampledata$TreatmentGroup)
ps1 <- merge_phyloseq(ps.mpa, sample_data(data.frame(sampledata)));ps1
ps1.sel <- subset_samples(ps1, Timepoint != "Control" & etc != "R2")
sample_names(ps1.sel) <- gsub("_L001_nohuman_unmapped_R1","",sample_names(ps1.sel) )
colnames(sampledata)
pony <- Go_myCols(piratepal = "pony");pony
cols2 <- Go_myCols(custumCols = "cols1");cols2
unique(sampledata$StudyID)
orders <- c("D0","D9","D20")
Go_barchart(psIN = ps1.sel, project = project, cutoff = 0.005, simple = F, relative = T,
taxanames =c("Phylum"), cate.vars="Timepoint", facet = NULL,
orders = orders,  x_label = NULL, mycols = cols2, legend= "bottom",
name = "(Phylum)",,
ncol=NULL, height = 5.5, width = 8)
Go_barchart(psIN = ps1.sel, project = project, cutoff = 0.01, simple = F, relative = T,
taxanames =c("Class"), cate.vars="Timepoint", facet = NULL,
orders = orders,  x_label = NULL, mycols = cols2, legend= "bottom",
name = "(Class)",
ncol=NULL, height = 5.7, width = 8)
Go_barchart(psIN = ps1.sel, project = project, cutoff = 0.01, simple = F, relative = T,
taxanames =c("Order"), cate.vars="Timepoint", facet = NULL,
orders = orders,  x_label = NULL, mycols = cols2, legend= "bottom",
name = "(Order)",
ncol=NULL, height = 5.7, width = 8)
Go_barchart(psIN = ps1.sel, project = project, cutoff = 0.01, simple = F, relative = T,
taxanames =c("Family"), cate.vars="Timepoint", facet = NULL,
orders = orders,  x_label = NULL, mycols = cols2, legend= "bottom",
name = "(Family)",
ncol=NULL, height = 6, width = 8)
Go_barchart(psIN = ps1.sel, project = project, cutoff = 0.01, simple = F, relative = T,
taxanames =c("Genus"), cate.vars="Timepoint", facet = NULL,
orders = orders,  x_label = NULL, mycols = cols2, legend= "bottom",
name = "(Genus)",
ncol=NULL, height = 6, width = 8)
Go_barchart(psIN = ps1.sel, project = project, cutoff = 0.01, simple = F, relative = T,
taxanames =c("Species"), cate.vars="Timepoint", facet = NULL,
orders = orders,  x_label = NULL, mycols = cols2, legend= "bottom",
name = "(Species)",
ncol=NULL, height = 6, width = 10)
###=== pheatmap
Go_pheatmap(psIN=ps1.sel, project, title="taxa heatmap", Ntax=50, name=NULL,
group1="Timepoint",
show_rownames = T, show_colnames = T, showPhylum = T,
cluster_rows = T, cluster_cols = T,
cutree_cols = NA,
width=9)
Go_barchart(psIN = ps1.sel, project = project, cutoff = 0.01, simple = F, relative = T,
taxanames =c("Strain"), cate.vars="Timepoint", facet = NULL,
orders = orders,  x_label = NULL, mycols = cols2, legend= "bottom",
name = "(Strain)",
ncol=NULL, height = 6, width = 10)
psIN <- ps1.sel
project
cate.outs = variation
cont.conf = NULL
cate.conf=conf
orders= orders
name=NULL
rand.eff=NULL
ps1.sel
physeq <- psIN
sample_sums(physeq)
Go_psTotab(psIN,project)
Go_krakenTops <- function(project,
mpa,
kingdom = "d__Bacteria"){
print(sprintf("Currently kingdom is %s", kingdom))
rds <- file.path(sprintf("%s", "2_rds"))
if (!file_test("-d", rds)) dir.create(rds)
# read kraken mpa
mpatable <- read.table(mpa, header=T, as.is=T, sep="\t", comment.char="", row.names=1, quote="")
# 특정 킹덤만 필터링
L1 <- subset(mpatable, grepl(kingdom, rownames(mpatable)))
L2 <- subset(L1, grepl("p__", rownames(L1)))
L3 <- subset(L2, grepl("c__", rownames(L2)))
L4 <- subset(L3, grepl("o__", rownames(L3)))
L5 <- subset(L4, grepl("f__", rownames(L4)))
L6 <- subset(L5, grepl("g__", rownames(L5)))
L7 <- subset(L6, grepl("s__", rownames(L6)))  # Species까지 필터링
# t__가 없는 경우 s__ 값을 복사하여 t__를 채움
rownames(L7) <- ifelse(grepl("t__", rownames(L7)), rownames(L7), paste0(rownames(L7), ";t__", gsub("^.*;s__", "", rownames(L7))))
# t__가 있는 데이터만 유지
L8 <- subset(L7, grepl("t__", rownames(L7)))
data <- L8[, setdiff(1:ncol(L8), grep(".Bacterial.kraken.1", colnames(L8)))]
# 컬럼명 정리
tt <- try({
if (any(grepl("_mpa|_out.txt|_metaphlan_bugs_list", colnames(data)))) {
colnames(data) <- gsub("_mpa", "", colnames(data))
colnames(data) <- gsub("_out.txt", "", colnames(data))
colnames(data) <- gsub("_metaphlan_bugs_list", "", colnames(data))
}
if (any(grepl("^X", colnames(data)))) {
colnames(data) <- gsub("^X", "", colnames(data))
}
}, silent = TRUE)
# 오류 발생 시 대체 데이터(L8) 활용
if (inherits(tt, "try-error")) {
if (any(grepl("_mpa|_out.txt|_metaphlan_bugs_list", colnames(L8)))) {
colnames(L8) <- gsub("_mpa", "", colnames(L8))
colnames(L8) <- gsub("_out.txt", "", colnames(L8))
colnames(L8) <- gsub("_metaphlan_bugs_list", "", colnames(L8))
}
if (any(grepl("^X", colnames(L8)))) {
colnames(L8) <- gsub("^X", "", colnames(L8))
}
rownames(L8) <- gsub("\\|", ";", rownames(L8))
data <- L8
} else {
rownames(data) <- gsub("\\|", ";", rownames(data))
}
# Taxonomic Rank 정리
ranklist <- c("Rank1", "Phylum", "Class", "Order", "Family", "Genus", "Species", "Strain")
taxlist <- lapply(rownames(data), function(x) parse_taxonomy_qiime(x))
# 데이터 프레임 변환
taxa <- as.data.frame(matrix(NA, nrow=nrow(data), ncol=length(ranklist)))
colnames(taxa) <- ranklist
for (i in seq_along(taxlist)) {
if (!is.null(taxlist[[i]])) {
valid_names <- intersect(names(taxlist[[i]]), ranklist)
if (length(valid_names) > 0) {
taxa[i, valid_names] <- taxlist[[i]][valid_names]
}
}
}
# phyloseq을 위해 데이터 프레임을 matrix로 변환
taxa_matrix <- as.matrix(taxa)
tt <- tax_table(taxa_matrix)
rownames(tt) <- rownames(data)
# phyloseq 객체 생성
ps <- phyloseq(otu_table(data, taxa_are_rows=T), tt)
print(ps)
return(ps)
}
ps.mpa <- Go_krakenTops(project, mpa = "1_out/20250218_merged_MetaPhlAn_bug_list_cleaned.txt", kingdom = "k__Bacteria")
sampledata <- read.csv("3_map/250218.Thomas_kraken2.mapping.csv",row.names=1,check.names=F);head(sampledata)
table(sampledata$TreatmentGroup)
ps1 <- merge_phyloseq(ps.mpa, sample_data(data.frame(sampledata)));ps1
Go_krakenTops <- function(project,
mpa,
kingdom = "d__Bacteria"){
print(sprintf("Currently kingdom is %s", kingdom))
rds <- file.path(sprintf("%s", "2_rds"))
if (!file_test("-d", rds)) dir.create(rds)
# read kraken mpa
mpatable <- read.table(mpa, header=T, as.is=T, sep="\t", comment.char="", row.names=1, quote="")
# 특정 킹덤만 필터링
L1 <- subset(mpatable, grepl(kingdom, rownames(mpatable)))
L2 <- subset(L1, grepl("p__", rownames(L1)))
L3 <- subset(L2, grepl("c__", rownames(L2)))
L4 <- subset(L3, grepl("o__", rownames(L3)))
L5 <- subset(L4, grepl("f__", rownames(L4)))
L6 <- subset(L5, grepl("g__", rownames(L5)))
L7 <- subset(L6, grepl("s__", rownames(L6)))  # Species까지 필터링
# t__가 없는 경우 s__ 값을 복사하여 t__를 채움
rownames(L7) <- ifelse(grepl("t__", rownames(L7)), rownames(L7), paste0(rownames(L7), ";t__", gsub("^.*;s__", "", rownames(L7))))
# t__가 있는 데이터만 유지
L8 <- subset(L7, grepl("t__", rownames(L7)))
data <- L8[, setdiff(1:ncol(L8), grep(".Bacterial.kraken.1", colnames(L8)))]
# 컬럼명 정리
tt <- try({
if (any(grepl("_mpa|_out.txt|_metaphlan_bugs_list", colnames(data)))) {
colnames(data) <- gsub("_mpa", "", colnames(data))
colnames(data) <- gsub("_out.txt", "", colnames(data))
colnames(data) <- gsub("_metaphlan_bugs_list", "", colnames(data))
}
if (any(grepl("^X", colnames(data)))) {
colnames(data) <- gsub("^X", "", colnames(data))
}
}, silent = TRUE)
# 오류 발생 시 대체 데이터(L8) 활용
if (inherits(tt, "try-error")) {
if (any(grepl("_mpa|_out.txt|_metaphlan_bugs_list", colnames(L8)))) {
colnames(L8) <- gsub("_mpa", "", colnames(L8))
colnames(L8) <- gsub("_out.txt", "", colnames(L8))
colnames(L8) <- gsub("_metaphlan_bugs_list", "", colnames(L8))
}
if (any(grepl("^X", colnames(L8)))) {
colnames(L8) <- gsub("^X", "", colnames(L8))
}
rownames(L8) <- gsub("\\|", ";", rownames(L8))
data <- L8
} else {
rownames(data) <- gsub("\\|", ";", rownames(data))
}
# Taxonomic Rank 정리
ranklist <- c("Rank1", "Phylum", "Class", "Order", "Family", "Genus", "Species", "Strain")
taxlist <- lapply(rownames(data), function(x) parse_taxonomy_qiime(x))
# 데이터 프레임 변환
taxa <- as.data.frame(matrix(NA, nrow=nrow(data), ncol=length(ranklist)))
colnames(taxa) <- ranklist
for (i in seq_along(taxlist)) {
if (!is.null(taxlist[[i]])) {
valid_names <- intersect(names(taxlist[[i]]), ranklist)
if (length(valid_names) > 0) {
taxa[i, valid_names] <- taxlist[[i]][valid_names]
}
}
}
# phyloseq을 위해 데이터 프레임을 matrix로 변환
taxa_matrix <- as.matrix(taxa)
tt <- tax_table(taxa_matrix)
rownames(tt) <- rownames(data)
# phyloseq 객체 생성
ps <- phyloseq(otu_table(data, taxa_are_rows=T), tt)
print(ps)
return(ps)
}
ps.mpa <- Go_krakenTops(project, mpa = "1_out/20250218_merged_MetaPhlAn_bug_list_cleaned.txt", kingdom = "k__Bacteria")
Go_krakenTops <- function(project,
mpa,
kingdom = "d__Bacteria"){
print(sprintf("Currently kingdom is %s", kingdom))
rds <- file.path(sprintf("%s", "2_rds"))
if (!file_test("-d", rds)) dir.create(rds)
# read kraken mpa
mpatable <- read.table(mpa, header=T, as.is=T, sep="\t", comment.char="", row.names=1, quote="")
# 특정 킹덤만 필터링
L1 <- subset(mpatable, grepl(kingdom, rownames(mpatable)))
L2 <- subset(L1, grepl("p__", rownames(L1)))
L3 <- subset(L2, grepl("c__", rownames(L2)))
L4 <- subset(L3, grepl("o__", rownames(L3)))
L5 <- subset(L4, grepl("f__", rownames(L4)))
L6 <- subset(L5, grepl("g__", rownames(L5)))
L7 <- subset(L6, grepl("s__", rownames(L6)))  # Species까지 필터링
# t__가 없는 경우 s__ 값을 복사하여 t__를 채움
rownames(L7) <- ifelse(grepl("t__", rownames(L7)), rownames(L7), paste0(rownames(L7), ";t__", gsub("^.*;s__", "", rownames(L7))))
# t__가 있는 데이터만 유지
L8 <- subset(L7, grepl("t__", rownames(L7)))
data <- L8[, setdiff(1:ncol(L8), grep(".Bacterial.kraken.1", colnames(L8)))]
# 컬럼명 정리
tt <- try({
if (any(grepl("_mpa|_out.txt|_metaphlan_bugs_list", colnames(data)))) {
colnames(data) <- gsub("_mpa", "", colnames(data))
colnames(data) <- gsub("_out.txt", "", colnames(data))
colnames(data) <- gsub("_metaphlan_bugs_list", "", colnames(data))
}
if (any(grepl("^X", colnames(data)))) {
colnames(data) <- gsub("^X", "", colnames(data))
}
}, silent = TRUE)
# 오류 발생 시 대체 데이터(L8) 활용
if (inherits(tt, "try-error")) {
if (any(grepl("_mpa|_out.txt|_metaphlan_bugs_list", colnames(L8)))) {
colnames(L8) <- gsub("_mpa", "", colnames(L8))
colnames(L8) <- gsub("_out.txt", "", colnames(L8))
colnames(L8) <- gsub("_metaphlan_bugs_list", "", colnames(L8))
}
if (any(grepl("^X", colnames(L8)))) {
colnames(L8) <- gsub("^X", "", colnames(L8))
}
rownames(L8) <- gsub("\\|", ";", rownames(L8))
data <- L8
} else {
rownames(data) <- gsub("\\|", ";", rownames(data))
}
# Taxonomic Rank 정리
ranklist <- c("Rank1", "Phylum", "Class", "Order", "Family", "Genus", "Species", "Strain")
taxlist <- lapply(rownames(data), function(x) parse_taxonomy_qiime(x))
# 데이터 프레임 변환
taxa <- as.data.frame(matrix(NA, nrow=nrow(data), ncol=length(ranklist)))
colnames(taxa) <- ranklist
for (i in seq_along(taxlist)) {
if (!is.null(taxlist[[i]])) {
valid_names <- intersect(names(taxlist[[i]]), ranklist)
if (length(valid_names) > 0) {
taxa[i, valid_names] <- taxlist[[i]][valid_names]
}
}
}
# phyloseq을 위해 데이터 프레임을 matrix로 변환
taxa_matrix <- as.matrix(taxa)
tt <- tax_table(taxa_matrix)
rownames(tt) <- rownames(data)
# phyloseq 객체 생성
ps <- phyloseq(otu_table(data, taxa_are_rows=T), tt)
print(ps)
return(ps)
}
mpa = "1_out/20250218_merged_MetaPhlAn_bug_list_cleaned.txt"
kingdom = "k__Bacteria"
print(sprintf("Currently kingdom is %s", kingdom))
rds <- file.path(sprintf("%s", "2_rds"))
if (!file_test("-d", rds)) dir.create(rds)
# read kraken mpa
mpatable <- read.table(mpa, header=T, as.is=T, sep="\t", comment.char="", row.names=1, quote="")
# 특정 킹덤만 필터링
L1 <- subset(mpatable, grepl(kingdom, rownames(mpatable)))
L2 <- subset(L1, grepl("p__", rownames(L1)))
L3 <- subset(L2, grepl("c__", rownames(L2)))
L4 <- subset(L3, grepl("o__", rownames(L3)))
L5 <- subset(L4, grepl("f__", rownames(L4)))
L6 <- subset(L5, grepl("g__", rownames(L5)))
L7 <- subset(L6, grepl("s__", rownames(L6)))  # Species까지 필터링
# t__가 없는 경우 s__ 값을 복사하여 t__를 채움
rownames(L7) <- ifelse(grepl("t__", rownames(L7)), rownames(L7), paste0(rownames(L7), ";t__", gsub("^.*;s__", "", rownames(L7))))
# t__가 있는 데이터만 유지
L8 <- subset(L7, grepl("t__", rownames(L7)))
View(L8)
# 특정 킹덤만 필터링
L1 <- subset(mpatable, grepl(kingdom, rownames(mpatable)))
L2 <- subset(L1, grepl("p__", rownames(L1)))
L3 <- subset(L2, grepl("c__", rownames(L2)))
L4 <- subset(L3, grepl("o__", rownames(L3)))
L5 <- subset(L4, grepl("f__", rownames(L4)))
L6 <- subset(L5, grepl("g__", rownames(L5)))
L7 <- subset(L6, grepl("s__", rownames(L6)))  # Species까지 필터링
L8 <- subset(L7, grepl("t__", rownames(L7)))
rownames(L7)
근데 어떤거는 ;t__ 가 있는 것도 있고 없는 것도 있어. 그런 상황을 유연하기 처리 할수 있을까?
print(sprintf("Currently kingdom is %s", kingdom))
rds <- file.path(sprintf("%s", "2_rds"))
if (!file_test("-d", rds)) dir.create(rds)
# read kraken mpa
mpatable <- read.table(mpa, header=T, as.is=T, sep="\t", comment.char="", row.names=1, quote="")
# 특정 킹덤만 필터링
L1 <- subset(mpatable, grepl(kingdom, rownames(mpatable)))
L2 <- subset(L1, grepl("p__", rownames(L1)))
L3 <- subset(L2, grepl("c__", rownames(L2)))
L4 <- subset(L3, grepl("o__", rownames(L3)))
L5 <- subset(L4, grepl("f__", rownames(L4)))
L6 <- subset(L5, grepl("g__", rownames(L5)))
L7 <- subset(L6, grepl("s__", rownames(L6)))  # Species까지 필터링
# `t__`가 이미 존재하는 경우 확인
has_t__ <- grepl("t__", rownames(L7))
# `s__`는 있지만 `t__`가 없는 경우 `t__`를 생성해야 함
s_names <- gsub(";t__.*", "", rownames(L7[has_t__, , drop=FALSE]))  # `t__`가 있는 것에서 `s__`만 추출
needs_t__ <- !has_t__ & rownames(L7) %in% s_names  # `s__`만 있는 경우 확인
# `t__`가 없는 경우 `s__` 값을 복사하여 `t__`를 채움
rownames(L7)[needs_t__] <- paste0(rownames(L7)[needs_t__], ";t__", gsub("^.*;s__", "", rownames(L7)[needs_t__]))
# 이제 `t__`가 있는 데이터만 유지
L8 <- subset(L7, grepl("t__", rownames(L7)))
Go_krakenTops <- function(project,
mpa,
kingdom = "d__Bacteria"){
print(sprintf("Currently kingdom is %s", kingdom))
rds <- file.path(sprintf("%s", "2_rds"))
if (!file_test("-d", rds)) dir.create(rds)
# read kraken mpa
mpatable <- read.table(mpa, header=T, as.is=T, sep="\t", comment.char="", row.names=1, quote="")
# 특정 킹덤만 필터링
L1 <- subset(mpatable, grepl(kingdom, rownames(mpatable)))
L2 <- subset(L1, grepl("p__", rownames(L1)))
L3 <- subset(L2, grepl("c__", rownames(L2)))
L4 <- subset(L3, grepl("o__", rownames(L3)))
L5 <- subset(L4, grepl("f__", rownames(L4)))
L6 <- subset(L5, grepl("g__", rownames(L5)))
L7 <- subset(L6, grepl("s__", rownames(L6)))  # Species까지 필터링
# `t__`가 이미 존재하는 경우 확인
has_t__ <- grepl("t__", rownames(L7))
# `s__`는 있지만 `t__`가 없는 경우 `t__`를 생성해야 함
s_names <- gsub(";t__.*", "", rownames(L7[has_t__, , drop=FALSE]))  # `t__`가 있는 것에서 `s__`만 추출
needs_t__ <- !has_t__ & rownames(L7) %in% s_names  # `s__`만 있는 경우 확인
# `t__`가 없는 경우 `s__` 값을 복사하여 `t__`를 채움
rownames(L7)[needs_t__] <- paste0(rownames(L7)[needs_t__], ";t__", gsub("^.*;s__", "", rownames(L7)[needs_t__]))
# 이제 `t__`가 있는 데이터만 유지
L8 <- subset(L7, grepl("t__", rownames(L7)))
data <- L8[, setdiff(1:ncol(L8), grep(".Bacterial.kraken.1", colnames(L8)))]
# 컬럼명 정리
tt <- try({
if (any(grepl("_mpa|_out.txt|_metaphlan_bugs_list", colnames(data)))) {
colnames(data) <- gsub("_mpa", "", colnames(data))
colnames(data) <- gsub("_out.txt", "", colnames(data))
colnames(data) <- gsub("_metaphlan_bugs_list", "", colnames(data))
}
if (any(grepl("^X", colnames(data)))) {
colnames(data) <- gsub("^X", "", colnames(data))
}
}, silent = TRUE)
# 오류 발생 시 대체 데이터(L8) 활용
if (inherits(tt, "try-error")) {
if (any(grepl("_mpa|_out.txt|_metaphlan_bugs_list", colnames(L8)))) {
colnames(L8) <- gsub("_mpa", "", colnames(L8))
colnames(L8) <- gsub("_out.txt", "", colnames(L8))
colnames(L8) <- gsub("_metaphlan_bugs_list", "", colnames(L8))
}
if (any(grepl("^X", colnames(L8)))) {
colnames(L8) <- gsub("^X", "", colnames(L8))
}
rownames(L8) <- gsub("\\|", ";", rownames(L8))
data <- L8
} else {
rownames(data) <- gsub("\\|", ";", rownames(data))
}
# Taxonomic Rank 정리
ranklist <- c("Rank1", "Phylum", "Class", "Order", "Family", "Genus", "Species", "Strain")
taxlist <- lapply(rownames(data), function(x) parse_taxonomy_qiime(x))
# 데이터 프레임 변환
taxa <- as.data.frame(matrix(NA, nrow=nrow(data), ncol=length(ranklist)))
colnames(taxa) <- ranklist
for (i in seq_along(taxlist)) {
if (!is.null(taxlist[[i]])) {
valid_names <- intersect(names(taxlist[[i]]), ranklist)
if (length(valid_names) > 0) {
taxa[i, valid_names] <- taxlist[[i]][valid_names]
}
}
}
# phyloseq을 위해 데이터 프레임을 matrix로 변환
taxa_matrix <- as.matrix(taxa)
tt <- tax_table(taxa_matrix)
rownames(tt) <- rownames(data)
# phyloseq 객체 생성
ps <- phyloseq(otu_table(data, taxa_are_rows=T), tt)
print(ps)
return(ps)
}
ps.mpa <- Go_krakenTops(project, mpa = "1_out/20250218_merged_MetaPhlAn_bug_list_cleaned.txt", kingdom = "k__Bacteria")
print(sprintf("Currently kingdom is %s", kingdom))
rds <- file.path(sprintf("%s", "2_rds"))
if (!file_test("-d", rds)) dir.create(rds)
# read kraken mpa
mpatable <- read.table(mpa, header=T, as.is=T, sep="\t", comment.char="", row.names=1, quote="")
# 특정 킹덤만 필터링
L1 <- subset(mpatable, grepl(kingdom, rownames(mpatable)))
L2 <- subset(L1, grepl("p__", rownames(L1)))
L3 <- subset(L2, grepl("c__", rownames(L2)))
L4 <- subset(L3, grepl("o__", rownames(L3)))
L5 <- subset(L4, grepl("f__", rownames(L4)))
L6 <- subset(L5, grepl("g__", rownames(L5)))
L7 <- subset(L6, grepl("s__", rownames(L6)))  # Species까지 필터링
Go_krakenTops <- function(project,
mpa,
kingdom = "d__Bacteria"){
print(sprintf("Currently kingdom is %s", kingdom))
rds <- file.path(sprintf("%s", "2_rds"))
if (!file_test("-d", rds)) dir.create(rds)
# read kraken mpa
mpatable <- read.table(mpa, header=T, as.is=T, sep="\t", comment.char="", row.names=1, quote="")
# 특정 킹덤만 필터링
L1 <- subset(mpatable, grepl(kingdom, rownames(mpatable)))
L2 <- subset(L1, grepl("p__", rownames(L1)))
L3 <- subset(L2, grepl("c__", rownames(L2)))
L4 <- subset(L3, grepl("o__", rownames(L3)))
L5 <- subset(L4, grepl("f__", rownames(L4)))
L6 <- subset(L5, grepl("g__", rownames(L5)))
L7 <- subset(L6, grepl("s__", rownames(L6)))  # Species까지 필터링
# `t__`가 있는 경우 확인
has_t__ <- grepl("t__", rownames(L7))
if (any(has_t__)) {
# `t__`가 하나라도 있으면 기존 방식 유지
s_names <- gsub(";t__.*", "", rownames(L7[has_t__, , drop=FALSE]))
needs_t__ <- !has_t__ & rownames(L7) %in% s_names
rownames(L7)[needs_t__] <- paste0(rownames(L7)[needs_t__], ";t__", gsub("^.*;s__", "", rownames(L7)[needs_t__]))
} else {
# `t__`가 전혀 없는 경우: `s__`를 `t__`로 변환
rownames(L7) <- paste0(rownames(L7), ";t__", gsub("^.*;s__", "", rownames(L7)))
}
# `t__`가 있는 데이터만 유지
L8 <- subset(L7, grepl("t__", rownames(L7)))
data <- L8[, setdiff(1:ncol(L8), grep(".Bacterial.kraken.1", colnames(L8)))]
# phyloseq 객체 생성
taxa_matrix <- as.matrix(rownames(data))
tt <- tax_table(taxa_matrix)
rownames(tt) <- rownames(data)
ps <- phyloseq(otu_table(data, taxa_are_rows=T), tt)
print(ps)
return(ps)
}
ps.mpa <- Go_krakenTops(project, mpa = "1_out/20250218_merged_MetaPhlAn_bug_list_cleaned.txt", kingdom = "k__Bacteria")
ps.mpa <- Go_krakenTops(project, mpa = "1_out/20250218_merged_MetaPhlAn_bug_list_cleaned.txt", kingdom = "k__Bacteria")
physeq <- psIN
psIN <- ps1.sel
physeq <- psIN
sample_sums(physeq)
psIN
# work dir
project<-"Thomas_kraken2"
setwd("~/cumc.columbia.edu/Uhlemann Lab - Microbiome Core/1_Projects/MAPS_Tao_Leu/2_Analysis/20250125_MG_AVITI/")
ps.mpa <- Go_krakenTops(project, mpa = "1_out/20250218_merged_MetaPhlAn_bug_list_cleaned.txt", kingdom = "k__Bacteria")
sampledata <- read.csv("3_map/250218.Thomas_kraken2.mapping.csv",row.names=1,check.names=F);head(sampledata)
table(sampledata$TreatmentGroup)
ps1 <- merge_phyloseq(ps.mpa, sample_data(data.frame(sampledata)));ps1
ps1.sel <- subset_samples(ps1, Timepoint != "Control" & etc != "R2")
sample_names(ps1.sel) <- gsub("_L001_nohuman_unmapped_R1","",sample_names(ps1.sel) )
ps.mpa <- Go_krakenTops(project, mpa = "1_out/20250218_merged_MetaPhlAn_bug_list_cleaned.txt", kingdom = "k__Bacteria")
sampledata <- read.csv("3_map/250218.Thomas_kraken2.mapping.csv",row.names=1,check.names=F);head(sampledata)
table(sampledata$TreatmentGroup)
ps1 <- merge_phyloseq(ps.mpa, sample_data(data.frame(sampledata)));ps1
ps1.sel <- subset_samples(ps1, Timepoint != "Control" & etc != "R2")
ps.mpa <- Go_krakenTops(project, mpa = "1_out/20250218_merged_MetaPhlAn_bug_list_cleaned.txt", kingdom = "k__Bacteria")
sampledata <- read.csv("3_map/250218.Thomas_kraken2.mapping.csv",row.names=1,check.names=F);head(sampledata)
table(sampledata$TreatmentGroup)
sample_names(ps.mpa)
ps.mpa <- Go_krakenTops(project, mpa = "1_out/20250218_merged_MetaPhlAn_bug_list_cleaned.txt", kingdom = "k__Bacteria")
# build package
setwd("~/Dropbox/04_Scripts/R_source/Gotools")
devtools::build() #
devtools::document()
# build package
setwd("~/Dropbox/04_Scripts/R_source/Gotools")
devtools::build() # generate Gotools_0.0.0.9000.tar.gz
devtools::document()

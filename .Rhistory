group_comparisons[[i]] <- x
};group_comparisons
print(1)
for(i in 1:length(group_comparisons)){
print(group_comparisons[i])
group.combination <- unlist(group_comparisons[i]);group.combination
if(combination ==2){
basline <- group.combination[1]
smvar <- group.combination[2]
df.cbn <- subset(df.na, df.na[,mvar] %in% c(basline,smvar))
} else if(combination ==3){
basline <- group.combination[1]
smvar1 <- group.combination[2]
smvar2 <- group.combination[3]
df.cbn <- subset(df.na, df.na[,mvar] %in% c(basline,smvar1, smvar2))
}else if(combination ==4){
basline <- group.combination[1]
smvar1 <- group.combination[2]
smvar2 <- group.combination[3]
smvar3 <- group.combination[4]
df.cbn <- subset(df.na, df.na[,mvar] %in% c(basline,smvar1, smvar2,smvar3))
}else if(combination ==5){
basline <- group.combination[1]
smvar1 <- group.combination[2]
smvar2 <- group.combination[3]
smvar3 <- group.combination[4]
smvar4 <- group.combination[5]
df.cbn <- subset(df.na, df.na[,mvar] %in% c(basline,smvar1, smvar2,smvar3,smvar4))
}else if(combination ==6){
basline <- group.combination[1]
smvar1 <- group.combination[2]
smvar2 <- group.combination[3]
smvar3 <- group.combination[4]
smvar4 <- group.combination[5]
smvar5 <- group.combination[6]
df.cbn <- subset(df.na, df.na[,mvar] %in% c(basline,smvar1, smvar2,smvar3,smvar4,smvar5))
}else if(combination ==7){
basline <- group.combination[1]
smvar1 <- group.combination[2]
smvar2 <- group.combination[3]
smvar3 <- group.combination[4]
smvar4 <- group.combination[5]
smvar5 <- group.combination[6]
smvar6 <- group.combination[7]
df.cbn <- subset(df.na, df.na[,mvar] %in% c(basline,smvar1, smvar2,smvar3,smvar4,smvar5,smvar6))
}else if(combination ==8){
basline <- group.combination[1]
smvar1 <- group.combination[2]
smvar2 <- group.combination[3]
smvar3 <- group.combination[4]
smvar4 <- group.combination[5]
smvar5 <- group.combination[6]
smvar6 <- group.combination[7]
smvar7 <- group.combination[8]
df.cbn <- subset(df.na, df.na[,mvar] %in% c(basline,smvar1, smvar2,smvar3,smvar4,smvar5,smvar6,smvar7))
}else if(combination ==9){
basline <- group.combination[1]
smvar1 <- group.combination[2]
smvar2 <- group.combination[3]
smvar3 <- group.combination[4]
smvar4 <- group.combination[5]
smvar5 <- group.combination[6]
smvar6 <- group.combination[7]
smvar7 <- group.combination[8]
smvar8 <- group.combination[9]
df.cbn <- subset(df.na, df.na[,mvar] %in% c(basline,smvar1, smvar2,smvar3,smvar4,smvar5,smvar6,smvar7,smvar8))
}else if(combination ==10){
basline <- group.combination[1]
smvar1 <- group_com
smvar2 <- group.combination[3]
smvar3 <- group.combination[4]
smvar4 <- group.combination[5]
smvar5 <- group.combination[6]
smvar6 <- group.combination[7]
smvar7 <- group.combination[8]
smvar8 <- group.combination[9]
smvar9 <- group.combination[10]
df.cbn <- subset(df.na, df.na[,mvar] %in% c(basline,smvar1, smvar2,smvar3,smvar4,smvar5,smvar6,smvar7,smvar8,smvar9))
}  else{
print("combination should be 2~10 only.")
break
}
unique(df.cbn[,mvar])
# make a comnination for stat
df.cbn[,mvar] <- factor(df.cbn[,mvar])
cbn <- combn(x = levels(df.cbn[,mvar]), m = 2)
my_comparisons <- {}
for(i in 1:ncol(cbn)){
x <- cbn[,i]
my_comparisons[[i]] <- x
};my_comparisons
if(combination != 2){
combination.N <- combination - 1
my_comparisons <- my_comparisons[1:combination.N]  # baseline-only 유지
}
for(oc in outcomes){
# remove NA for facet
if (length(facet) >= 1) {
for (fc in facet){
df.cbn[,fc] <- as.character(df.cbn[,fc]);df.cbn[,fc]
df.cbn[,fc][df.cbn[,fc] == ""] <- "NA"
df.cbn.sel <- df.cbn[!is.na(df.cbn[,fc]), ]
df.cbn <- df.cbn.sel
# facet or not
df.cbn[,fc] <- factor(df.cbn[,fc], levels = orders)
}
}
print(oc)
# check statistics method (원본 유지)
if (statistics){
if (parametric){
if (nlevels(factor(df.cbn[,mvar])) > 2) {
test <- aov(as.formula(sprintf("%s ~ %s", oc, mvar)), df.cbn)
pval <- round(summary(test)[[1]][["Pr(>F)"]][1],4)
test.name <- "ANOVA"
testmethod <-  "t.test"
} else {
testmethod <-  "t.test"
pval <- NULL
test.name <- "Pairwise T-Test"
}
}else{
if (nlevels(factor(df.cbn[,mvar])) > 2) {
test <- kruskal.test(as.formula(sprintf("%s ~ %s", oc, mvar)), df.cbn)
pval <- round(test$p.value, 4)
test.name <- "KW"
testmethod <- "wilcox.test"
} else {
testmethod <- "wilcox.test"
pval <- NULL
test.name <- "Pairwise Wilcoxon"
}
}
}else{
test.name<-NULL
pval <- NULL
}
p1 <- ggplot(df.cbn, aes_string(x=mvar, y=oc))  + labs(y=oc, x=NULL) +
theme(strip.background = element_blank()) +
theme(text=element_text(size=8), axis.text.x=element_text(angle=xangle,hjust=1,vjust=0.5,size=8),
plot.title=element_text(size=8))
if (!is.null(title)) {
p1 <- p1 + ggtitle(sprintf("%s%s%s%s", title,
ifelse(is.null(test.name), "", paste("\n",test.name, " ")),
ifelse(is.null(pval), "", paste("p=", " ")),
ifelse(is.null(pval), "", paste(pval, " "))))
} else{
p1 <- p1 + ggtitle(sprintf("%s%s%s%s", mvar,
ifelse(is.null(test.name), "", paste("\n",test.name, " ")),
ifelse(is.null(pval), "", paste("p=", " ")),
ifelse(is.null(pval), "", paste(pval, " "))))
}
# control statistic on the plot (원본 유지)
if(is.null(test.name)){
p1 <- p1
} else if(test.name == "KW" | test.name == "ANOVA"){
if(pval < cutoff){
if (statistics){
if (star) {
p1 <- p1 + stat_compare_means(method= testmethod, label = "p.signif", comparisons = my_comparisons, hide.ns = TRUE, size = 3)
}  else {
p1 <- p1 + stat_compare_means(method= testmethod, label = "p.format", comparisons = my_comparisons, size = 2)
}
}else{
p1 <- p1
}
}else {
p1 <- p1
}
}else if(testmethod == "wilcox.test" | testmethod == "t.test"){
if (statistics){
if (star) {
p1 <- p1 + stat_compare_means(method= testmethod, label = "p.signif", comparisons = my_comparisons, hide.ns = TRUE, size = 3)
} else{
p1 <- p1 + stat_compare_means(method= testmethod, label = "p.format", comparisons = my_comparisons, size = 2)
}
}else{
p1 <- p1
}
}
if(!is.null(ylim)){
if(oc == "Chao1"){
p1 = p1
}else{
p1 = p1 + ylim(ylim[1] , ylim[2])
}
}
# paired plot type (원본 유지 + LMM 주석/요약 추가)
if (!is.null(paired)) {
if(!is.null(mycols)){
p1 <- p1 + scale_color_manual(values = mycols)
}else{
p1 <- p1
}
p1 = p1 + geom_boxplot(aes_string(colour=mvar),outlier.shape = NA,lwd=box.tickness)  + theme(legend.position="none")
p1 = p1 + geom_point(aes_string(colour=mvar,group=paired),alpha = 0.8, size = dot.size, position = position_dodge(0.3),show.legend = F)
p1 = p1 + geom_line(aes_string(group=paired), color="grey50", size=0.3,position = position_dodge(0.3))
p1 = p1 + theme(legend.title = element_blank(), legend.position="bottom", legend.justification="left",legend.box.margin = ggplot2::margin(0,0,0,-1,"cm"))
# ---- (추가) LMM pairwise 주석 + 요약 출력 ----
# 통계용 원본 레벨로 비교쌍 구성 (baseline-only 규칙 유지)
lv_orig <- levels(droplevels(factor(sub(" \\(n=.*\\)$","", as.character(df.cbn[,mvar])))))
if (length(lv_orig) >= 2) {
if (!is.null(combination) && combination != 2) {
# baseline vs others, 앞에서 combination-1개만
k <- min(length(lv_orig)-1, combination-1)
my_comp0 <- lapply(seq_len(k), function(j) c(lv_orig[1], lv_orig[j+1]))
} else {
cbn0 <- combn(lv_orig, 2)
my_comp0 <- lapply(seq_len(ncol(cbn0)), function(k) cbn0[,k])
}
tmp <- df.cbn
ann <- .lmm_pvals(df = tmp, mvar = mvar, oc = oc, id_col = paired,
comparisons = my_comp0, y_nudge = 1.08, digits = 3)
if (nrow(ann) > 0) {
# (n=) 라벨로 매핑
cur_levels <- levels(df.cbn[[mvar]])
old_levels <- lv_orig
map <- setNames(sapply(old_levels, function(ol){
hit <- cur_levels[startsWith(cur_levels, ol)]
if (length(hit)>=1) hit[1] else ol
}), old_levels)
ann2 <- .map_ann_levels(ann, old2new = map)
p1 <- p1 + ggpubr::stat_pvalue_manual(ann2, label = "label", tip.length = 0.01, size = 3)
}
# 콘솔 요약
.print_lmm_emm(DAT = df.cbn, mvar = mvar, oc = oc, id_col = paired)
}
}  else{
# count or table for number of variable (원본)
if (max(table(df.cbn[,mvar])) > 150){
if(!is.null(mycols)){
p1 <- p1 + scale_fill_manual(values = mycols)
}else{
p1 <- p1
}
p1 = p1 + geom_boxplot(aes_string(fill=mvar),outlier.shape = NULL,lwd=box.tickness)   + theme(legend.position="none")
} else {
if(!is.null(mycols)){
p1 <- p1 + scale_color_manual(values = mycols)
}else{
p1 <- p1
}
p1 = p1 + geom_boxplot(aes_string(colour=mvar),outlier.shape = NA,lwd=box.tickness) + theme(legend.position="none")
p1 = p1 + geom_jitter(aes_string(colour=mvar),shape=16, alpha = 0.8, size = dot.size, position=position_jitter(0.2))
}
}
# facet (원본)
if (length(facet) >= 1) {
if(is.null(ncol)){
ncol <- length(unique(df[,facet]))
}
p1 = p1 + facet_wrap(as.formula(sprintf("~ %s" , paste(setdiff(facet, "SocpleType"), collapse="+"))),
scales="free_x", ncol = ncol)
p1 = p1 + guides(color = "none", size = "none", shape= "none")
} else {
p1 = p1 + guides(color = "none", size = "none", shape= "none")
}
# plot size ratio (원본)
if (length(unique(df.cbn[,mvar])) < 5){
if(standardsize==TRUE){
num.subgroup <- length(unique(df.cbn[,mvar]))*0.1
}else{
num.subgroup <- 0.9
}
}else{
num.subgroup <- length(unique(df.cbn[,mvar]))*0.1
}
p1  <- p1  + theme(panel.grid = element_blank(),
panel.background = element_rect(fill = "white", colour = "Black",size = 0.5, linetype = "solid"),
aspect.ratio = 1/num.subgroup)
plotlist[[length(plotlist)+1]] <- p1
}
}
}else{
# ------------ combination 미사용 (원본) ------------
print("Check combination for statistics")
cbn <- combn(x = levels(df.na[,mvar]), m = 2)
my_comparisons <- {}
for(i in 1:ncol(cbn)){
x <- cbn[,i]
my_comparisons[[i]] <- x
};my_comparisons
for(oc in outcomes){
# remove NA for facet
if (!is.null(facet)) {
for (fc in facet){
df.na[,fc] <- as.character(df.na[,fc]);df.na[,fc]
df.na[,fc][df.na[,fc] == ""] <- "NA"
df.na.sel <- df.na[!is.na(df.na[,fc]), ]
df.na <- df.na.sel
# facet or not
df.na[,fc] <- factor(df.na[,fc], levels = orders)
}
}
print(oc)
if (statistics){
if (parametric){
if (nlevels(factor(df.na[,mvar])) > 2) {
test <- aov(as.formula(sprintf("%s ~ %s", oc, mvar)), df.na)
pval <- round(summary(test)[[1]][["Pr(>F)"]][1],4)
test.name <- "ANOVA"
testmethod <-  "t.test"
} else {
testmethod <-  "t.test"
pval <- NULL
test.name <- "Pairwise T-Test"
}
}else{
if (nlevels(factor(df.na[,mvar])) > 2) {
test <- kruskal.test(as.formula(sprintf("%s ~ %s", oc, mvar)), df.na)
pval <- round(test$p.value, 4)
test.name <- "KW"
testmethod <- "wilcox.test"
} else {
testmethod <- "wilcox.test"
pval <- NULL
test.name <- "Pairwise Wilcoxon"
}
}
}else{
test.name<-NULL
pval <- NULL
}
p1 <- ggplot(df.na, aes_string(x=mvar, y=oc))  + labs(y=oc, x=NULL) +
theme(strip.background = element_blank()) +
theme(text=element_text(size=8), axis.text.x=element_text(angle=xangle,hjust=1,vjust=0.5,size=8),
plot.title=element_text(size=8))
# paired plot type (원본 유지 + LMM 주석/요약 추가)
if (!is.null(paired)) {
if(!is.null(mycols)){
p1 <- p1 + scale_color_manual(values = mycols)
}else{
p1 <- p1
}
p1 = p1 + geom_boxplot(aes_string(colour=mvar),outlier.shape = NA,lwd=box.tickness)  + theme(legend.position="none")
p1 = p1 + geom_point(aes_string(colour=mvar,group=paired),alpha = 0.8, size = dot.size, position = position_dodge(0.3), show.legend = F)
p1 = p1 + geom_line(aes_string(group=paired), color="grey50", size=0.3,position = position_dodge(0.3))
p1 = p1 + theme(legend.title = element_blank(), legend.position="bottom", legend.justification="left",legend.box.margin = ggplot2::margin(0,0,0,-1,"cm"))
# ---- (추가) LMM pairwise 주석 + 요약 출력 ----
lv_orig <- levels(droplevels(factor(sub(" \\(n=.*\\)$","", as.character(df.na[,mvar])))))
if (length(lv_orig) >= 2) {
# non-combination에서는 모든 페어 (원본 의도 유지)
cbn0 <- combn(lv_orig, 2)
my_comp0 <- lapply(seq_len(ncol(cbn0)), function(k) cbn0[,k])
tmp <- df.na
ann <- .lmm_pvals(df = tmp, mvar = mvar, oc = oc, id_col = paired,
comparisons = my_comp0, y_nudge = 1.08, digits = 3)
if (nrow(ann) > 0) {
cur_levels <- levels(df.na[[mvar]])
old_levels <- lv_orig
map <- setNames(sapply(old_levels, function(ol){
hit <- cur_levels[startsWith(cur_levels, ol)]
if (length(hit)>=1) hit[1] else ol
}), old_levels)
ann2 <- .map_ann_levels(ann, old2new = map)
p1 <- p1 + ggpubr::stat_pvalue_manual(ann2, label = "label", tip.length = 0.01, size = 3)
}
.print_lmm_emm(DAT = df.na, mvar = mvar, oc = oc, id_col = paired)
}
} else{
# count or table for number of variable
if (max(table(df.na[,mvar])) > 150){
if(!is.null(mycols)){
p1 <- p1 + scale_fill_manual(values = mycols)
}else{
p1 <- p1
}
p1 = p1 + geom_boxplot(aes_string(fill=mvar),outlier.shape = NULL,lwd=box.tickness)   + theme(legend.position="none")
} else {
if(!is.null(mycols)){
p1 <- p1 + scale_color_manual(values = mycols)
}else{
p1 <- p1
}
p1 = p1 + geom_boxplot(aes_string(colour=mvar),outlier.shape = NA,lwd=box.tickness) + theme(legend.position="none")
p1 = p1 + geom_jitter(aes_string(colour=mvar),shape=16, alpha = 0.8, size = dot.size, position=position_jitter(0.2))
}
}
# control statistic on the plot (원본 유지)
if(is.null(paired)){
if(is.null(test.name)){
p1 <- p1
} else if(test.name == "KW" | test.name == "ANOVA"){
if(pval < cutoff){
if (statistics){
if (star) {
p1 <- p1 + stat_compare_means(method= testmethod, label = "p.signif", comparisons = my_comparisons, hide.ns = TRUE, size = 3)
} else {
p1 <- p1 + stat_compare_means(method= testmethod, label = "p.format", comparisons = my_comparisons, size = 2)
}
}else{
p1 <- p1
}
}else {
p1 <- p1
}
}else if(testmethod == "wilcox.test" | testmethod == "t.test"){
if (statistics){
if (star) {
p1 <- p1 + stat_compare_means(method= testmethod, label = "p.signif", comparisons = my_comparisons, hide.ns = TRUE, size = 3)
}  else{
p1 <- p1 + stat_compare_means(method= testmethod, label = "p.format", comparisons = my_comparisons, size = 2)
}
}else{
p1 <- p1
}
}
}else{
print("paired")
if(is.null(test.name)){
p1 <- p1
} else if(test.name == "KW" | test.name == "ANOVA"){
if(pval < cutoff){
if (statistics){
if (star) {
p1 <- p1 + stat_compare_means(method= testmethod, label = "p.signif", comparisons = my_comparisons, hide.ns = TRUE, size = 3,paired = TRUE)
} else{
p1 <- p1 + stat_compare_means(method= testmethod, label = "p.format", comparisons = my_comparisons, size = 2, paired = TRUE)
}
}else{
p1 <- p1
}
}else {
p1 <- p1
}
}else if(testmethod == "wilcox.test" | testmethod == "t.test"){
print(1)
if (statistics){
if (star) {
if (data.frame(table(df.na[,mvar]))$Freq[1] ==  data.frame(table(df.na[,mvar]))$Freq[2]){
p1 <- p1 + stat_compare_means(method= testmethod, label = "p.format", comparisons = my_comparisons, size = 2,paired = TRUE)
}else{
test.name <- paste(test.name, "\n","(not fully paired) ", sep = "")
p1 <- p1 + stat_compare_means(method= testmethod, label = "p.format", comparisons = my_comparisons, size = 2)
}
} else{
if (data.frame(table(df.na[,mvar]))$Freq[1] ==  data.frame(table(df.na[,mvar]))$Freq[2]){
p1 <- p1 + stat_compare_means(method= testmethod, label = "p.format", comparisons = my_comparisons, size = 2,paired = TRUE)
}else{
p1 <- p1 + stat_compare_means(method= testmethod, label = "p.format", comparisons = my_comparisons, size = 2)
}
}
}else{
p1 <- p1
}
}
}
# Close an image (원본)
if (!is.null(title)) {
p1 <- p1 + ggtitle(sprintf("%s%s%s%s", title,
ifelse(is.null(test.name), "", paste("\n",test.name, " ")),
ifelse(is.null(pval), "", paste("p=", " ")),
ifelse(is.null(pval), "", paste(pval, " "))))
} else{
p1 <- p1 + ggtitle(sprintf("%s%s%s%s", mvar,
ifelse(is.null(test.name), "", paste("\n",test.name, " ")),
ifelse(is.null(pval), "", paste("p=", " ")),
ifelse(is.null(pval), "", paste(pval, " "))))
}
# y axis limit (원본)
if(!is.null(ylim)){
if(oc == "Chao1"){
p1 = p1
}else{
p1 = p1 + ylim(ylim[1] , ylim[2])
}
}
# facet (원본)
if (length(facet) >= 1) {
if(is.null(ncol)){
ncol <- length(unique(df[,facet]))
}
p1 = p1 + facet_wrap(as.formula(sprintf("~ %s" , paste(setdiff(facet, "SocpleType"), collapse="+"))), scales="free_x", ncol = ncol)
p1 = p1 + guides(color = "none", size = "none", shape= "none")
} else {
p1 = p1 + guides(color = "none", size = "none", shape= "none")
}
# plot size ratio (원본)
if (length(unique(df.na[,mvar])) < 5){
if(standardsize==TRUE){
num.subgroup <- length(unique(df.na[,mvar]))*0.1
}else{
num.subgroup <- 0.9
}
}else{
num.subgroup <- length(unique(df.na[,mvar]))*0.1
}
p1  <- p1  + theme(panel.grid = element_blank(),
panel.background = element_rect(fill = "white", colour = "Black",size = 0.5, linetype = "solid"),
aspect.ratio = 1/num.subgroup)
plotlist[[length(plotlist)+1]] <- p1
}
}
}
multiplot(plotlist=plotlist, cols=plotCols, rows=plotRows)
dev.off()
}
mvars <- c("V2","V3")
for(mvar in mvars){
adiv.sel <- subset(adiv, adiv[,mvar] == "Yes")
orders.visit <- c("Cellulose", "Baseline","Dr.Lac")
boxcol.visit <- c("#95CE8AFF", "#E7695DFF", "#6B8993FF")
Go_boxplot(df=adiv.sel, project = project, title = mvar, xangle = 90,  mycols = boxcol.visit,combination = NULL,
cate.vars = c("TreatmentGroup1"), outcomes = c("Chao1","Shannon"), addnumber = T, paired = "StudyID",
orders = orders.visit, star= F, facet = NULL, name = mvar, cutoff = 0.9,
height = 3, width = 5, plotCols=2, plotRows=1, standardsize = F)
}
# build package
setwd("~/Dropbox/04_Scripts/R_source/Gotools")
devtools::build() # generate Gotools_0.0.0.9000.tar.gz
devtools::document()
cd ~/Dropbox/04_Scripts/R_source/Gotools

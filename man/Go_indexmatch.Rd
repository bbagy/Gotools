% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Go_indexmatch.R
\name{Go_indexmatch}
\alias{Go_indexmatch}
\title{Go_indexmatch: Dynamically Match and Update Data Frames}
\usage{
Go_indexmatch(project, to, from, matchByTo, matchByFrom, columns, name = NULL)
}
\arguments{
\item{project}{A character string specifying the project name, used in the naming convention of the output CSV file.}

\item{to}{The target data frame to be updated.}

\item{from}{The source data frame from which values are matched and retrieved.}

\item{matchByTo}{Specifies the matching criterion for the \code{to} data frame. This can be "rownames" to use row names for matching or the name of a column in \code{to}.}

\item{matchByFrom}{Specifies the matching criterion for the \code{from} data frame. This can be "rownames" to use row names for matching or the name of a column in \code{from}.}

\item{columns}{A character vector specifying which columns in the \code{from} data frame should be used to update the corresponding columns in the \code{to} data frame. This assumes the specified columns exist in both data frames.}

\item{name}{An optional character string to add a specific identifier to the output CSV file name.}
}
\value{
Returns the updated \code{to} data frame after performing the index match and column updates.
}
\description{
This function performs a flexible index matching operation between two data frames (\code{to} and \code{from}) based on specified matching criteria that can be either row names or column values. It updates the \code{to} data frame with values from specified columns in the \code{from} data frame based on the match. Additionally, it generates a CSV file of the updated \code{to} data frame, incorporating specified naming conventions.
}
\examples{
# Assume df1 and df2 are existing data frames where df1 needs to be updated based on df2
df1 <- data.frame(id = 1:3, value = c("A", "B", "C"))
df2 <- data.frame(id = 1:3, value = c("X", "Y", "Z"))
# Update df1 based on matching column 'id'
updated_df <- Go_indexmatch(project = "MyProject",
                            to = df1, 
                            from = df2, 
                            matchByTo = "id", 
                            matchByFrom = "id",
                            columns = c("value"),
                            name = "UpdatedDF")

# Example with row names
rownames(df1) <- df1$id
rownames(df2) <- df2$id
updated_df <- Go_indexmatch(project = "MyProject",
                            to = df1, 
                            from = df2, 
                            matchByTo = "rownames", 
                            matchByFrom = "rownames",
                            columns = c("value"),
                            name = "UpdatedDFUsingRowNames")

}

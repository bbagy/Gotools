% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Go_xgboost.R
\name{\%||\%}
\alias{\%||\%}
\title{Go_xgboost}
\usage{
a \%||\% b
}
\arguments{
\item{psIN}{A \code{phyloseq} object.}

\item{project}{Character; project prefix used to create an output directory
\verb{<project_YYMMDD>/XGBoost}.}

\item{outcome}{Character; name of the binary outcome column in sample metadata.
Levels must include \code{orders}.}

\item{testSet}{Logical; if \code{FALSE} (default) runs CV-only. If \code{TRUE},
creates a 75/25 group-aware holdout split plus inner CV on the train set.}

\item{clinical_vari}{Character vector of metadata columns to add as covariates
(optional). Character/factor covariates are one-hot encoded.}

\item{StudyID_col}{Character; subject/group id column. If missing, rownames are used. Default \code{"StudyID"}.}

\item{taxrank}{Either \code{"ASV"} to keep features as is, or a taxonomic rank
present in \code{tax_table(psIN)} (e.g., \code{"Genus"}). Default \code{"ASV"}.}

\item{prev_min}{Numeric in \(\link{0,1}\); minimum prevalence threshold on relative
abundance presence. Default \code{0.01}.}

\item{relab_min}{Numeric; minimum mean relative abundance threshold. Default \code{1e-4}.}

\item{n_folds}{Integer; number of CV folds. Default \code{5}.}

\item{seed}{Integer; random seed. Default \code{123}.}

\item{n_candidates}{Integer; number of random hyperparameter candidates. Default \code{40}.}

\item{num.trees}{Integer; maximum boosting rounds used for CV/early stopping
(best iteration is selected). Default \code{1000}.}

\item{orders}{Character vector of length 2 giving the outcome level order,
e.g., \code{c("Control","Case")}. The positive class is \code{orders[2]}.}
}
\value{
(Invisibly) a list with run \code{mode}, metrics (AUC/AUPRC), \code{best_param},
and \code{outdir}. Side effects: writes to \verb{<project_YYMMDD>/XGBoost/}:
\itemize{
\item \code{random_search_results.csv}
\item \code{predictions.csv} (OOF for CV-only; Train/Test for holdout mode)
\item \code{xgb_final_model.rds} (or train model in holdout mode), \code{xgb_meta.rds}
\item \code{importance_feature.csv}, \code{importance_taxon.csv}
\item ROC/PR PNGs (\code{ROC_OOF.png}, \code{PR_OOF.png}, or Train/Test variants)
}
}
\description{
Builds a binary XGBoost model from a \code{phyloseq} object’s relative abundances
(optionally aggregated to a taxonomic rank) and optional clinical variables.
The function:
\itemize{
\item optionally aggregates features by \code{taxrank} (e.g., \code{"Genus"}),
\item converts to relative abundances and filters by prevalence/mean abundance,
\item one-hot encodes character clinical covariates, imputes NA with medians, and scales,
\item fixes outcome level order (\code{orders}; positive class is \code{orders[2]}),
\item does random hyperparameter search via \code{xgb.cv} with K folds that preserve
subject groups when \code{StudyID_col} varies across rows,
\item trains the final model and saves OOF (or Train/Test) predictions, feature
importance (with direction), aggregated importance by taxon, and ROC/PR plots.
}
}
\details{
StudyID-aware XGBoost classification for microbiome (+ optional clinical covariates)
with stratified/grouped cross-validation, random hyperparameter search, SHAP-based
(or gain+Spearman) feature direction, and rich outputs.

\strong{Grouping and stratification:} If \code{StudyID_col} does not equal rownames
for all samples, folds are created to keep samples from the same StudyID together,
while preserving class balance at the group level when possible. Otherwise,
standard stratified folds are used. Class imbalance is addressed via
\code{scale_pos_weight = neg/pos}.

\strong{Feature direction:} If SHAP values are available (using \code{predcontrib=TRUE}),
feature “Direction” is assigned by the mean SHAP value sign; otherwise, direction
falls back to Spearman correlation between feature values and OOF (or Train) predictions.

\strong{Outputs:} The function writes a dated output folder with the tuned results,
predictions, feature/taxon importances (including Direction), and ROC/PR plots.
}
\examples{
\dontrun{
# Binary outcome with levels c("Control","Case") in metadata column "Status"
res <- Go_xgboost(
  psIN = ps,
  project = "IBD",
  outcome = "Status",
  clinical_vari = c("Age","BMI","Sex"),
  StudyID_col = "SubjectID",
  taxrank = "Genus",
  prev_min = 0.05,
  relab_min = 1e-4,
  n_folds = 5,
  n_candidates = 40,
  num.trees = 1000,
  orders = c("Control","Case")
)
res$AUC
}

}
